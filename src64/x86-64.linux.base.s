/* 16dec09 */

   .data

   .balign  16
   .global  Globals
Globals:
   .global  AV
AV:
   .quad    0
   .global  AV0
AV0:
   .quad    0
   .global  Home
Home:
   .quad    0
   .global  Heaps
Heaps:
   .quad    0
   .global  Avail
Avail:
   .quad    0
   .global  Chr
Chr:
   .quad    0
   .global  EnvPutB
EnvPutB:
   .quad    0
   .global  EnvGet_A
EnvGet_A:
   .quad    0
   .global  InFile
InFile:
   .quad    0
   .global  OutFile
OutFile:
   .quad    0
   .global  Buf
Buf:
   .quad    0
   .quad    0
Stack0:
   .quad    0
Catch:
   .quad    0
Termio:
   .quad    0
Time:
   .quad    0
USec:
   .quad    0
TtyPid:
   .quad    0
InFDs:
   .quad    0
InFiles:
   .quad    0
OutFDs:
   .quad    0
OutFiles:
   .quad    0
PutBinBZ:
   .quad    0
GetBinZ_FB:
   .quad    0
Seed:
   .quad    0
   .quad    0
TickU:
   .quad    0
TickS:
   .quad    0
Slot:
   .quad    0
Spkr:
   .quad    0
Mic:
   .quad    0
SpMiPipe:
   .quad    0
Hear:
   .quad    0
Tell:
   .quad    0
TellBuf:
   .quad    0
Children:
   .quad    0
Child:
   .quad    0
ExtN:
   .quad    0
Extn:
   .quad    0
StrX:
   .quad    0
StrC:
   .quad    0
Alarm:
   .quad    Nil
LineX:
   .quad    2
LineC:
   .quad    -1
GcCount:
   .quad    65536
Sep0:
   .quad    46
Sep3:
   .quad    44
BufEnd:
   .quad    0
Penv:
   .quad    Nil
Pnl:
   .quad    Nil
DBs:
   .quad    0
DbFile:
   .quad    0
DbFiles:
   .quad    0
DbBlock:
   .quad    0
MaxBlkSize:
   .quad    0
BlkIndex:
   .quad    0
BlkLink:
   .quad    0
DbJnl:
   .quad    0
DbLog:
   .quad    0
   .global  Intern
Intern:
   .quad    Nil
   .quad    Nil
   .global  Transient
Transient:
   .quad    Nil
   .quad    Nil

   .balign  16
   .global  SymTab
SymTab:
   .byte    226, 148, 196, 4, 0, 0, 0, 0
   .global  Nil
Nil:
   .quad    Nil
   .quad    Nil
   .quad    0
   .byte    162, 242, 52, 5, 0, 0, 0, 0
   .global  OS
OS:
   .quad    TgOS
   .byte    162, 66, 36, 4, 0, 0, 0, 0
   .global  DB
DB:
   .quad    Db1
   .byte    210, 86, 70, 135, 6, 0, 0, 0
   .global  Meth
Meth:
   .quad    doMeth
   .byte    18, 87, 247, 70, 87, 6, 0, 0
   .global  Quote
Quote:
   .quad    doQuote
   .byte    66, 5, 0, 0, 0, 0, 0, 0
   .global  TSym
TSym:
   .quad    TSym
   .byte    146, 4, 0, 0, 0, 0, 0, 0
   .global  ISym
ISym:
   .quad    Nil
   .byte    226, 4, 0, 0, 0, 0, 0, 0
   .global  NSym
NSym:
   .quad    Nil
   .byte    50, 5, 0, 0, 0, 0, 0, 0
   .global  SSym
SSym:
   .quad    Nil
   .byte    50, 4, 0, 0, 0, 0, 0, 0
   .global  CSym
CSym:
   .quad    Nil
   .byte    34, 4, 0, 0, 0, 0, 0, 0
   .global  BSym
BSym:
   .quad    Nil
   .byte    162, 50, 245, 198, 246, 6, 0, 0
   .global  Solo
Solo:
   .quad    2
   .byte    162, 2, 5, 149, 70, 6, 0, 0
   .global  PPid
PPid:
   .quad    Nil
   .byte    162, 2, 149, 70, 6, 0, 0, 0
   .global  Pid
Pid:
   .quad    0
   .byte    2, 4, 0, 0, 0, 0, 0, 0
   .global  At
At:
   .quad    Nil
   .byte    2, 4, 4, 0, 0, 0, 0, 0
   .global  At2
At2:
   .quad    Nil
   .byte    2, 4, 4, 4, 0, 0, 0, 0
   .global  At3
At3:
   .quad    Nil
   .byte    66, 133, 150, 54, 7, 0, 0, 0
   .global  This
This:
   .quad    Nil
   .byte    162, 66, 36, 118, 6, 0, 0, 0
   .global  Dbg
Dbg:
   .quad    Nil
   .byte    162, 162, 21, 6, 7, 0, 0, 0
   .global  Zap
Zap:
   .quad    Nil
   .byte    162, 82, 132, 71, 7, 0, 0, 0
   .global  Ext
Ext:
   .quad    Nil
   .byte    162, 50, 53, 198, 6, 0, 0, 0
   .global  Scl
Scl:
   .quad    Nil
   .byte    162, 50, 196, 22, 54, 55, 7, 0
   .global  Class
Class:
   .quad    Nil
   .byte    162, 34, 85, 231, 6, 0, 0, 0
   .global  Run
Run:
   .quad    Nil
   .byte    162, 130, 84, 7, 7, 0, 0, 0
   .global  Hup
Hup:
   .quad    Nil
   .byte    162, 50, 149, 118, 22, 3, 0, 0
   .global  Sig1
Sig1:
   .quad    Nil
   .byte    162, 50, 149, 118, 38, 3, 0, 0
   .global  Sig2
Sig2:
   .quad    Nil
   .byte    226, 5, 0, 0, 0, 0, 0, 0
   .global  Up
Up:
   .quad    Nil
   .byte    162, 82, 36, 39, 7, 0, 0, 0
   .global  Err
Err:
   .quad    Nil
   .byte    162, 210, 52, 119, 6, 0, 0, 0
   .global  Msg
Msg:
   .quad    Nil
   .byte    162, 82, 229, 150, 6, 0, 0, 0
   .global  Uni
Uni:
   .quad    Nil
   .byte    162, 194, 84, 70, 6, 0, 0, 0
   .global  Led
Led:
   .quad    Nil
   .byte    162, 66, 53, 215, 6, 0, 0, 0
   .global  Tsm
Tsm:
   .quad    Nil
   .byte    162, 18, 68, 38, 7, 0, 0, 0
   .global  Adr
Adr:
   .quad    Nil
   .byte    162, 98, 244, 38, 183, 6, 0, 0
   .global  Fork
Fork:
   .quad    Nil
   .byte    162, 34, 148, 87, 6, 0, 0, 0
   .global  Bye
Bye:
   .quad    Nil
   .byte    34, 23, 118, 7, 0, 0, 0, 0
   .quad    doRaw
   .byte    18, 198, 22, 38, 215, 6, 0, 0
   .quad    doAlarm
   .byte    2, 39, 247, 70, 87, 54, 70, 7
   .quad    doProtect
   .byte    130, 86, 22, 6, 7, 0, 0, 0
   .quad    doHeap
   .byte    82, 230, 102, 7, 0, 0, 0, 0
   .quad    doEnv
   .byte    82, 7, 7, 0, 0, 0, 0, 0
   .quad    doUp
   .byte    18, 87, 151, 70, 7, 0, 0, 0
   .quad    doQuit
   .byte    82, 38, 39, 231, 246, 6, 0, 0
   .quad    doErrno
   .byte    226, 22, 70, 151, 102, 87, 6, 0
   .quad    doNative
   .byte    18, 38, 119, 54, 7, 0, 0, 0
   .quad    doArgs
   .byte    226, 86, 134, 71, 7, 0, 0, 0
   .quad    doNext
   .byte    18, 38, 119, 6, 0, 0, 0, 0
   .quad    doArg
   .byte    34, 87, 54, 71, 7, 0, 0, 0
   .quad    doRest
   .byte    66, 22, 70, 87, 6, 0, 0, 0
   .quad    doDate
   .byte    66, 151, 214, 86, 6, 0, 0, 0
   .quad    doTime
   .byte    82, 55, 87, 54, 6, 0, 0, 0
   .quad    doUsec
   .byte    2, 119, 71, 6, 0, 0, 0, 0
   .quad    doPwd
   .byte    50, 70, 6, 0, 0, 0, 0, 0
   .quad    doCd
   .byte    50, 70, 71, 151, 7, 0, 0, 0
   .quad    doCtty
   .byte    146, 230, 102, 246, 6, 0, 0, 0
   .quad    doInfo
   .byte    98, 150, 198, 86, 6, 0, 0, 0
   .quad    doFile
   .byte    66, 150, 38, 7, 0, 0, 0, 0
   .quad    doDir
   .byte    50, 214, 70, 6, 0, 0, 0, 0
   .quad    doCmd
   .byte    18, 38, 119, 102, 7, 0, 0, 0
   .quad    doArgv
   .byte    242, 6, 71, 7, 0, 0, 0, 0
   .quad    doOpt
   .byte    114, 54, 6, 0, 0, 0, 0, 0
   .quad    doGc
   .byte    18, 6, 7, 199, 150, 7, 0, 0
   .quad    doApply
   .byte    2, 23, 54, 55, 7, 0, 0, 0
   .quad    doPass
   .byte    210, 22, 6, 55, 7, 0, 0, 0
   .quad    doMaps
   .byte    210, 22, 6, 7, 0, 0, 0, 0
   .quad    doMap
   .byte    210, 22, 6, 55, 6, 0, 0, 0
   .quad    doMapc
   .byte    210, 22, 6, 199, 150, 54, 71, 7
   .quad    doMaplist
   .byte    210, 22, 6, 55, 22, 38, 7, 0
   .quad    doMapcar
   .byte    210, 22, 6, 55, 246, 230, 6, 0
   .quad    doMapcon
   .byte    210, 22, 6, 55, 22, 230, 6, 0
   .quad    doMapcan
   .byte    98, 150, 198, 70, 87, 38, 7, 0
   .quad    doFilter
   .byte    82, 134, 71, 39, 23, 54, 70, 7
   .quad    doExtract
   .byte    50, 87, 86, 182, 6, 0, 0, 0
   .quad    doSeek
   .byte    98, 150, 230, 70, 6, 0, 0, 0
   .quad    doFind
   .byte    2, 151, 54, 182, 6, 0, 0, 0
   .quad    doPick
   .byte    50, 230, 70, 7, 0, 0, 0, 0
   .quad    doCnt
   .byte    50, 87, 215, 6, 0, 0, 0, 0
   .quad    doSum
   .byte    210, 22, 134, 151, 6, 0, 0, 0
   .quad    doMaxi
   .byte    210, 150, 230, 150, 6, 0, 0, 0
   .quad    doMini
   .byte    98, 150, 54, 135, 6, 0, 0, 0
   .quad    doFish
   .byte    34, 150, 7, 0, 0, 0, 0, 0
   .quad    doBy
   .byte    18, 54, 7, 0, 0, 0, 0, 0
   .quad    doAs
   .byte    2, 151, 70, 6, 0, 0, 0, 0
   .quad    doPid
   .byte    194, 150, 70, 7, 0, 0, 0, 0
   .quad    doLit
   .byte    82, 102, 23, 198, 6, 0, 0, 0
   .quad    doEval
   .byte    34, 87, 231, 6, 0, 0, 0, 0
   .quad    doRun
   .byte    66, 86, 102, 6, 0, 0, 0, 0
   .quad    doDef
   .byte    66, 86, 6, 0, 0, 0, 0, 0
   .quad    doDe
   .byte    66, 214, 6, 0, 0, 0, 0, 0
   .quad    doDm
   .byte    34, 246, 134, 7, 0, 0, 0, 0
   .quad    doBox
   .byte    226, 86, 118, 7, 0, 0, 0, 0
   .quad    doNew
   .byte    66, 151, 7, 87, 6, 0, 0, 0
   .quad    doType
   .byte    146, 54, 23, 6, 0, 0, 0, 0
   .quad    doIsa
   .byte    210, 86, 70, 135, 246, 70, 6, 0
   .quad    doMethod
   .byte    50, 87, 230, 70, 6, 0, 0, 0
   .quad    doSend
   .byte    66, 39, 151, 7, 0, 0, 0, 0
   .quad    doTry
   .byte    50, 87, 7, 87, 38, 7, 0, 0
   .quad    doSuper
   .byte    82, 134, 71, 39, 23, 6, 0, 0
   .quad    doExtra
   .byte    114, 151, 70, 135, 6, 0, 0, 0
   .quad    doWith
   .byte    34, 150, 230, 70, 6, 0, 0, 0
   .quad    doBind
   .byte    162, 246, 38, 6, 0, 0, 0, 0
   .quad    doJob
   .byte    194, 86, 70, 7, 0, 0, 0, 0
   .quad    doLet
   .byte    194, 86, 70, 247, 3, 0, 0, 0
   .quad    doLetQ
   .byte    82, 55, 87, 6, 0, 0, 0, 0
   .quad    doUse
   .byte    18, 230, 70, 6, 0, 0, 0, 0
   .quad    doAnd
   .byte    242, 38, 7, 0, 0, 0, 0, 0
   .quad    doOr
   .byte    226, 22, 230, 70, 6, 0, 0, 0
   .quad    doNand
   .byte    226, 246, 38, 7, 0, 0, 0, 0
   .quad    doNor
   .byte    130, 247, 38, 7, 0, 0, 0, 0
   .quad    doXor
   .byte    34, 246, 246, 198, 6, 0, 0, 0
   .quad    doBool
   .byte    226, 246, 70, 7, 0, 0, 0, 0
   .quad    doNot
   .byte    226, 150, 198, 6, 0, 0, 0, 0
   .quad    doNil
   .byte    66, 7, 0, 0, 0, 0, 0, 0
   .quad    doT
   .byte    2, 39, 247, 118, 6, 0, 0, 0
   .quad    doProg
   .byte    2, 39, 247, 118, 22, 3, 0, 0
   .quad    doProg1
   .byte    2, 39, 247, 118, 38, 3, 0, 0
   .quad    doProg2
   .byte    146, 102, 6, 0, 0, 0, 0, 0
   .quad    doIf
   .byte    146, 102, 38, 3, 0, 0, 0, 0
   .quad    doIf2
   .byte    146, 102, 230, 6, 0, 0, 0, 0
   .quad    doIfn
   .byte    114, 135, 86, 230, 6, 0, 0, 0
   .quad    doWhen
   .byte    82, 231, 198, 86, 54, 55, 7, 0
   .quad    doUnless
   .byte    50, 246, 230, 70, 6, 0, 0, 0
   .quad    doCond
   .byte    226, 246, 230, 70, 6, 0, 0, 0
   .quad    doNond
   .byte    50, 22, 54, 87, 6, 0, 0, 0
   .quad    doCase
   .byte    50, 71, 23, 70, 87, 6, 0, 0
   .quad    doState
   .byte    114, 135, 150, 198, 86, 6, 0, 0
   .quad    doWhile
   .byte    82, 231, 70, 151, 198, 6, 0, 0
   .quad    doUntil
   .byte    18, 70, 7, 0, 0, 0, 0, 0
   .quad    doAt
   .byte    66, 246, 6, 0, 0, 0, 0, 0
   .quad    doDo
   .byte    194, 246, 246, 6, 7, 0, 0, 0
   .quad    doLoop
   .byte    98, 246, 38, 7, 0, 0, 0, 0
   .quad    doFor
   .byte    50, 22, 70, 55, 134, 6, 0, 0
   .quad    doCatch
   .byte    66, 135, 38, 247, 118, 7, 0, 0
   .quad    doThrow
   .byte    98, 150, 230, 22, 198, 198, 150, 7
   .quad    doFinally
   .byte    18, 2, 0, 0, 0, 0, 0, 0
   .quad    doBreak
   .byte    82, 6, 0, 0, 0, 0, 0, 0
   .quad    doE
   .byte    66, 2, 0, 0, 0, 0, 0, 0
   .quad    doTrace
   .byte    50, 151, 55, 7, 0, 0, 0, 0
   .quad    doSys
   .byte    50, 22, 198, 198, 6, 0, 0, 0
   .quad    doCall
   .byte    66, 151, 54, 182, 6, 0, 0, 0
   .quad    doTick
   .byte    146, 6, 151, 70, 6, 0, 0, 0
   .quad    doIpid
   .byte    242, 6, 151, 70, 6, 0, 0, 0
   .quad    doOpid
   .byte    178, 150, 198, 198, 6, 0, 0, 0
   .quad    doKill
   .byte    98, 246, 38, 183, 6, 0, 0, 0
   .quad    doFork
   .byte    34, 150, 87, 6, 0, 0, 0, 0
   .quad    doBye
   .byte    226, 22, 214, 86, 6, 0, 0, 0
   .quad    doName
   .byte    50, 7, 247, 3, 0, 0, 0, 0
   .quad    doSpQ
   .byte    2, 23, 70, 247, 3, 0, 0, 0
   .quad    doPatQ
   .byte    98, 86, 231, 246, 3, 0, 0, 0
   .quad    doFunQ
   .byte    114, 86, 70, 71, 6, 0, 0, 0
   .quad    doGetd
   .byte    18, 198, 198, 6, 0, 0, 0, 0
   .quad    doAll
   .byte    146, 230, 70, 87, 38, 231, 6, 0
   .quad    doIntern
   .byte    82, 134, 71, 87, 38, 231, 6, 0
   .quad    doExtern
   .byte    210, 211, 211, 211, 3, 0, 0, 0
   .quad    doHide
   .byte    34, 246, 134, 247, 3, 0, 0, 0
   .quad    doBoxQ
   .byte    50, 71, 39, 247, 3, 0, 0, 0
   .quad    doStrQ
   .byte    82, 134, 71, 247, 3, 0, 0, 0
   .quad    doExtQ
   .byte    66, 247, 86, 55, 134, 6, 0, 0
   .quad    doTouch
   .byte    162, 23, 6, 7, 0, 0, 0, 0
   .quad    doZap
   .byte    50, 134, 246, 6, 7, 0, 0, 0
   .quad    doChop
   .byte    2, 23, 54, 182, 6, 0, 0, 0
   .quad    doPack
   .byte    114, 198, 86, 87, 6, 0, 0, 0
   .quad    doGlue
   .byte    66, 87, 134, 71, 7, 0, 0, 0
   .quad    doText
   .byte    2, 39, 87, 246, 3, 0, 0, 0
   .quad    doPreQ
   .byte    50, 87, 39, 246, 3, 0, 0, 0
   .quad    doSubQ
   .byte    98, 23, 198, 6, 0, 0, 0, 0
   .quad    doVal
   .byte    50, 87, 70, 7, 0, 0, 0, 0
   .quad    doSet
   .byte    50, 87, 70, 23, 7, 0, 0, 0
   .quad    doSetq
   .byte    130, 55, 134, 118, 6, 0, 0, 0
   .quad    doXchg
   .byte    242, 230, 6, 0, 0, 0, 0, 0
   .quad    doOn
   .byte    242, 102, 102, 6, 0, 0, 0, 0
   .quad    doOff
   .byte    242, 230, 246, 100, 102, 6, 0, 0
   .quad    doOnOff
   .byte    162, 87, 38, 247, 6, 0, 0, 0
   .quad    doZero
   .byte    242, 230, 86, 6, 0, 0, 0, 0
   .quad    doOne
   .byte    66, 86, 102, 22, 86, 199, 70, 7
   .quad    doDefault
   .byte    2, 87, 55, 135, 6, 0, 0, 0
   .quad    doPush
   .byte    2, 87, 55, 135, 22, 3, 0, 0
   .quad    doPush1
   .byte    2, 247, 6, 7, 0, 0, 0, 0
   .quad    doPop
   .byte    50, 86, 71, 7, 0, 0, 0, 0
   .quad    doCut
   .byte    66, 86, 198, 6, 0, 0, 0, 0
   .quad    doDel
   .byte    18, 87, 87, 86, 87, 6, 0, 0
   .quad    doQueue
   .byte    98, 150, 102, 246, 6, 0, 0, 0
   .quad    doFifo
   .byte    146, 70, 134, 7, 0, 0, 0, 0
   .quad    doIdx
   .byte    194, 86, 7, 7, 0, 0, 0, 0
   .quad    doLup
   .byte    2, 87, 71, 7, 0, 0, 0, 0
   .quad    doPut
   .byte    114, 86, 70, 7, 0, 0, 0, 0
   .quad    doGet
   .byte    2, 39, 247, 6, 7, 0, 0, 0
   .quad    doProp
   .byte    178, 3, 0, 0, 0, 0, 0, 0
   .quad    doSemicol
   .byte    210, 163, 3, 0, 0, 0, 0, 0
   .quad    doSetCol
   .byte    162, 3, 0, 0, 0, 0, 0, 0
   .quad    doCol
   .byte    162, 163, 3, 0, 0, 0, 0, 0
   .quad    doPropCol
   .byte    2, 87, 71, 199, 6, 0, 0, 0
   .quad    doPutl
   .byte    114, 86, 70, 199, 6, 0, 0, 0
   .quad    doGetl
   .byte    114, 151, 6, 87, 6, 0, 0, 0
   .quad    doWipe
   .byte    210, 86, 70, 23, 6, 0, 0, 0
   .quad    doMeta
   .byte    194, 246, 118, 247, 3, 0, 0, 0
   .quad    doLowQ
   .byte    82, 7, 7, 247, 3, 0, 0, 0
   .quad    doUppQ
   .byte    194, 246, 118, 55, 6, 0, 0, 0
   .quad    doLowc
   .byte    82, 7, 7, 55, 6, 0, 0, 0
   .quad    doUppc
   .byte    98, 246, 198, 70, 6, 0, 0, 0
   .quad    doFold
   .byte    50, 22, 38, 7, 0, 0, 0, 0
   .quad    doCar
   .byte    50, 70, 38, 7, 0, 0, 0, 0
   .quad    doCdr
   .byte    50, 22, 22, 38, 7, 0, 0, 0
   .quad    doCaar
   .byte    50, 22, 70, 38, 7, 0, 0, 0
   .quad    doCadr
   .byte    50, 70, 22, 38, 7, 0, 0, 0
   .quad    doCdar
   .byte    50, 70, 70, 38, 7, 0, 0, 0
   .quad    doCddr
   .byte    50, 22, 22, 22, 38, 7, 0, 0
   .quad    doCaaar
   .byte    50, 22, 22, 70, 38, 7, 0, 0
   .quad    doCaadr
   .byte    50, 22, 70, 22, 38, 7, 0, 0
   .quad    doCadar
   .byte    50, 22, 70, 70, 38, 7, 0, 0
   .quad    doCaddr
   .byte    50, 70, 22, 22, 38, 7, 0, 0
   .quad    doCdaar
   .byte    50, 70, 22, 70, 38, 7, 0, 0
   .quad    doCdadr
   .byte    50, 70, 70, 22, 38, 7, 0, 0
   .quad    doCddar
   .byte    50, 70, 70, 70, 38, 7, 0, 0
   .quad    doCdddr
   .byte    50, 22, 22, 22, 22, 38, 7, 0
   .quad    doCaaaar
   .byte    50, 22, 22, 22, 70, 38, 7, 0
   .quad    doCaaadr
   .byte    50, 22, 22, 70, 22, 38, 7, 0
   .quad    doCaadar
   .byte    50, 22, 22, 70, 70, 38, 7, 0
   .quad    doCaaddr
   .byte    50, 22, 70, 22, 22, 38, 7, 0
   .quad    doCadaar
   .byte    50, 22, 70, 22, 70, 38, 7, 0
   .quad    doCadadr
   .byte    50, 22, 70, 70, 22, 38, 7, 0
   .quad    doCaddar
   .byte    50, 22, 70, 70, 70, 38, 7, 0
   .quad    doCadddr
   .byte    50, 70, 22, 22, 22, 38, 7, 0
   .quad    doCdaaar
   .byte    50, 70, 22, 22, 70, 38, 7, 0
   .quad    doCdaadr
   .byte    50, 70, 22, 70, 22, 38, 7, 0
   .quad    doCdadar
   .byte    50, 70, 22, 70, 70, 38, 7, 0
   .quad    doCdaddr
   .byte    50, 70, 70, 22, 22, 38, 7, 0
   .quad    doCddaar
   .byte    50, 70, 70, 22, 70, 38, 7, 0
   .quad    doCddadr
   .byte    50, 70, 70, 70, 22, 38, 7, 0
   .quad    doCdddar
   .byte    50, 70, 70, 70, 70, 38, 7, 0
   .quad    doCddddr
   .byte    226, 70, 135, 6, 0, 0, 0, 0
   .quad    doNth
   .byte    50, 246, 230, 6, 0, 0, 0, 0
   .quad    doCon
   .byte    50, 246, 230, 54, 7, 0, 0, 0
   .quad    doCons
   .byte    50, 246, 230, 54, 6, 0, 0, 0
   .quad    doConc
   .byte    50, 150, 38, 55, 6, 0, 0, 0
   .quad    doCirc
   .byte    34, 247, 70, 7, 0, 0, 0, 0
   .quad    doRot
   .byte    194, 150, 54, 71, 7, 0, 0, 0
   .quad    doList
   .byte    226, 86, 86, 70, 6, 0, 0, 0
   .quad    doNeed
   .byte    34, 23, 230, 118, 86, 6, 0, 0
   .quad    doRange
   .byte    98, 86, 199, 198, 6, 0, 0, 0
   .quad    doFull
   .byte    210, 22, 182, 86, 6, 0, 0, 0
   .quad    doMake
   .byte    210, 22, 70, 86, 6, 0, 0, 0
   .quad    doMade
   .byte    50, 134, 22, 150, 230, 6, 0, 0
   .quad    doChain
   .byte    194, 150, 230, 182, 6, 0, 0, 0
   .quad    doLink
   .byte    146, 247, 182, 86, 6, 0, 0, 0
   .quad    doYoke
   .byte    50, 246, 6, 151, 7, 0, 0, 0
   .quad    doCopy
   .byte    210, 150, 134, 7, 0, 0, 0, 0
   .quad    doMix
   .byte    18, 6, 7, 87, 230, 70, 6, 0
   .quad    doAppend
   .byte    66, 86, 198, 86, 70, 87, 6, 0
   .quad    doDelete
   .byte    66, 86, 198, 22, 7, 0, 0, 0
   .quad    doDelq
   .byte    34, 87, 6, 199, 22, 54, 86, 6
   .quad    doReplace
   .byte    50, 71, 39, 151, 6, 7, 0, 0
   .quad    doStrip
   .byte    50, 7, 199, 150, 70, 7, 0, 0
   .quad    doSplit
   .byte    34, 87, 102, 87, 38, 55, 87, 6
   .quad    doReverse
   .byte    98, 198, 150, 6, 7, 0, 0, 0
   .quad    doFlip
   .byte    66, 39, 151, 214, 6, 0, 0, 0
   .quad    doTrim
   .byte    50, 198, 150, 6, 7, 0, 0, 0
   .quad    doClip
   .byte    130, 86, 22, 70, 6, 0, 0, 0
   .quad    doHead
   .byte    66, 23, 150, 198, 6, 0, 0, 0
   .quad    doTail
   .byte    50, 71, 87, 214, 6, 0, 0, 0
   .quad    doStem
   .byte    98, 150, 230, 6, 0, 0, 0, 0
   .quad    doFin
   .byte    194, 22, 54, 71, 7, 0, 0, 0
   .quad    doLast
   .byte    210, 211, 3, 0, 0, 0, 0, 0
   .quad    doEq
   .byte    226, 214, 211, 3, 0, 0, 0, 0
   .quad    doNEq
   .byte    210, 3, 0, 0, 0, 0, 0, 0
   .quad    doEqual
   .byte    194, 227, 3, 0, 0, 0, 0, 0
   .quad    doNEqual
   .byte    210, 3, 3, 0, 0, 0, 0, 0
   .quad    doEq0
   .byte    210, 67, 5, 0, 0, 0, 0, 0
   .quad    doEqT
   .byte    226, 6, 3, 0, 0, 0, 0, 0
   .quad    doNEq0
   .byte    226, 70, 5, 0, 0, 0, 0, 0
   .quad    doNEqT
   .byte    194, 3, 0, 0, 0, 0, 0, 0
   .quad    doLt
   .byte    194, 211, 3, 0, 0, 0, 0, 0
   .quad    doLe
   .byte    226, 3, 0, 0, 0, 0, 0, 0
   .quad    doGt
   .byte    226, 211, 3, 0, 0, 0, 0, 0
   .quad    doGe
   .byte    210, 22, 134, 7, 0, 0, 0, 0
   .quad    doMax
   .byte    210, 150, 230, 6, 0, 0, 0, 0
   .quad    doMin
   .byte    18, 70, 247, 214, 6, 0, 0, 0
   .quad    doAtom
   .byte    2, 23, 150, 38, 7, 0, 0, 0
   .quad    doPair
   .byte    194, 54, 71, 247, 3, 0, 0, 0
   .quad    doLstQ
   .byte    226, 86, 215, 246, 3, 0, 0, 0
   .quad    doNumQ
   .byte    50, 151, 215, 246, 3, 0, 0, 0
   .quad    doSymQ
   .byte    98, 198, 118, 246, 3, 0, 0, 0
   .quad    doFlgQ
   .byte    210, 86, 214, 38, 86, 38, 7, 0
   .quad    doMember
   .byte    210, 86, 214, 22, 7, 0, 0, 0
   .quad    doMemq
   .byte    210, 214, 86, 22, 7, 0, 0, 0
   .quad    doMmeq
   .byte    50, 87, 54, 70, 7, 0, 0, 0
   .quad    doSect
   .byte    66, 150, 102, 102, 6, 0, 0, 0
   .quad    doDiff
   .byte    146, 230, 70, 86, 134, 7, 0, 0
   .quad    doIndex
   .byte    242, 102, 102, 54, 87, 70, 7, 0
   .quad    doOffset
   .byte    194, 86, 230, 118, 70, 135, 6, 0
   .quad    doLength
   .byte    50, 151, 166, 87, 6, 0, 0, 0
   .quad    doSize
   .byte    18, 54, 55, 247, 54, 6, 0, 0
   .quad    doAssoc
   .byte    18, 54, 247, 22, 7, 0, 0, 0
   .quad    doAsoq
   .byte    34, 23, 230, 182, 6, 0, 0, 0
   .quad    doRank
   .byte    210, 22, 70, 55, 134, 6, 0, 0
   .quad    doMatch
   .byte    98, 150, 198, 198, 6, 0, 0, 0
   .quad    doFill
   .byte    2, 39, 247, 102, 87, 6, 0, 0
   .quad    doProve
   .byte    210, 226, 3, 0, 0, 0, 0, 0
   .quad    doArrow
   .byte    82, 231, 150, 102, 150, 7, 0, 0
   .quad    doUnify
   .byte    50, 247, 38, 71, 7, 0, 0, 0
   .quad    doSort
   .byte    98, 246, 38, 215, 22, 70, 7, 0
   .quad    doFormat
   .byte    178, 2, 0, 0, 0, 0, 0, 0
   .quad    doAdd
   .byte    210, 2, 0, 0, 0, 0, 0, 0
   .quad    doSub
   .byte    146, 230, 54, 6, 0, 0, 0, 0
   .quad    doInc
   .byte    66, 86, 54, 6, 0, 0, 0, 0
   .quad    doDec
   .byte    162, 2, 0, 0, 0, 0, 0, 0
   .quad    doMul
   .byte    162, 242, 2, 0, 0, 0, 0, 0
   .quad    doMulDiv
   .byte    242, 2, 0, 0, 0, 0, 0, 0
   .quad    doDiv
   .byte    82, 2, 0, 0, 0, 0, 0, 0
   .quad    doRem
   .byte    226, 227, 3, 0, 0, 0, 0, 0
   .quad    doShift
   .byte    194, 70, 7, 3, 0, 0, 0, 0
   .quad    doLt0
   .byte    114, 86, 6, 3, 0, 0, 0, 0
   .quad    doGe0
   .byte    114, 70, 7, 3, 0, 0, 0, 0
   .quad    doGt0
   .byte    18, 38, 54, 7, 0, 0, 0, 0
   .quad    doAbs
   .byte    34, 150, 70, 247, 3, 0, 0, 0
   .quad    doBitQ
   .byte    98, 2, 0, 0, 0, 0, 0, 0
   .quad    doBitAnd
   .byte    194, 7, 0, 0, 0, 0, 0, 0
   .quad    doBitOr
   .byte    130, 199, 7, 0, 0, 0, 0, 0
   .quad    doBitXor
   .byte    50, 87, 86, 70, 6, 0, 0, 0
   .quad    doSeed
   .byte    34, 23, 230, 70, 6, 0, 0, 0
   .quad    doRand
   .byte    2, 23, 70, 135, 6, 0, 0, 0
   .quad    doPath
   .byte    34, 87, 22, 70, 6, 0, 0, 0
   .quad    doRead
   .byte    114, 23, 150, 70, 7, 0, 0, 0
   .quad    doWait
   .byte    50, 151, 231, 54, 6, 0, 0, 0
   .quad    doSync
   .byte    130, 86, 22, 38, 7, 0, 0, 0
   .quad    doHear
   .byte    66, 87, 198, 198, 6, 0, 0, 0
   .quad    doTell
   .byte    2, 247, 198, 198, 6, 0, 0, 0
   .quad    doPoll
   .byte    178, 86, 150, 7, 0, 0, 0, 0
   .quad    doKey
   .byte    2, 87, 86, 182, 6, 0, 0, 0
   .quad    doPeek
   .byte    50, 134, 22, 38, 7, 0, 0, 0
   .quad    doChar
   .byte    50, 183, 150, 6, 7, 0, 0, 0
   .quad    doSkip
   .byte    82, 246, 198, 6, 0, 0, 0, 0
   .quad    doEol
   .byte    82, 246, 102, 6, 0, 0, 0, 0
   .quad    doEof
   .byte    98, 38, 247, 214, 6, 0, 0, 0
   .quad    doFrom
   .byte    66, 151, 198, 198, 6, 0, 0, 0
   .quad    doTill
   .byte    194, 150, 230, 86, 6, 0, 0, 0
   .quad    doLine
   .byte    194, 150, 230, 86, 54, 7, 0, 0
   .quad    doLines
   .byte    18, 230, 150, 7, 0, 0, 0, 0
   .quad    doAny
   .byte    50, 151, 215, 6, 0, 0, 0, 0
   .quad    doSym
   .byte    50, 71, 39, 7, 0, 0, 0, 0
   .quad    doStr
   .byte    194, 246, 22, 70, 6, 0, 0, 0
   .quad    doLoad
   .byte    146, 230, 6, 0, 0, 0, 0, 0
   .quad    doIn
   .byte    242, 86, 71, 7, 0, 0, 0, 0
   .quad    doOut
   .byte    2, 151, 6, 87, 6, 0, 0, 0
   .quad    doPipe
   .byte    50, 70, 199, 6, 0, 0, 0, 0
   .quad    doCtl
   .byte    242, 6, 87, 230, 6, 0, 0, 0
   .quad    doOpen
   .byte    50, 198, 246, 54, 87, 6, 0, 0
   .quad    doClose
   .byte    82, 54, 134, 246, 6, 0, 0, 0
   .quad    doEcho
   .byte    2, 39, 151, 230, 6, 0, 0, 0
   .quad    doPrin
   .byte    2, 39, 151, 230, 198, 6, 0, 0
   .quad    doPrinl
   .byte    50, 7, 23, 54, 86, 6, 0, 0
   .quad    doSpace
   .byte    2, 39, 151, 230, 70, 7, 0, 0
   .quad    doPrint
   .byte    2, 39, 151, 230, 70, 55, 7, 7
   .quad    doPrintsp
   .byte    2, 39, 151, 230, 70, 199, 230, 6
   .quad    doPrintln
   .byte    98, 198, 86, 55, 135, 6, 0, 0
   .quad    doFlush
   .byte    34, 87, 118, 151, 230, 70, 6, 0
   .quad    doRewind
   .byte    82, 134, 71, 7, 0, 0, 0, 0
   .quad    doExt
   .byte    34, 71, 6, 0, 0, 0, 0, 0
   .quad    doRd
   .byte    2, 39, 7, 0, 0, 0, 0, 0
   .quad    doPr
   .byte    114, 39, 7, 0, 0, 0, 0, 0
   .quad    doWr
   .byte    34, 7, 55, 6, 0, 0, 0, 0
   .quad    doRpc
   .byte    2, 247, 246, 198, 6, 0, 0, 0
   .quad    doPool
   .byte    162, 246, 86, 39, 231, 22, 198, 6
   .quad    doJournal
   .byte    146, 70, 6, 0, 0, 0, 0, 0
   .quad    doId
   .byte    50, 87, 22, 7, 0, 0, 0, 0
   .quad    doSeq
   .byte    194, 150, 86, 86, 7, 0, 0, 0
   .quad    doLieu
   .byte    194, 246, 54, 182, 6, 0, 0, 0
   .quad    doLock
   .byte    50, 246, 214, 214, 150, 70, 7, 0
   .quad    doCommit
   .quad    .+20
   .quad    doRollback
   .byte    114, 111, 108, 108, 98, 97, 99, 107
   .byte    2, 0, 0, 0, 0, 0, 0, 0
   .byte    210, 22, 38, 183, 6, 0, 0, 0
   .quad    doMark
   .byte    98, 38, 87, 86, 6, 0, 0, 0
   .quad    doFree
   .byte    66, 38, 54, 182, 6, 0, 0, 0
   .quad    doDbck
   .byte    2, 247, 38, 71, 7, 0, 0, 0
   .quad    doPort
   .byte    18, 54, 54, 86, 6, 71, 7, 0
   .quad    doAccept
   .byte    194, 150, 54, 71, 87, 230, 6, 0
   .quad    doListen
   .byte    130, 246, 54, 71, 7, 0, 0, 0
   .quad    doHost
   .byte    50, 246, 230, 230, 86, 54, 70, 7
   .quad    doConnect
   .byte    82, 71, 6, 7, 0, 0, 0, 0
   .quad    doUdp
SymTabEnd:
   .byte    194, 148, 230, 86, 135, 7, 0, 0
   .global  TgOS
TgOS:
   .quad    TgOS
   .quad    26
Db1:
   .quad    Nil
   .global  Extern
Extern:
   .quad    Db1
   .quad    Nil
GcMarkEnd:
Env:
EnvBind:
   .quad    0
EnvInFrames:
   .quad    0
EnvOutFrames:
   .quad    0
EnvCtlFrames:
   .quad    0
EnvArgs:
   .quad    0
EnvNext:
   .quad    0
EnvApply:
   .quad    0
EnvMeth:
   .quad    0
EnvTask:
   .quad    Nil
EnvMake:
   .quad    0
EnvYoke:
   .quad    0
EnvParseX:
   .quad    0
EnvParseC:
   .quad    0
EnvParseEOF:
   .quad    -1
EnvSort:
   .quad    0
EnvProtect:
   .quad    0
EnvTrace:
   .quad    0
EnvBrk:
   .quad    0
   .balign  8
EnvEnd:
OrgTermio:
   .skip    64
Flock:
   .skip    32
Tms:
   .skip    32
Addr:
   .skip    16
TBuf:
   .byte    5
   .byte    84
   .global  _r_
_r_:
   .string  "r"
   .global  _w_
_w_:
   .string  "w"
   .global  _a_
_a_:
   .string  "a"
   .global  _ap_
_ap_:
   .string  "a+"
   .global  _dot_
_dot_:
   .string  "."
   .global  Signal
Signal:
   .byte    0
   .global  Tio
Tio:
   .byte    0
   .global  Flg
Flg:
   .byte    0
Jam:
   .byte    0
InBye:
   .byte    0
Sync:
   .byte    0
   .balign  2
CaseBlocks:
   .short   450, 450, 449, 300, 299, 416, 504, 732, 607, 750, 533, 838, 732, 806, 700, 534
   .short   351, 724, 886, 886, 886, 873, 65167, 836, 65413, 65381, 64949, 64929, 27, 708, 28, 71
   .short   65192, 65420, 565, 65279, 26, 65215, 38, 64288, 65064, 275, 260, 64353, 64346, 267, 265, 254
   .short   65288, 553, 606, 455, 508, 476, 64582, 553, 65063, 64341, 361, 64456, 252, 259, 64360, 64328
   .short   64296, 64264, 64232, 64200, 64168, 64136, 64104, 64072, 101, 80, 171, 313, 65038, 99, 341, 424
   .short   63081, 297, 296, 63775, 65110, 264, 263, 64192, 64654, 65197, 198, 64679, 64405, 62589, 159, 64279
   .short   65056, 64808, 64303, 59, 62393, 65111, 64718, 65467, 62265, 64152, 65419, 65339, 64084, 63459, 65323, 64215
   .short   64361, 64570, 65253, 62664, 64688, 64136, 64959, 62536, 65093, 64711, 65103, 63473, 63253, 62184, 64927, 62280
   .short   63850, 64514, 64919, 62152, 62120, 62649, 62643, 61291, 63594, 63562, 64600, 63498, 63466, 64527, 63402, 61084
   .short   64400, 63306, 63482, 63242, 63434, 63378, 62577, 62674, 63282, 63050, 62465, 63053, 61352, 62922, 62890, 60577
   .short   62825, 62794, 62762, 62730, 62698, 62666, 62634, 62602, 62570, 62538, 62506, 62474, 62442, 62410, 62378, 62346
   .short   62314, 62282, 62250, 62089, 63351, 62154, 62122, 63287, 60456, 60424, 60392, 60360, 61930, 62626, 62789, 60870
   .short   62167, 61770, 59629, 59422, 61674, 62871, 60008, 59976, 59944, 59912, 59880, 59848, 59816, 59784, 59752, 59720
   .short   59688, 59656, 59624, 59592, 59560, 59528, 59496, 59464, 59432, 59400, 59368, 59336, 59304, 59272, 59240, 59208
   .short   59176, 59144, 59112, 59080, 59048, 59016, 58984, 58952, 58920, 58888, 58856, 58824, 58792, 58760, 58728, 58696
   .short   58719, 58687, 58655, 58623, 61399, 58559, 58527, 58501, 61319, 61271, 61271, 61271, 61271, 61255, 57773, 61254
   .short   61254, 61254, 57824, 58333, 61190, 59865, 60395, 57924, 61140, 61285, 57845, 61253, 61161, 61308, 61044, 61296
   .short   61309, 61304, 61073, 61395, 61053, 60965, 60967, 61285, 61405, 61078, 61395, 61409, 61289, 57224, 57192, 57160
   .short   60715, 60733, 60697, 61212, 61192, 60743, 60733, 60723, 60459, 60427, 60395, 60363, 60366, 60028, 60265, 60268
   .short   59830, 60171, 60139, 59881, 56488, 56456, 56424, 56392, 59664, 59939, 60248, 60239, 60229, 60133, 56168, 56136
   .short   59691, 59659, 59627, 59595, 59563, 59531, 59499, 59467, 55848, 55816, 55784, 55752, 55720, 55688, 55656, 55624
   .short   55592, 55560, 55528, 55496, 55464, 55432, 55400, 55368, 55336, 55304, 55272, 55240, 55208, 55176, 55144, 55112
   .short   55080, 55048, 55016, 54984, 54952, 54920, 54888, 54856, 54824, 54792, 54760, 54728, 54696, 54664, 54632, 54600
   .short   54568, 54536, 54504, 54472, 58033, 57995, 57963, 57968, 57899, 57867, 57835, 57803, 57771, 57739, 57742, 56719
   .short   58280, 57299, 55593, 55562, 58184, 55497, 55466, 56535, 56498, 54913, 55338, 55306, 57960, 52958, 53608, 53576
   .short   57622, 57577, 57803, 57527, 57527, 57694, 57111, 57396, 57363, 57331, 57299, 56940, 57235, 57203, 57173, 57140
   .short   54634, 54602, 54570, 54538, 54506, 54474, 54442, 54410, 54378, 54346, 54314, 54282, 54250, 54218, 54186, 54154
   .short   54122, 54090, 54058, 54026, 53994, 53962, 53930, 53898, 53866, 53834, 53802, 53770, 53738, 53706, 53674, 53642
   .short   53610, 53578, 53546, 53514, 53482, 53450, 53418, 53386, 53354, 53322, 53290, 53258, 53226, 53194, 53162, 53130
   .short   53098, 53066, 53034, 53002, 52970, 52938, 52906, 52874, 52842, 52810, 52778, 52746, 52714, 52682, 52650, 52618
   .short   52586, 52554, 52522, 52490, 52458, 52426, 52394, 52362, 52330, 52298, 52266, 52234, 52202, 52170, 52138, 52106
   .short   52074, 52042, 52010, 51978, 51946, 51914, 51882, 51850, 51818, 51786, 51754, 51722, 51690, 51658, 51626, 51594
   .short   51562, 51530, 51498, 51466, 51434, 51402, 51370, 51338, 51306, 51274, 51242, 51210, 51178, 51146, 51114, 51082
   .short   51050, 51018, 50986, 50954, 50922, 50890, 50858, 50826, 50794, 50762, 50730, 50698, 50666, 50634, 50602, 50570
   .short   50538, 50506, 50474, 50442, 50410, 50378, 50346, 50314, 50282, 50250, 50218, 50186, 50154, 50122, 50090, 50058
   .short   50026, 49994, 49962, 49930, 49898, 49866, 49834, 49802, 49770, 49738, 49706, 49674, 49642, 49610, 49578, 49546
   .short   49514, 49482, 49450, 49418, 49386, 49354, 49322, 49290, 49258, 49226, 49194, 49162, 49130, 49098, 49066, 49034
   .short   49002, 48970, 48938, 48906, 48874, 48842, 48810, 48778, 48746, 48714, 48682, 48650, 48618, 48586, 48554, 48522
   .short   48490, 48458, 48426, 48394, 48362, 48330, 48298, 48266, 48234, 48202, 48170, 48138, 48106, 45792, 46440, 46408
   .short   47978, 47946, 47914, 47882, 47850, 47818, 47786, 47754, 47722, 47690, 47658, 47626, 47594, 47562, 47530, 47498
   .short   47466, 47434, 47402, 47370, 47338, 47306, 47274, 47242, 47210, 47178, 47146, 47114, 47082, 47050, 47018, 46986
   .short   46954, 46922, 46890, 46858, 46826, 46794, 46762, 46730, 46698, 46666, 46634, 46602, 46570, 46538, 46506, 46474
   .short   46442, 46410, 46378, 46346, 46314, 46282, 46250, 46218, 46186, 46154, 46122, 46090, 46058, 46026, 45994, 45962
   .short   45930, 45898, 45866, 45834, 45802, 45770, 45738, 45706, 45674, 45642, 45610, 45578, 45546, 45514, 45482, 45450
   .short   45418, 45386, 45354, 45322, 45290, 45258, 45226, 45194, 45162, 45130, 45098, 45066, 45034, 45002, 44970, 44938
   .short   44906, 44874, 44842, 44810, 44778, 44746, 44714, 44682, 44650, 44618, 44586, 44554, 44522, 44490, 44458, 44426
   .short   44394, 44362, 44330, 44298, 44266, 44234, 44202, 44170, 44138, 44106, 44074, 44042, 44010, 43978, 43946, 43914
   .short   43882, 43850, 43818, 43786, 43754, 43722, 43690, 43658, 43626, 43594, 43562, 43530, 43498, 43466, 43434, 43402
   .short   43370, 43338, 43306, 43274, 43242, 43210, 43178, 43146, 43114, 43082, 43050, 43018, 42986, 42954, 42922, 42890
   .short   42858, 42826, 42794, 42762, 42730, 42698, 42666, 42634, 42602, 42570, 42538, 42506, 42474, 42442, 42410, 42378
   .short   42346, 42314, 42282, 42250, 42218, 42186, 42154, 42122, 42090, 42058, 42026, 41994, 41962, 41930, 41898, 41866
   .short   41834, 41802, 41770, 41738, 41706, 41674, 41642, 41610, 41578, 41546, 41514, 41482, 41450, 41418, 41386, 41354
   .short   41322, 41290, 41258, 41226, 41194, 41162, 41130, 41098, 41066, 41034, 41002, 40970, 40938, 40906, 40874, 40842
   .short   40810, 40778, 40746, 40714, 40682, 40650, 40618, 40586, 40554, 40522, 40490, 40458, 40426, 40394, 40362, 40330
   .short   40298, 40266, 40234, 40202, 40170, 40138, 40106, 40074, 40042, 40010, 39978, 39946, 39914, 39882, 39850, 39818
   .short   39786, 39754, 39722, 39690, 39658, 39626, 39594, 39562, 39530, 39498, 39466, 39434, 39402, 39370, 39338, 39306
   .short   39274, 39242, 39210, 39178, 39146, 39114, 39082, 39050, 39018, 38986, 38954, 38922, 38890, 38858, 38826, 38794
   .short   38762, 38730, 38698, 38666, 38634, 38602, 38570, 38538, 38506, 38474, 38442, 38410, 38378, 38346, 38314, 38282
   .short   38250, 38218, 38186, 38154, 38122, 38090, 38058, 38026, 37994, 37962, 37930, 37898, 37866, 37834, 37802, 37770
   .short   37738, 37706, 37674, 37642, 37610, 37578, 37546, 37514, 37482, 37450, 37418, 37386, 37354, 37322, 37290, 37258
   .short   37226, 37194, 37162, 37130, 37098, 37066, 37034, 37002, 36970, 36938, 36906, 36874, 36842, 36810, 36778, 36746
   .short   36714, 36682, 36650, 36618, 36586, 36554, 36522, 36490, 36458, 36426, 36394, 36362, 36330, 36298, 36266, 36234
   .short   36202, 36170, 36138, 36106, 36074, 36042, 36010, 35978, 35946, 35914, 35882, 35850, 35818, 35786, 35754, 35722
   .short   35690, 35658, 35626, 35594, 35562, 35530, 35498, 35466, 35434, 35402, 35370, 35338, 35306, 35274, 35242, 35210
   .short   35178, 35146, 35114, 35082, 35050, 35018, 34986, 34954, 34922, 34890, 34858, 34826, 34794, 34762, 34730, 34698
   .short   34666, 34634, 34602, 34570, 34538, 34506, 34474, 34442, 34410, 34378, 34346, 34314, 34282, 34250, 34218, 34186
   .short   34154, 34122, 34090, 34058, 34026, 33994, 33962, 33930, 33898, 33866, 33834, 33802, 33770, 33738, 33706, 33674
   .short   33642, 33610, 33578, 33546, 33514, 33482, 33450, 33418, 33386, 33354, 33322, 33290, 33258, 33226, 33194, 33162
   .short   33130, 33098, 33066, 33034, 33002, 32970, 32938, 32906, 32874, 32842, 32810, 32778, 32746, 32714, 32682, 32650
   .short   32618, 32586, 32554, 32522, 32490, 32458, 32426, 32394, 32362, 32330, 32298, 32266, 32234, 32202, 32170, 32138
   .short   32106, 32074, 32042, 32010, 31978, 31946, 31914, 31882, 31850, 31818, 31786, 31754, 31722, 31690, 31658, 31626
   .short   31594, 31562, 31530, 31498, 31466, 31434, 31402, 31370, 31338, 31306, 31274, 31242, 31210, 31178, 31146, 31114
   .short   31082, 31050, 31018, 30986, 30954, 30922, 30890, 30858, 30826, 30794, 30762, 30730, 30698, 30666, 30634, 30602
   .short   30570, 30538, 30506, 30474, 30442, 30410, 30378, 30346, 30314, 30282, 30250, 30218, 30186, 30154, 30122, 30090
   .short   30058, 30026, 29994, 29962, 29930, 29898, 29866, 29834, 29802, 29770, 29738, 29706, 29674, 29642, 29610, 29578
   .short   29546, 29514, 29482, 29450, 29418, 29386, 29354, 29322, 29290, 29258, 29226, 29194, 29162, 29130, 29098, 29066
   .short   29034, 29002, 28970, 28938, 28906, 28874, 28842, 28810, 28778, 28746, 28714, 28682, 28650, 28618, 28586, 28554
   .short   28522, 28490, 28458, 28426, 28394, 28362, 28330, 28298, 28266, 28234, 28202, 28170, 28138, 28106, 28074, 28042
   .short   28010, 27978, 27946, 27914, 27882, 27850, 27818, 27786, 27754, 27722, 27690, 27658, 27626, 27594, 27562, 27530
   .short   27498, 27466, 27434, 27402, 27370, 27338, 27306, 27274, 27242, 27210, 27178, 27146, 27114, 24816, 25448, 25416
   .short   26986, 26954, 26922, 26890, 26858, 26826, 26794, 26762, 26730, 26698, 26666, 26634, 26602, 26570, 26538, 26506
   .short   26474, 26442, 26410, 26378, 26346, 26314, 26282, 26250, 26218, 26186, 26154, 26122, 26090, 26058, 26026, 25994
   .short   25962, 25930, 25898, 25866, 27430, 28129, 28316, 24136, 24104, 24072, 24040, 24008, 23976, 23944, 23912, 23880
   .short   23848, 23816, 23784, 23752, 23720, 23688, 23656, 23624, 23592, 23560, 23528, 23496, 23464, 23432, 23400, 23368
   .short   23336, 23304, 23272, 23240, 23208, 23176, 23144, 23112, 23080, 23048, 23016, 22984, 22952, 22920, 22888, 22856
   .short   22824, 22792, 22760, 22728, 22696, 22664, 22632, 22600, 22568, 22536, 22504, 22472, 22440, 22408, 22376, 22344
   .short   23914, 23882, 23850, 23818, 23786, 23754, 23722, 23690, 23658, 23626, 23594, 23562, 23530, 23498, 23466, 23434
   .short   23402, 23370, 23338, 23306, 23274, 23242, 23210, 23178, 23146, 23114, 23082, 23050, 23018, 22986, 22954, 22922
   .short   22890, 22858, 22826, 22794, 22762, 22730, 22698, 22666, 22634, 22602, 22570, 22538, 22506, 22474, 22442, 22410
   .short   22378, 22346, 22314, 22282, 22250, 22218, 22186, 22154, 22122, 22090, 22058, 22026, 21994, 21962, 21930, 21898
   .short   21866, 21834, 21802, 21770, 21738, 21706, 21674, 21642, 21610, 21578, 21546, 21514, 21482, 21450, 21418, 21386
   .short   21354, 21322, 21290, 21258, 21226, 21194, 21162, 21130, 21098, 21066, 21034, 21002, 20970, 20938, 20906, 20874
   .short   20842, 20810, 20778, 20746, 20714, 20682, 20650, 20618, 20586, 20554, 20522, 20490, 20458, 20426, 20394, 20362
   .short   20330, 20298, 20266, 20234, 20202, 20170, 20138, 20106, 20074, 20042, 20010, 19978, 19946, 19914, 19882, 19850
   .short   19818, 19786, 19754, 19722, 19690, 19658, 19626, 19594, 19562, 19530, 19498, 19466, 19434, 19402, 19370, 19338
   .short   19306, 19274, 19242, 19210, 19178, 19146, 19114, 19082, 19050, 19018, 18986, 18954, 18922, 18890, 18858, 18826
   .short   18794, 18762, 18730, 18698, 18666, 18634, 18602, 18570, 18538, 18506, 18474, 18442, 18410, 18378, 18346, 18314
   .short   18282, 18250, 18218, 18186, 18154, 18122, 18090, 18058, 18026, 17994, 17962, 17930, 17898, 17866, 17834, 17802
   .short   17770, 17738, 17706, 17674, 17642, 17610, 17578, 17546, 17514, 17482, 17450, 17418, 17386, 17354, 17322, 17290
   .short   17258, 17226, 17194, 17162, 17130, 17098, 17066, 17034, 17002, 16970, 16938, 16906, 16874, 16842, 16810, 16778
   .short   16746, 16714, 16682, 16650, 16618, 16586, 16554, 16522, 16490, 16458, 16426, 16394, 16362, 16330, 16298, 16266
   .short   16234, 16202, 16170, 16138, 16106, 16074, 16042, 16010, 15978, 15946, 15914, 15882, 15850, 15818, 15786, 15754
   .short   15722, 15690, 15658, 15626, 15594, 15562, 15530, 15498, 15466, 15434, 15402, 15370, 15338, 15306, 15274, 15242
   .short   15210, 15178, 15146, 15114, 15082, 15050, 15018, 14986, 14954, 14922, 14890, 14858, 14826, 14794, 14762, 14730
   .short   14698, 14666, 14634, 14602, 14570, 14538, 14506, 14474, 14442, 14410, 14378, 14346, 14314, 14282, 14250, 14218
   .short   14186, 14154, 14122, 14090, 14058, 14026, 13994, 13962, 13930, 13898, 13866, 13834, 13802, 13770, 13738, 13706
   .short   13674, 13642, 13610, 13578, 13546, 13514, 13482, 13450, 13418, 13386, 13354, 13322, 13290, 13258, 13226, 13194
   .short   13162, 13130, 13098, 13066, 13034, 13002, 12970, 12938, 12906, 12874, 12842, 12810, 12778, 10482, 11112, 11080
   .short   15403, 15371, 15339, 15307, 15275, 15243, 15211, 15179, 15147, 15115, 15083, 15051, 15019, 14987, 14955, 14923
   .short   14891, 14859, 14827, 14795, 14763, 14731, 14699, 14667, 14635, 14603, 14571, 14539, 14507, 14475, 14443, 14411
   .short   14379, 14347, 14315, 14283, 14251, 14219, 14187, 14155, 14123, 14091, 14059, 14027, 13995, 13963, 13931, 13899
   .short   13867, 13835, 13803, 13771, 13739, 13707, 13675, 13643, 13611, 13579, 13547, 13515, 13483, 13451, 13419, 13387
   .short   13387, 13355, 13323, 13291, 13259, 13227, 13195, 13163, 13131, 13099, 13067, 13035, 13003, 12971, 12939, 12907
   .short   12875, 12843, 12811, 12779, 12747, 12715, 12683, 12651, 12619, 12587, 12555, 12523, 12491, 12459, 12427, 12395
   .short   12363, 12331, 12299, 12267, 12235, 12203, 12171, 12139, 12107, 12075, 12043, 12011, 11979, 11947, 11915, 11883
   .short   11851, 11819, 11787, 11755, 11723, 11691, 11659, 11627, 11595, 11563, 11531, 11499, 11467, 11435, 11403, 11371
   .short   11339, 11307, 11275, 11243, 11211, 11179, 11147, 11115, 11083, 11051, 11019, 10987, 10955, 10923, 10891, 10859
   .short   10827, 10795, 10763, 10731, 10699, 10667, 10635, 10603, 10571, 10539, 10507, 10475, 10443, 10411, 10379, 10347
   .short   10315, 10283, 10251, 10219, 10187, 10155, 10123, 10091, 10059, 10027, 9995, 9963, 9931, 9899, 9867, 9835
   .short   9803, 9771, 9739, 9707, 9675, 9643, 9611, 9579, 9547, 9515, 9483, 9451, 9419, 9387, 9355, 9323
   .short   9291, 9259, 9227, 9195, 9163, 9131, 9099, 9067, 9035, 9003, 8971, 8939, 8907, 8875, 8843, 8811
   .short   8779, 8747, 8715, 8683, 8651, 8619, 8587, 8555, 8523, 8491, 8459, 8427, 8395, 8363, 8331, 8299
   .short   8267, 8235, 8203, 8171, 8139, 8107, 8075, 8043, 8011, 7979, 7947, 7915, 7883, 7851, 7819, 7787
   .short   7755, 7723, 7691, 7659, 7627, 7595, 7563, 7531, 7499, 7467, 7435, 7403, 7371, 7339, 7307, 7275
   .short   7243, 7211, 7179, 7147, 7115, 7083, 7051, 7019, 4202, 4170, 4138, 4106, 4074, 4042, 4010, 3978
   .short   3946, 1640, 2280, 2248, 2216, 2184, 2152, 2120, 2007, 6475, 1974, 3356, 3324, 3250, 3241, 3228
   .short   3196, 3164, 3132, 3100, 3068, 3036, 3004, 2972, 2940, 2910, 2860, 2844, 2744, 2780, 2716, 706
   .short   1320, 5739, 5735, 1023, 2556, 2524, 2492, 1625, 3000, 5543, 4038, 448, 433, 2507, 2092, 4741
CaseData:
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 16000, 16000, 12289, 12418, 16000, 16000, 16000, 16000, 16000, 16000
   .short   14981, 14981, 16000, 16000, 16000, 14981, 14981, 14981, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 16000, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 23432, 23432, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 20888, 16000, 16000, 16000, 16000, 17926, 16000, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 16000, 16000
   .short   16000, 16000, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994
   .short   20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994
   .short   20994, 11906, 16000, 20888, 10772, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 18054, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 6683, 6683, 16000, 16000, 16000, 16000, 17796, 16000, 16000, 16000, 664
   .short   16000, 664, 26133, 26262, 664, 6807, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   17796, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 17796
   .short   17796, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 17796
   .short   17796, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 11906
   .short   29314, 11906, 16000, 11906, 18690, 29825, 29825, 29825, 29825, 29571, 6683, 6683, 6683, 28034, 28034, 18690
   .short   18690, 16000, 16000, 11906, 18690, 28161, 28161, 29953, 29953, 16000, 6683, 6683, 6683, 6914, 7042, 7170
   .short   7298, 7426, 7554, 7682, 7810, 7938, 8066, 8194, 8322, 8450, 8578, 8706, 8834, 8962, 9090, 9218
   .short   9346, 9474, 9602, 9730, 9858, 9986, 10114, 1109, 3225, 1238, 3225, 15, 15, 15, 15, 15
   .short   271, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
   .short   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 143, 271, 143, 399, 271
   .short   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 271, 271
   .short   271, 143, 524, 664, 664, 792, 922, 792, 664, 664, 1109, 1238, 664, 1305, 1432, 1556
   .short   1432, 1688, 1801, 1929, 2057, 2185, 2313, 2441, 2569, 2697, 2825, 2953, 1432, 664, 3161, 3225
   .short   3161, 664, 3329, 3457, 3585, 3713, 3841, 3969, 4097, 4225, 4353, 4481, 4609, 4737, 4865, 4993
   .short   5121, 5249, 5377, 5505, 5633, 5761, 5889, 6017, 6145, 6273, 6401, 6529, 1109, 664, 1238, 6683
   .short   6807, 664, 664, 664, 3225, 1109, 1238, 16000, 664, 664, 664, 664, 664, 664, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   10284, 664, 922, 922, 922, 922, 10396, 10396, 6683, 10396, 10498, 10717, 3225, 10772, 10396, 6683
   .short   10908, 1305, 11019, 11147, 6683, 11266, 10396, 664, 6683, 11403, 10498, 11614, 11659, 11659, 11659, 664
   .short   664, 1305, 1556, 3225, 3225, 3225, 16000, 664, 922, 792, 664, 16000, 16000, 16000, 16000, 21509
   .short   21509, 21509, 16000, 21509, 16000, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 16000, 20508, 20508, 20353, 20353, 20353, 20353, 20353, 20353, 20353, 20353
   .short   20353, 20353, 20353, 20353, 20353, 20353, 20353, 20353, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777
   .short   11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 3225
   .short   11777, 11777, 11777, 11777, 11777, 11777, 11777, 11906, 11906, 11906, 18690, 18690, 11906, 11906, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 11906, 11906, 11906, 11906, 11906, 16000
   .short   16000, 16000, 16000, 16000, 21253, 17926, 21253, 21253, 16000, 21253, 21253, 16000, 21253, 21253, 21253, 21253
   .short   21253, 21253, 21253, 21253, 21253, 21253, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21400, 21509, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 20615, 20615, 17926, 20615, 20615, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 11659, 11659, 11659, 11659, 11659, 11659, 11659, 11659
   .short   11659, 11659, 11659, 11659, 33803, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 11906, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 16000
   .short   16000, 16000, 16000, 16000, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 17926
   .short   17926, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 6683
   .short   6683, 18177, 664, 18305, 18305, 18305, 16000, 18433, 16000, 18561, 18561, 18690, 11777, 11777, 11777, 11777
   .short   11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 12034, 12034, 12034, 12034
   .short   12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034
   .short   12034, 12034, 12034, 3225, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12162, 12034, 12034, 19074, 12034
   .short   12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 19202, 19330, 19330, 16000, 19458, 19586, 19713, 19713
   .short   19713, 19842, 19970, 10498, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 11906, 15233, 15363, 15490, 12289, 12418, 15745, 15873, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12545, 12674
   .short   12289, 12418, 12289, 12418, 12289, 12418, 10498, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 20098, 20226, 15618, 10498, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 23312, 23312, 23312, 23312, 23312, 23312, 32523, 16000, 16000
   .short   16000, 32651, 32779, 32907, 33035, 33163, 33291, 1305, 1305, 3225, 1109, 1238, 10498, 13057, 12289, 12418
   .short   12289, 12418, 13185, 12289, 12418, 13313, 13313, 12289, 12418, 10498, 13441, 13569, 13697, 12289, 12418, 13313
   .short   13825, 13954, 14081, 14209, 12289, 12418, 10498, 10498, 14081, 14337, 10498, 14465, 14981, 14981, 14981, 14981
   .short   15233, 15363, 15490, 15233, 15363, 15490, 15233, 15363, 15490, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 15618, 12289, 12418, 20508, 17926, 17926, 17926
   .short   17926, 16000, 20615, 20615, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12801, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12930, 12289, 12418, 12289, 12418, 12289, 12418, 14593, 12289, 12418, 14593
   .short   10498, 10498, 12289, 12418, 14593, 12289, 12418, 14721, 14721, 12289, 12418, 12289, 12418, 14849, 12289, 12418
   .short   10498, 14981, 12289, 12418, 10498, 15106, 19713, 12289, 12418, 12289, 12418, 16000, 16000, 12289, 12418, 16000
   .short   16000, 12289, 12418, 16000, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 1432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 21400, 16000, 16000, 16000, 21400, 21400, 21400, 21400, 21400, 21400, 21400, 21400, 21400
   .short   21400, 21400, 21400, 21400, 21400, 16000, 23312, 21509, 17926, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 16000, 16000, 23312, 19713, 19713, 19713, 19713, 19713, 19713, 19713
   .short   19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713
   .short   19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000
   .short   14981, 16000, 16000, 16000, 16000, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 10498, 10498, 10498, 16130, 16258, 10498, 16386, 16386, 10498, 16514
   .short   10498, 16642, 10498, 10498, 10498, 10498, 16386, 10498, 10498, 16770, 10498, 10498, 10498, 10498, 16898, 17026
   .short   10498, 10498, 10498, 10498, 10498, 17026, 10498, 10498, 17154, 10498, 10498, 17282, 10498, 10498, 10498, 10498
   .short   10498, 10498, 10498, 10498, 10498, 10498, 17410, 10498, 10498, 17410, 10498, 10498, 10498, 10498, 17410, 10498
   .short   17538, 17538, 10498, 10498, 10498, 10498, 10498, 10498, 17666, 10498, 10498, 10498, 10498, 10498, 10498, 10498
   .short   10498, 10498, 10498, 10498, 10498, 10498, 10498, 16000, 16000, 17796, 17796, 17796, 17796, 17796, 17796, 17796
   .short   17796, 17796, 6683, 6683, 17796, 17796, 17796, 17796, 17796, 6683, 6683, 6683, 6683, 6683, 6683, 6683
   .short   6683, 6683, 17796, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737
   .short   20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 16000, 16000, 17796, 20888, 20888
   .short   20888, 20888, 20888, 20888, 11777, 11777, 16000, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777
   .short   18818, 18946, 18946, 18946, 18690, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034
   .short   12034, 12034, 12034, 12034, 12034, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226
   .short   20226, 20226, 20226, 20226, 20226, 17926, 17926, 17926, 17926, 17926, 20888, 17926, 17926, 14981, 14981, 14981
   .short   14981, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 16000, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 16000, 17926, 17926, 17926, 21144, 17926, 17926, 21144, 17926, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 21253, 21253, 21253, 21253, 21253, 21253, 21253
   .short   21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 16000, 16000, 16000, 16000, 16000, 21253, 21253
   .short   21253, 21144, 21144, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23689, 23817
   .short   23945, 24073, 24201, 24329, 24457, 24585, 24713, 25611, 25739, 25867, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 16000, 16000, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 14981, 14981
   .short   16000, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 16000
   .short   16000, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   23432, 23432, 23432, 23432, 16000, 17926, 17926, 17926, 16000, 17926, 17926, 17926, 17926, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926
   .short   23432, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 16000
   .short   16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000
   .short   16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 23432, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 23561, 23689, 23817
   .short   23945, 24073, 24201, 24329, 24457, 24585, 24713, 20508, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 21769, 21897, 22025, 22153, 22281, 22409, 22537, 22665, 22793
   .short   22921, 792, 23064, 23064, 21400, 16000, 16000, 17926, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 16000, 16000, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 26133, 26262, 21636, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23432, 23432, 20888, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 23432, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 14981, 16000, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 20888, 20888, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926, 21636, 21636
   .short   17926, 17926, 10396, 17926, 17926, 17926, 17926, 16000, 16000, 1801, 1929, 2057, 2185, 2313, 2441, 2569
   .short   2697, 2825, 2953, 21509, 21509, 21509, 23196, 23196, 16000, 14981, 14981, 14981, 16000, 14981, 16000, 14981
   .short   16000, 16000, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 17926, 14981, 14981, 17926, 17926, 17926, 17926
   .short   17926, 17926, 16000, 17926, 17926, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 17926, 17926, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 17926, 14981, 23432, 23432
   .short   23432, 23432, 23432, 16000, 17926, 23432, 23432, 16000, 23432, 23432, 17926, 17926, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 23432, 23432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 16000, 20888, 20888
   .short   20888, 20888, 20888, 20888, 20888, 20888, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 25611
   .short   26379, 26507, 26635, 26763, 26891, 27019, 27147, 27275, 25739, 27403, 16000, 16000, 16000, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981
   .short   14981, 16000, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 17926, 14981, 23432, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 23432, 23432, 23432, 23432, 17926, 16000, 16000, 14981, 17926, 17926, 17926, 17926
   .short   16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 14981, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 17926
   .short   16000, 23432, 23432, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 17926, 14981, 14981, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 922, 922, 922, 922, 922, 922, 922
   .short   922, 922, 922, 922, 922, 922, 922, 922, 922, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 17926, 17926, 20888, 20888, 23561
   .short   23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 20888, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 664, 664, 792, 922, 792, 664, 664
   .short   26133, 26262, 664, 1305, 1432, 1556, 1432, 1688, 1801, 1929, 2057, 2185, 2313, 2441, 2569, 2697
   .short   2825, 2953, 1432, 664, 3225, 3225, 3225, 664, 664, 664, 664, 664, 664, 10772, 664, 664
   .short   664, 664, 23312, 23312, 23312, 23312, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585
   .short   24713, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981
   .short   14981, 16000, 16000, 16000, 16000, 23432, 17926, 17926, 17926, 17926, 16000, 16000, 23432, 23432, 16000, 16000
   .short   23432, 23432, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23432, 16000, 16000, 16000
   .short   16000, 14981, 14981, 16000, 14981, 16000, 16000, 14981, 14981, 16000, 14981, 16000, 16000, 14981, 16000, 16000
   .short   16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 16000, 14981, 14981
   .short   16000, 14981, 14981, 16000, 16000, 17926, 16000, 23432, 23432, 17926, 17926, 16000, 16000, 16000, 16000, 17926
   .short   17926, 16000, 16000, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 14981, 14981, 14981, 14981, 16000, 14981, 16000, 14981, 14981, 17926, 17926, 16000, 16000, 23561, 23689
   .short   23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 14981, 14981, 922, 922, 24843, 24971, 25099, 25227
   .short   25355, 25483, 20508, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 16000, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 17926, 14981, 23432, 23432, 17926, 17926, 17926, 17926, 17926, 16000, 17926, 17926
   .short   23432, 16000, 23432, 23432, 17926, 16000, 16000, 14981, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585
   .short   24713, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 20508, 17926, 20508, 17926, 20508
   .short   17926, 26133, 26262, 26133, 26262, 23432, 23432, 17926, 17926, 17926, 16000, 16000, 16000, 23432, 23432, 16000
   .short   16000, 23432, 23432, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 23432, 16000, 16000
   .short   16000, 16000, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 16000, 23432, 17926
   .short   17926, 17926, 17926, 23432, 17926, 16000, 16000, 16000, 17926, 17926, 23432, 17926, 16000, 16000, 16000, 16000
   .short   16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 23432, 23432, 23432, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   23432, 23432, 16000, 16000, 16000, 23432, 23432, 23432, 16000, 23432, 23432, 23432, 17926, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 23432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981
   .short   14981, 14981, 14981, 14981, 16000, 17796, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 16000, 16000, 23561
   .short   23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 16000, 16000, 14981, 14981, 16000, 16000, 16000
   .short   16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 20615, 20615, 20615, 23432, 17926, 17926, 17926, 16000
   .short   16000, 23432, 23432, 23432, 16000, 23432, 23432, 23432, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 23432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 17926, 16000, 16000, 16000, 16000, 23432, 23432, 23432, 17926, 17926, 17926
   .short   16000, 17926, 16000, 23432, 23432, 23432, 23432, 23432, 23432, 23432, 23432, 17926, 23432, 23432, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 20888, 20888, 20888, 20888, 20888, 20888, 20888
   .short   922, 20888, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 17796, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 20888, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 20888
   .short   20888, 16000, 16000, 16000, 16000, 14981, 20508, 20508, 20508, 20888, 20888, 20888, 20888, 20888, 20888, 20888
   .short   20888, 26040, 20888, 20888, 20888, 20888, 20888, 20888, 20508, 20508, 20508, 20508, 20508, 17926, 17926, 20508
   .short   20508, 20508, 20508, 20508, 20508, 17926, 20508, 20508, 20508, 20508, 20508, 20508, 16000, 16000, 20508, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 6807, 17796, 17796, 17796, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585
   .short   24713, 20888, 20888, 20888, 20888, 20888, 20888, 14981, 14981, 14981, 14981, 14981, 14981, 23432, 23432, 17926
   .short   17926, 16000, 16000, 16000, 16000, 16000, 16000, 524, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 26133, 26262, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 20888, 20888, 20888, 27531, 27659, 27787, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 11906, 11906, 11906
   .short   11906, 11906, 27906, 16000, 16000, 16000, 16000, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28161
   .short   28161, 28161, 28161, 28161, 28161, 28161, 28161, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28161
   .short   28161, 28161, 28161, 28161, 28161, 28161, 28161, 28034, 28034, 28034, 28034, 28034, 28034, 16000, 16000, 28161
   .short   28161, 28161, 28161, 28161, 28161, 16000, 16000, 11906, 28034, 18690, 28034, 18690, 28034, 18690, 28034, 16000
   .short   28161, 16000, 28161, 16000, 28161, 16000, 28161, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28161
   .short   28161, 28161, 28161, 28161, 28161, 28161, 28161, 28290, 28290, 28418, 28418, 28418, 28418, 28546, 28546, 28674
   .short   28674, 28802, 28802, 28930, 28930, 16000, 16000, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29187
   .short   29187, 29187, 29187, 29187, 29187, 29187, 29187, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29187
   .short   29187, 29187, 29187, 29187, 29187, 29187, 29187, 28034, 28034, 11906, 29314, 11906, 16000, 11906, 18690, 28161
   .short   28161, 29441, 29441, 29571, 6683, 29698, 6683, 6914, 7042, 7170, 7298, 7426, 7554, 7682, 7810, 7938
   .short   8066, 8194, 8322, 8450, 8578, 8706, 8834, 8962, 9090, 9218, 9346, 9474, 9602, 9730, 9858, 9986
   .short   10114, 26133, 3225, 26262, 3225, 16000, 28034, 28034, 18690, 18690, 11906, 30082, 11906, 18690, 28161, 28161
   .short   30209, 30209, 30337, 6683, 6683, 6683, 16000, 16000, 11906, 29314, 11906, 16000, 11906, 18690, 30465, 30465
   .short   30593, 30593, 29571, 6683, 6683, 16000, 524, 524, 524, 524, 524, 524, 524, 30764, 524, 524
   .short   524, 30860, 23312, 23312, 30992, 31120, 10772, 31284, 10772, 10772, 10772, 10772, 664, 664, 31389, 31518
   .short   26133, 31389, 31389, 31518, 26133, 31389, 664, 664, 664, 664, 664, 664, 664, 664, 31629, 31758
   .short   31888, 32016, 32144, 32272, 32400, 30764, 792, 792, 792, 792, 792, 664, 664, 664, 664, 10717
   .short   11614, 664, 664, 664, 664, 6807, 32523, 11403, 11019, 11147, 32651, 32779, 32907, 33035, 33163, 33291
   .short   1305, 1305, 3225, 1109, 1238, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 16000, 16000, 16000, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 19713, 10396, 10396, 10396, 10396, 19713, 10396, 10396, 10498, 19713
   .short   19713, 19713, 10498, 10498, 19713, 19713, 19713, 10498, 10396, 19713, 10396, 10396, 10396, 19713, 19713, 19713
   .short   19713, 19713, 10396, 10396, 41482, 41610, 41738, 41866, 41994, 42122, 42250, 42378, 42506, 17926, 17926, 17926
   .short   17926, 17926, 17926, 10772, 17796, 17796, 17796, 17796, 17796, 10396, 10396, 42634, 42762, 42890, 16000, 16000
   .short   16000, 10396, 10396, 10396, 10396, 16000, 10396, 10396, 10396, 10396, 16000, 16000, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 3225, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 3225, 3225, 10396, 10396, 3225, 10396, 3225, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 3225, 10396, 10396, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 38026, 38154, 38282, 38410, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 3225, 3225, 3225, 3225, 3225, 10396, 10396
   .short   10396, 10396, 10396, 3225, 3225, 10396, 10396, 10396, 10396, 19713, 10396, 33409, 10396, 19713, 10396, 33537
   .short   33665, 19713, 19713, 10908, 10498, 19713, 19713, 10396, 19713, 10498, 14981, 14981, 14981, 14981, 10498, 10396
   .short   16000, 16000, 16000, 16000, 16000, 33930, 34058, 34186, 34314, 34442, 34570, 34698, 34826, 34954, 35082, 35210
   .short   35338, 35466, 35594, 35722, 35850, 35978, 36106, 36234, 36362, 36490, 36618, 36746, 36874, 37002, 37130, 37258
   .short   37386, 37514, 37642, 37770, 37898, 3225, 3225, 3161, 3161, 3225, 3225, 3161, 3161, 3161, 3161, 3161
   .short   3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225
   .short   3225, 3225, 3225, 3161, 3161, 3161, 3161, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225
   .short   3161, 3161, 3161, 3161, 3161, 3225, 3225, 3161, 3161, 3225, 3225, 3225, 3225, 3161, 3161, 3161
   .short   3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225, 3161, 3161, 3161, 3161
   .short   3225, 3225, 3225, 3225, 3225, 3161, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 10396, 10396, 3225
   .short   10396, 10396, 3225, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 3225, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 3225, 3161, 3161
   .short   3161, 3161, 3225, 3225, 3225, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225, 3225, 3161, 1305
   .short   1305, 3225, 3161, 3161, 3225, 3225, 3225, 3161, 3161, 3161, 3161, 3225, 3161, 3225, 3161, 3225
   .short   3225, 3225, 3225, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225, 3225, 3225
   .short   3225, 3161, 3225, 3161, 3161, 3161, 3161, 3161, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 1109
   .short   1238, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 16000, 16000, 16000, 16000, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 39964, 39964, 39964
   .short   39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 40092, 40092, 40092
   .short   40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 32523, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 3161, 3225, 3161, 3225, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225
   .short   3225, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161
   .short   3161, 3161, 3161, 3225, 3225, 3161, 3161, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 922, 922, 3225, 6683, 10396, 922, 922, 16000, 10396, 3225, 3225
   .short   3225, 3225, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23312, 23312
   .short   23312, 10396, 10396, 16000, 16000, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 16000, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 16000, 10396, 16000, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 10396, 16000
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 33803, 40203, 40331, 40459, 40587, 40715, 40843, 40971, 41099, 41227, 33803
   .short   40203, 40331, 40459, 40587, 40715, 40843, 40971, 41099, 41227, 10396, 16000, 16000, 16000, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 3161, 3161, 3161, 3161, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 20508, 10396
   .short   10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 25355, 25355, 25355, 25355, 25355, 25355, 25355
   .short   25355, 25355, 25355, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 16000, 16000, 16000, 20508, 24843, 24971, 25099, 25227, 43019, 43147, 43275, 43403, 43531
   .short   25611, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 10396, 16000, 10396, 10396
   .short   10396, 16000, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 11403, 11019, 11147, 32651
   .short   32779, 32907, 33035, 33163, 33291, 38539, 38667, 38795, 38923, 39051, 39179, 39307, 39435, 39563, 39691, 39819
   .short   11403, 11019, 11147, 32651, 32779, 32907, 33035, 33163, 33291, 38539, 38667, 38795, 38923, 39051, 39179, 39307
   .short   39435, 39563, 39691, 39819, 20508, 20508, 20508, 20508, 524, 664, 664, 664, 10396, 17796, 14981, 41354
   .short   1109, 1238, 1109, 1238, 1109, 1238, 1109, 1238, 1109, 1238, 10396, 10396, 1109, 1238, 1109, 1238
   .short   1109, 1238, 1109, 1238, 10772, 26133, 26262, 26262, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000
   .short   16000, 17926, 17926, 6683, 6683, 17796, 17796, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 20508, 20508, 25355, 25355, 25355, 25355, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 43667, 43667, 43667, 43667, 43667
   .short   43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667
   .short   43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43794, 43794, 43794, 43794, 43794
   .short   43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794
   .short   43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 21253, 21253, 21253, 21253, 21253
   .short   21253, 21253, 21253, 21253, 1305, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253
   .short   21253, 21253, 16000, 21253, 21253, 21253, 21253, 21253, 16000, 21253, 16000, 17926, 17926, 17926, 17926, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 664, 10772, 10772, 6807, 6807
   .short   26133, 26262, 26133, 26262, 26133, 26262, 26133, 26262, 26133, 26262, 26133, 26262, 16000, 16000, 16000, 16000
   .short   664, 664, 664, 664, 6807, 6807, 6807, 1432, 664, 1432, 16000, 664, 1432, 664, 664, 10772
   .short   26133, 26262, 26133, 26262, 26133, 26262, 792, 664, 3329, 3457, 3585, 3713, 3841, 3969, 4097, 4225
   .short   4353, 4481, 4609, 4737, 4865, 4993, 5121, 5249, 5377, 5505, 5633, 5761, 5889, 6017, 6145, 6273
   .short   6401, 6529, 26133, 664, 26262, 6683, 6807
CaseUpper:
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504
   .short   65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504
   .short   0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 65504, 121
   .short   0, 65535, 0, 65304, 0, 65236, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0
   .short   0, 0, 0, 0, 0, 0, 56, 0, 65535, 65534, 65457, 0, 0, 0, 65326, 65330
   .short   65331, 65334, 65333, 65329, 65327, 65325, 65323, 65322, 65318, 65319, 65317, 0, 0, 84, 0, 0
   .short   0, 0, 0, 65498, 65499, 65505, 65472, 65473, 65474, 65479, 0, 65489, 65482, 65450, 65456, 0
   .short   0, 0, 0, 0, 65488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65477, 8, 0, 74, 86, 100
   .short   128, 112, 126, 8, 0, 9, 0, 0, 58331, 0, 0, 7, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 65520, 65520, 65520, 65520, 65520, 65520, 65520
   .short   65520, 65520, 65520, 65520, 65520, 65520, 65520, 65520, 65520, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 65510, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0
CaseLower:
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32
   .short   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
   .short   32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0
   .short   1, 0, 65337, 0, 65415, 0, 210, 206, 205, 79, 202, 203, 207, 0, 211, 209
   .short   213, 214, 218, 217, 219, 0, 0, 2, 1, 0, 0, 65439, 65480, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 37
   .short   64, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80
   .short   0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65528, 0, 0, 0
   .short   0, 0, 0, 0, 65528, 0, 65462, 65527, 0, 65450, 65436, 0, 65424, 65529, 65408, 65410
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 58019, 57153, 57274, 0, 16, 16, 16, 16, 16, 16, 16
   .short   16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0

   .text

   .balign  16
   .global  Ret
Ret:
   rep
   ret

   .balign  16
   .global  Retc
Retc:
   stc
   ret

   .balign  16
   .global  Retnc
Retnc:
   clc
   ret

   .balign  16
   .global  Retz
Retz:
   or       %r12, %r12
   ret

   .balign  16
   .global  Retnz
Retnz:
   cmp      %rsp, %r12
   ret

   .balign  16
   .global  RetNil
RetNil:
   mov      $Nil, %rbx
   ret

   .balign  16
   .global  RetT
RetT:
   mov      $TSym, %rbx
   ret

   .balign  16
   .global  RetE_E
RetE_E:
   mov      (%rbx), %rbx
   ret

   .global  main
main:
   xor      %r12, %r12
   mov      (%rsi), %r10
   movq     %r10, AV0
   lea      8(%rsi), %r10
   mov      %r10, AV
   mov      AV, %r13
.1:
   mov      (%r13), %r14
   cmp      %r12, %r14
   jz       .2
   mov      (%r14), %al
   cmp      $45, %al
   jz       .3
   mov      %r14, %r15
   mov      $47, %al
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %r14, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   cld
   mov      %r15, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %r15
   cmovzq   %rcx, %rdx
   jnz      .2
.5:
   cld
   mov      %r15, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %r15
   cmovzq   %rcx, %rdx
   jz       .5
   mov      %r15, %rax
   sub      $2, %rax
   cmp      %r14, %rax
   jnz      main_10
   mov      (%r14), %al
   cmp      $46, %al
   jz       .2
main_10:
   sub      %r14, %r15
   mov      %r15, %rdx
   add      $1, %rdx
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     malloc
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, Home
   lea      (%rax), %rdi
   lea      (%r14), %rsi
   mov      %r15, %rcx
   cld
   rep movsb
   add      Home, %r15
   mov      %r12b, (%r15)
   jmp      .2
.3:
   add      $8, %r13
   jmp      .1
.2:
   mov      %rdx, %r12
   call     getpid
   mov      %r12, %rdx
   xor      %r12, %r12
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, Pid
   mov      %rsp, Stack0
   mov      %r12, %rbp
   call     heapAlloc
   mov      $Nil, %rbx
   lea      32(%rbx), %r15
.7:
   mov      -8(%rbx), %r13
   mov      $Intern, %r14
   call     internEXY_FE
   mov      %r15, %rbx
   testb    $0x02, -8(%r15)
   jz       .8
   add      $16, %r15
   jmp      .9
.8:
   add      $32, %r15
.9:
   cmp      $SymTabEnd, %rbx
   jbe      .7
   movq     $getStdin_A, EnvGet_A
   mov      %r12, %rax
   call     initInFileA_A
   mov      %rax, InFile
   movq     $putStdoutB, EnvPutB
   mov      $2, %rax
   call     initOutFileA_A
   mov      $1, %rax
   call     initOutFileA_A
   mov      %rax, OutFile
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      $OrgTermio, %rsi
   call     tcgetattr
   mov      %r12, %rdx
   xor      %r12, %r12
   not      %al
   mov      %al, Tio
   sub      $128, %rsp
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     sigfillset
   mov      $1, %rdi
   mov      %rsp, %rsi
   xor      %rdx, %rdx
   call     sigprocmask
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $128, %rsp
   mov      $sig, %rbx
   mov      $1, %rdx
   call     iSignalCE
   mov      $10, %rdx
   call     iSignalCE
   mov      $12, %rdx
   call     iSignalCE
   mov      $14, %rdx
   call     iSignalCE
   mov      $15, %rdx
   call     iSignalCE
   mov      $sigTerm, %rbx
   mov      $2, %rdx
   call     iSignalCE
   mov      $sigChld, %rbx
   mov      $17, %rdx
   call     iSignalCE
   mov      %rdx, %r12
   mov      $17, %rdi
   mov      $sigChld, %rsi
   call     signal
   mov      $13, %rdi
   mov      $1, %rsi
   call     signal
   mov      $21, %rdi
   mov      $1, %rsi
   call     signal
   mov      $22, %rdi
   mov      $1, %rsi
   call     signal
   mov      $Buf, %rdi
   xor      %rsi, %rsi
   call     gettimeofday
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Buf, %rax
   mov      $1000000, %r10
   mul      %r10
   add      Buf+8, %rax
   mov      %rax, USec
   mov      %r12, %r13
   call     loadAllX_E
   mov      $sig, %rbx
   mov      $2, %rdx
   call     iSignalCE

   .global  restart
restart:
   mov      $58, %al
   mov      $Nil, %rbx
   mov      %r12, %r13
   call     loadBEX_E
   mov      %r12, %rbx

   .global  byeE
byeE:
   cmp      %r12b, InBye
   jnz      .10
   movb     $1, InBye
   push     %rbx
   mov      %r12, %rdx
   call     unwindC_Z
   mov      Bye, %rbx
   call     execE
   pop      %rbx
.10:
   call     flushAll

   .global  finishE
finishE:
   call     setCooked
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     exit
   mov      %r12, %rdx
   xor      %r12, %r12

   .global  loadAllX_E
loadAllX_E:
.11:
   mov      AV, %r10
   mov      (%r10), %rbx
   cmp      %r12, %rbx
   jz       retNil
   mov      (%rbx), %al
   cmp      $45, %al
   jnz      .12
   cmp      %r12b, 1(%rbx)
   jz       retNil
.12:
   addq     $8, AV
   call     mkStrE_E
   mov      $0, %al
   call     loadBEX_E
   jmp      .11

   .global  giveupX
giveupX:
   mov      Pid, %rax
   shr      $4, %rax
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $Giveup, %rsi
   mov      %rax, %rdx
   mov      %r13, %rcx
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $1, %rbx
   jmp      finishE
Giveup:
   .string  "%d %s\n"

   .global  execErrS
execErrS:
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $ExecErr, %rsi
   mov      (%rsp), %rdx
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $127, %rbx
   jmp      finishE
ExecErr:
   .string  "%s: can't exec\n"

   .global  iSignalCE
iSignalCE:
   sub      $304, %rsp
   mov      %rbx, 0(%rsp)
   mov      %rdx, %r12
   lea      8(%rsp), %rdi
   call     sigemptyset
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, 136(%rsp)
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %rsp, %rsi
   lea      152(%rsp), %rdx
   call     sigaction
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $304, %rsp
   ret

   .balign  16
   .global  allocAE_A
allocAE_A:
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      %rbx, %rsi
   call     realloc
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      Ret
   mov      $Alloc, %r13
   jmp      giveupX
Alloc:
   .string  "No memory"

   .balign  16
   .global  heapAlloc
heapAlloc:
   mov      %r12, %rax
   mov      $1048584, %rbx
   call     allocAE_A
   mov      %rax, %rbx
   mov      Heaps, %r10
   mov      %r10, 1048576(%rax)
   mov      %rax, Heaps
   add      $1048560, %rax
   mov      Avail, %r13
.13:
   mov      %r13, (%rax)
   mov      %rax, %r13
   sub      $16, %rax
   cmp      %rbx, %rax
   jnc      .13
   mov      %r13, Avail
   ret

   .global  sighandler0
sighandler0:
   push     %rbx
   mov      %r12, %rbx
   call     sighandlerE
   pop      %rbx
   ret

   .global  sighandlerX
sighandlerX:
   push     %rbx
   mov      %r13, %rbx
   call     sighandlerE
   pop      %rbx
   ret

   .global  sighandlerE
sighandlerE:
   cmp      %r12, EnvProtect
   jnz      .14
   movq     $1, EnvProtect
   push     %rax
   push     %rdx
   mov      Signal, %al
   cmp      $1, %al
   jnz      .15
   mov      %r12b, Signal
   mov      Hup, %rbx
   call     execE
   jmp      .16
.15:
   cmp      $2, %al
   jnz      .17
   mov      %r12b, Signal
   cmp      %r12, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   call     brkLoadE_E
   jmp      .16
.17:
   cmp      $10, %al
   jnz      .19
   mov      %r12b, Signal
   mov      Sig1, %rbx
   call     execE
   jmp      .16
.19:
   cmp      $12, %al
   jnz      .21
   mov      %r12b, Signal
   mov      Sig2, %rbx
   call     execE
   jmp      .16
.21:
   cmp      $14, %al
   jnz      .23
   mov      %r12b, Signal
   mov      Alarm, %rbx
   call     execE
   jmp      .16
.23:
   cmp      $15, %al
   jnz      .16
   push     %r13
   mov      Child, %r13
   mov      Children, %rdx
   mov      %r12, %rbx
.26:
   sub      $48, %rdx
   jc       .27
   cmp      %r12, (%r13)
   jz       .28
   mov      %rdx, %r12
   mov      (%r13), %rdi
   mov      $15, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $1, %r10
   cmovzq   %r10, %rbx
.28:
   add      $48, %r13
   jmp      .26
.27:
   pop      %r13
   cmp      %r12, %rbx
   jnz      .16
   mov      %r12b, Signal
   mov      %r12, %rbx
   jmp      byeE
.16:
   pop      %rdx
   pop      %rax
   mov      %r12, EnvProtect
.14:
   rep
   ret

   .global  sig
sig:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   mov      %rdi, %rax
   cmp      %r12, TtyPid
   jz       .30
   mov      %rdx, %r12
   mov      TtyPid, %rdi
   mov      %rax, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .31
.30:
   mov      %al, Signal
.31:
   pop      %r12
   pop      %rbx
   ret

   .global  sigTerm
sigTerm:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   cmp      %r12, TtyPid
   jz       .32
   mov      %rdx, %r12
   mov      TtyPid, %rdi
   mov      $15, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .33
.32:
   movb     $15, Signal
.33:
   pop      %r12
   pop      %rbx
   ret

   .global  sigChld
sigChld:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   call     errno_A
   push     %rax
   sub      $8, %rsp
.34:
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      %rsp, %rsi
   mov      $1, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jle      .35
   mov      %rax, %rdx
   call     wifsignaledS_F
   jz       .34
   call     wtermsigS_A
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $PidSigMsg, %rsi
   mov      %r12, %rdx
   mov      %rax, %rcx
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .34
.35:
   add      $8, %rsp
   pop      %rdx
   call     errnoC
   pop      %r12
   pop      %rbx
   ret
PidSigMsg:
   .string  "%d SIG-%d\n"

   .global  sigTermStop
sigTermStop:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      $1, %rsi
   mov      $OrgTermio, %rdx
   call     tcsetattr
   mov      %r12, %rdx
   xor      %r12, %r12
   sub      $128, %rsp
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     sigemptyset
   mov      %rsp, %rdi
   mov      $20, %rsi
   call     sigaddset
   mov      $1, %rdi
   mov      %rsp, %rsi
   xor      %rdx, %rdx
   call     sigprocmask
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $128, %rsp
   mov      %rdx, %r12
   mov      $20, %rdi
   xor      %rsi, %rsi
   call     signal
   mov      $20, %rdi
   call     raise
   mov      $20, %rdi
   mov      $sigTermStop, %rsi
   call     signal
   xor      %rdi, %rdi
   mov      $1, %rsi
   mov      Termio, %rdx
   call     tcsetattr
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %r12
   pop      %rbx
   ret

   .balign  16
   .global  setRaw
setRaw:
   cmp      %r12b, Tio
   jz       .37
   cmp      %r12, Termio
   jnz      .37
   mov      %rdx, %r12
   mov      $64, %rdi
   call     malloc
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, Termio
   mov      %rax, %rdx
   lea      (%rdx), %rdi
   lea      OrgTermio, %rsi
   mov      $64, %rcx
   cld
   rep movsb
   mov      %r12, %rax
   movl     %eax, 0(%rdx)
   mov      $1, %rax
   movl     %eax, 12(%rdx)
   movb     $1, 23(%rdx)
   mov      %r12b, 22(%rdx)
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      $1, %rsi
   mov      %r12, %rdx
   call     tcsetattr
   mov      $20, %rdi
   mov      $1, %rsi
   call     signal
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      .37
   mov      %rdx, %r12
   mov      $20, %rdi
   mov      $sigTermStop, %rsi
   call     signal
   mov      %r12, %rdx
   xor      %r12, %r12
.37:
   rep
   ret

   .balign  16
   .global  setCooked
setCooked:
   cmp      %r12, Termio
   jz       .40
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      $1, %rsi
   mov      $OrgTermio, %rdx
   call     tcsetattr
   mov      Termio, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Termio
.40:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doRaw
doRaw:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .41
   cmp      %r12, Termio
   jnz      retT
   mov      $Nil, %rbx
   ret
.41:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .42
   call     setCooked
   mov      $Nil, %rbx
   ret
.42:
   call     setRaw
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doAlarm
doAlarm:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     alarm
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%r14), %r10
   mov      %r10, Alarm
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doProtect
doProtect:
   push     %r13
   mov      8(%rbx), %r13
   addq     $1, EnvProtect
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   subq     $1, EnvProtect
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doHeap
doHeap:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .43
   mov      $2, %rbx
   mov      Heaps, %rax
.44:
   add      $16, %rbx
   mov      1048576(%rax), %rax
   cmp      %r12, %rax
   jnz      .44
   rep
   ret
.43:
   mov      %r12, %rax
   mov      Avail, %rdx
.45:
   cmp      %r12, %rdx
   jz       .46
   add      $1, %rax
   mov      (%rdx), %rdx
   jmp      .45
.46:
   mov      $65536, %r10
   div      %r10
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .global  doEnv
doEnv:
   push     %r13
   mov      8(%rbx), %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %r13b
   jz       .56
   push     %r14
   mov      EnvBind, %r14
.48:
   cmp      %r12, %r14
   jz       .49
   mov      (%r14), %rdx
   cmp      %r12, -8(%r14)
   jnz      .50
   add      $8, %r14
.51:
   mov      (%r14), %rbx
   mov      8(%rbp), %r13
.52:
   testb    $0x0E, %r13b
   jz       .53
   call     cons_A
   mov      %rbx, (%rax)
   mov      (%rbx), %r10
   mov      %r10, 8(%rax)
   call     consA_X
   mov      %rax, (%r13)
   mov      8(%rbp), %r10
   mov      %r10, 8(%r13)
   mov      %r13, 8(%rbp)
   jmp      .54
.53:
   mov      (%r13), %r10
   cmp      (%r10), %rbx
   jz       .54
   mov      8(%r13), %r13
   jmp      .52
.54:
   add      $16, %r14
   cmp      %rdx, %r14
   jnz      .51
.50:
   mov      8(%rdx), %r14
   jmp      .48
.49:
   pop      %r14
   jmp      .55
.56:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 16(%rbp)
   testb    $0x0E, %bl
   jnz      .57
.58:
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      (%rbx), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%rbp)
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .58
   jmp      .59
.57:
   cmp      $Nil, %rbx
   jz       .59
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      16(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%rbp)
.59:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .56
.55:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doUp
doUp:
   push     %r13
   push     %r14
   push     %r15
   mov      $1, %rdx
   mov      8(%rbx), %rbx
   mov      (%rbx), %r13
   testb    $0x02, %r13b
   jz       .61
   mov      %r13, %rdx
   shr      $4, %rdx
   mov      8(%rbx), %rbx
   mov      (%rbx), %r13
.61:
   mov      8(%rbx), %rbx
   mov      EnvBind, %r14
   mov      %r13, %r15
.62:
   cmp      %r12, %r14
   jz       doUp_10
   mov      (%r14), %rax
   add      $8, %r14
.64:
   cmp      (%r14), %r13
   jnz      .65
   lea      8(%r14), %r15
   sub      $1, %rdx
   jz       doUp_10
.65:
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .64
   mov      8(%rax), %r14
   jmp      .62
doUp_10:
   testb    $0x0E, %bl
   jz       .66
   mov      (%r15), %rbx
   jmp      .67
.66:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
.67:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  equalAE_F
equalAE_F:
   cmp      %rbx, %rax
   jz       ret
   testb    $0x02, %al
   jnz      ret
   testb    $0x04, %al
   jz       .68
   testb    $0x04, %bl
   jz       Retnz
   testb    $8, %al
   jz       .70
   testb    $8, %bl
   jz       Retnz
   andb     $~8, %al
   andb     $~8, %bl
.70:
   mov      -4(%rbx), %r10
   cmp      %r10, -4(%rax)
   jnz      .71
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   cmp      %rbx, %rax
   jz       .71
   testb    $0x02, %al
   jnz      .71
   testb    $0x02, %bl
   jz       .70
.71:
   rep
   ret
.68:
   testb    $0x08, %al
   jz       .72
   testb    $0x06, %bl
   jnz      Retnz
   testb    $0x08, %bl
   jz       Retnz
   mov      -8(%rax), %rax
   call     nameA_A
   cmpq     $2, %rax
   jz       retnz
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jz       retnz
   jmp      equalAE_F
.72:
   testb    $0x0E, %bl
   jnz      ret
.73:
   cmpq     $Quote, (%rax)
   jnz      .74
   cmpq     $Quote, (%rbx)
   jnz      ret
   cmp      8(%rax), %rax
   jnz      .75
   cmp      8(%rbx), %rbx
   ret
.75:
   cmp      8(%rbx), %rbx
   jz       retnz
   mov      8(%rax), %rax
   mov      8(%rbx), %rbx
   testb    $0x0E, %al
   jnz      equalAE_F
   testb    $0x0E, %bl
   jnz      ret
   jmp      .73
.74:
   push     %rax
   push     %rbx
.76:
   pushq    8(%rax)
   pushq    8(%rbx)
   mov      (%rax), %rax
   mov      (%rbx), %rbx
   call     equalAE_F
   pop      %rbx
   pop      %rax
   jnz      .77
   testb    $0x0E, %al
   jz       .78
   call     equalAE_F
   jmp      .77
.78:
   testb    $0x0E, %bl
   jnz      .77
   cmp      8(%rsp), %rax
   jz       .77
   cmp      (%rsp), %rbx
   jnz      .76
.77:
   pop      %rax
   pop      %rax
   ret

   .balign  16
   .global  compareAE_F
compareAE_F:
   cmp      %rbx, %rax
   jz       ret
   cmp      $Nil, %rax
   jnz      .79
compareAE_F_10:
   or       %al, %al
compareAE_F_20:
   stc
   ret
.79:
   cmp      $TSym, %rax
   jnz      .80
compareAE_F_30:
   or       %al, %al
compareAE_F_40:
   clc
   ret
.80:
   testb    $0x06, %al
   jz       .81
   testb    $0x06, %bl
   jnz      cmpNumAE_F
   cmp      $Nil, %rbx
   jz       compareAE_F_30
   stc
   ret
.81:
   testb    $0x08, %al
   jz       .82
   testb    $0x06, %bl
   jnz      compareAE_F_40
   cmp      $Nil, %rbx
   jz       compareAE_F_30
   testb    $0x0E, %bl
   jz       compareAE_F_10
   cmp      $TSym, %rbx
   jz       compareAE_F_10
   push     %r13
   mov      -8(%rax), %r13
   call     nameX_X
   cmpq     $2, %r13
   jnz      .83
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jnz      .84
   rol      $4, %al
   jmp      .85
.84:
   stc
.85:
   pop      %r13
   ret
.83:
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jnz      .87
compareAE_F_50:
   or       %al, %al
compareAE_F_60:
   clc
compareAE_F_70:
   pop      %r13
   ret
.87:
   testb    $0x02, %r13b
   jz       .88
   mov      %r13, %rax
   shr      $4, %rax
   mov      %r12, %r13
   jmp      .89
.88:
   mov      -4(%r13), %rax
   mov      4(%r13), %r13
.89:
   testb    $0x02, %bl
   jz       .90
   mov      %rbx, %rdx
   shr      $4, %rdx
   mov      %r12, %rbx
   jmp      .92
.90:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
.92:
   cmp      %dl, %al
   jnz      compareAE_F_70
   shr      $8, %rax
   jnz      .93
   shr      $8, %rdx
   jz       .94
   stc
   pop      %r13
   ret
.94:
   cmp      %r12, %r13
   jnz      .95
   cmp      %r12, %rbx
   jz       compareAE_F_70
   stc
   pop      %r13
   ret
.95:
   cmp      %r12, %rbx
   jz       compareAE_F_50
   jmp      .87
.93:
   shr      $8, %rdx
   jz       compareAE_F_50
   jmp      .92
.82:
   testb    $0x0E, %bl
   jz       .97
   cmp      $TSym, %rbx
   jnz      .98
   or       %al, %al
   stc
   ret
.98:
   clc
   ret
.97:
   push     %r13
   push     %r14
   mov      %rax, %r13
   mov      %rbx, %r14
.99:
   push     %rax
   push     %rbx
   mov      (%rax), %rax
   mov      (%rbx), %rbx
   call     compareAE_F
   pop      %rbx
   pop      %rax
   jnz      .100
   mov      8(%rax), %rax
   mov      8(%rbx), %rbx
   testb    $0x0E, %al
   jz       .101
   call     compareAE_F
   jmp      .100
.101:
   testb    $0x0E, %bl
   jz       .102
   cmp      $TSym, %rbx
   jz       .103
   clc
   jmp      .100
.103:
   or       %al, %al
   stc
   jmp      .100
.102:
   cmp      %r13, %rax
   jnz      .99
   cmp      %r14, %rbx
   jnz      .99
.100:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  memberXY_FY
memberXY_FY:
   mov      %r14, %rdx
.105:
   testb    $0x0E, %r14b
   jnz      .106
   mov      %r13, %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jz       ret
   mov      8(%r14), %r14
   cmp      %r14, %rdx
   jz       retNil
   jmp      .105
.106:
   mov      %r13, %rax
   mov      %r14, %rbx
   call     equalAE_F
   ret

   .balign  16
   nop
   nop
   .global  doQuit
doQuit:
   mov      8(%rbx), %r13
   call     evSymX_E
   call     bufStringE_SZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   cmovnzq  %r12, %rbx
   jnz      .107
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.107:
   mov      %r12, %r13
   mov      $QuitMsg, %r14
   mov      %rsp, %r15
   jmp      errEXYZ
QuitMsg:
   .string  "%s"

   .balign  16
   .global  evExprCE_E
evExprCE_E:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%rdx), %r14
   mov      8(%rdx), %r15
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
.108:
   testb    $0x0E, %r14b
   jnz      .109
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    (%r14)
   mov      8(%r14), %r14
   jmp      .108
.109:
   cmp      $Nil, %r14
   jnz      .110
   mov      %rsp, %r14
.111:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .111
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.112:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .112
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.110:
   cmp      $At, %r14
   jz       .113
   pushq    (%r14)
   push     %r14
   mov      %r13, (%r14)
   lea      16(%rsp), %r14
.114:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .114
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.115:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .115
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.113:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, %r14
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   testb    $0x0E, %r13b
   jz       .116
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .117
.116:
   push     %rbp
   mov      %rsp, %rbp
.118:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .118
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.117:
   mov      %r14, EnvBind
   mov      (%r14), %rdx
   add      $8, %r14
.119:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .119
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .120
   mov      (%rbp), %rsp
   pop      %rbp
.120:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.121:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .121
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  evListE_E
evListE_E:
   mov      (%rbx), %rdx
   testb    $0x06, %dl
   jnz      ret
   testb    $0x08, %dl
   jz       .122
evListE_E_10:
   cmp      %r12b, Signal
   jz       .124
   push     %rbx
   call     sighandlerE
   pop      %rbx
.124:
   mov      (%rdx), %rax
   testb    $0x02, %al
   jz       1f
   jmp      *%rax
1:
   testb    $0x04, %al
   jnz      undefinedCE
   cmp      (%rax), %rax
   jz       .125
   mov      %rax, %rdx
   testb    $0x0E, %dl
   jz       evExprCE_E
   jmp      evListE_E_10
.125:
   call     sharedLibC_FA
   jz       1f
   jmp      *%rax
1:
   jmp      undefinedCE
.122:
   push     %rbx
   mov      %rdx, %rbx
   call     evListE_E
   mov      %rbx, %rdx
   pop      %rbx
   testb    $0x02, %dl
   jz       1f
   jmp      *%rdx
1:
   testb    $0x04, %dl
   jnz      undefinedCE
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %dl
   jnz      .127
   call     evExprCE_E
   jmp      .128
.127:
   call     evListE_E_10
.128:
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .global  sharedLibC_FA
sharedLibC_FA:
   push     %rdx
   push     %rbx
   push     %r14
   push     %r15
   mov      %rdx, %rbx
   call     bufStringE_SZ
   mov      %r12, %rdx
   mov      %rsp, %r14
.129:
   mov      (%r14), %al
   or       %al, %al
   jz       sharedLibC_FA_90
   cmp      $58, %al
   jz       .130
   cmp      $47, %al
   jnz      .131
   mov      %r14, %rdx
.131:
   add      $1, %r14
   jmp      .129
.130:
   cmp      %r15, %r14
   jz       sharedLibC_FA_90
   cmp      %r12b, 1(%r14)
   jz       sharedLibC_FA_90
   mov      %r12b, (%r14)
   add      $1, %r14
   cmp      %r12, %rdx
   mov      %rsp, %rdx
   jnz      .132
   sub      $8, %rsp
   sub      $4, %rdx
   movb     $47, 3(%rdx)
   movb     $98, 2(%rdx)
   movb     $105, 1(%rdx)
   movb     $108, (%rdx)
   mov      Home, %rax
   cmp      %r12, %rax
   jz       .132
.134:
   add      $1, %rax
   cmp      %r12b, (%rax)
   jnz      .134
   sub      Home, %rax
   sub      %rax, %rdx
   mov      %rdx, %rsp
   andb     $~7, %spl
   lea      (%rdx), %rdi
   mov      Home, %rsi
   mov      %rax, %rcx
   cld
   rep movsb
.132:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $257, %rsi
   call     dlopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       sharedLibC_FA_90
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      %r14, %rsi
   call     dlsym
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       sharedLibC_FA_90
   mov      %rax, (%rbx)
sharedLibC_FA_90:
   mov      %r15, %rsp
   pop      %r15
   pop      %r14
   pop      %rbx
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .global  doErrno
doErrno:
   call     errno_A
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .global  doNative
doNative:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       .137
   shr      $4, %rbx
   push     %rbx
   jmp      .138
.137:
   testb    $0x04, %bl
   jz       .139
   pushq    -4(%rbx)
   jmp      .138
.139:
   call     needSymEX
   call     bufStringE_SZ
   mov      %rsp, %rdx
   mov      (%rsp), %al
   cmp      $64, %al
   jnz      .141
   cmp      %r12b, 1(%rsp)
   cmovzq   %r12, %rdx
.141:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $257, %rsi
   call     dlopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       dlErrX
   mov      %r15, %rsp
   push     %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .142
   shl      $4, %rax
   orb      $2, %al
   jmp      .143
.142:
   call     boxNumA_A
.143:
   mov      %rax, (%rbx)
.138:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rsp, %r15
   testb    $0x02, %bl
   jz       .144
   shr      $4, %rbx
   mov      %rbx, (%rsp)
   jmp      .145
.144:
   testb    $0x04, %bl
   jz       .146
   mov      -4(%rbx), %r10
   mov      %r10, (%rsp)
   jmp      .145
.146:
   call     needSymEX
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      (%r15), %rdi
   mov      %rsp, %rsi
   call     dlsym
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       dlErrX
   mov      %r15, %rsp
   mov      %rax, (%rsp)
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .148
   shl      $4, %rax
   orb      $2, %al
   jmp      .149
.148:
   call     boxNumA_A
.149:
   mov      %rax, (%rbx)
.145:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.150:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .151
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .150
.151:
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   lea      -16(%r15), %r14
.152:
   cmp      %r14, %r13
   jz       .153
   mov      (%r13), %rbx
   testb    $0x06, %bl
   jz       .154
   testb    $0x02, %bl
   jz       .155
   shr      $4, %rbx
   jnc      .159
   neg      %rbx
   jmp      .159
.155:
   testb    $8, %bl
   pushf
   andb     $~12, %bl
   mov      8(%rbx), %rax
   mov      (%rbx), %rbx
   shr      $5, %rax
   rcr      $1, %rbx
   shr      $1, %rax
   rcr      $1, %rbx
   shr      $1, %rax
   rcr      $1, %rbx
   shr      $1, %rax
   rcr      $1, %rbx
   popf
   jz       .159
   neg      %rbx
   jmp      .159
.154:
   push     %r15
   testb    $0x08, %bl
   jz       .160
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %rbx
   mov      %r15, %rsp
   jmp      .161
.160:
   mov      8(%rbx), %rbx
   mov      (%rbx), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     malloc
   mov      %r12, %rdx
   xor      %r12, %r12
   push     %rax
   mov      %rax, %r15
.162:
   mov      8(%rbx), %rbx
   testb    $0x02, %bl
   jz       .163
   mov      %rbx, %rax
   shr      $4, %rax
.164:
   sub      $1, %rdx
   js       .166
   mov      %al, (%r15)
   add      $1, %r15
   jmp      .164
.163:
   testb    $0x0E, %bl
   jnz      .166
   mov      (%rbx), %rax
   shr      $4, %rax
   mov      %al, (%r15)
   add      $1, %r15
   sub      $1, %rdx
   jnz      .162
.166:
   pop      %rbx
.161:
   pop      %r15
.159:
   push     %rbx
   add      $8, %r13
   jmp      .152
.153:
   mov      %rsp, %r13
   mov      %rbp, %rdx
   sub      %r13, %rdx
   sub      %rdx, %rsp
   lea      (%rsp), %rdi
   lea      (%r13), %rsi
   mov      %rdx, %rcx
   cld
   rep movsb
   mov      (%r15), %r14
   mov      %rdx, %r12
   cmp      %rsp, %r13
   jz       1f
   pop      %rdi
   cmp      %rsp, %r13
   jz       1f
   pop      %rsi
   cmp      %rsp, %r13
   jz       1f
   pop      %rdx
   cmp      %rsp, %r13
   jz       1f
   pop      %rcx
   cmp      %rsp, %r13
   jz       1f
   pop      %r8
   cmp      %rsp, %r13
   jz       1f
   pop      %r9
1:
   xor      %rax, %rax
   call     *%r14
   mov      %r13, %rsp
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      -16(%r15), %rbx
   mov      %r12, %rdx
   call     natRetACE_CE
   mov      %rbx, -16(%r15)
   lea      -24(%r15), %r14
.167:
   cmp      %rbp, %r14
   jz       .168
   pop      %r13
   mov      (%r14), %rbx
   testb    $0x06, %bl
   jnz      .169
   testb    $0x08, %bl
   jnz      .170
   cmpq     $Nil, (%rbx)
   jz       .170
   mov      %r13, %rdx
   mov      8(%rbx), %r10
   mov      (%r10), %r10
   mov      8(%r10), %rbx
   call     natRetACE_CE
   mov      (%r14), %r11
   mov      (%r11), %r11
   mov      %rbx, (%r11)
.170:
   mov      %rdx, %r12
   mov      %r13, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.169:
   sub      $8, %r14
   jmp      .167
.168:
   mov      -16(%r15), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  natRetACE_CE
natRetACE_CE:
   cmp      $Nil, %rbx
   jz       .172
   cmp      $ISym, %rbx
   jnz      .173
   cmp      %r12, %rdx
   jz       .174
   movslq   (%rdx), %rax
   add      $4, %rdx
.174:
   movsx    %eax, %rax
   mov      %rax, %rbx
   cmp      %r12, %rbx
   js       .175
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .172
.175:
   neg      %rbx
   shl      $4, %rbx
   orb      $10, %bl
   jmp      .172
.173:
   cmp      $NSym, %rbx
   jnz      .178
   cmp      %r12, %rdx
   jz       .179
   mov      (%rdx), %rax
   add      $8, %rdx
.179:
   mov      %rax, %rbx
   cmp      %r12, %rbx
   js       .180
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .181
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .172
.181:
   call     boxNumE_E
   jmp      .172
.180:
   neg      %rbx
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .184
   shl      $4, %rbx
   orb      $10, %bl
   jmp      .172
.184:
   call     boxNumE_E
   orb      $8, %bl
   jmp      .172
.178:
   cmp      $SSym, %rbx
   jnz      .187
   cmp      %r12, %rdx
   jz       .188
   mov      (%rdx), %rax
   add      $8, %rdx
.188:
   mov      %rax, %rbx
   call     mkStrE_E
   jmp      .172
.187:
   cmp      $CSym, %rbx
   jnz      .190
   cmp      %r12, %rdx
   jz       .191
   call     fetchCharC_AC
.191:
   mov      $Nil, %rbx
   cmp      %r12, %rax
   jz       .172
   call     mkCharA_A
   mov      %rax, %rbx
   jmp      .172
.190:
   cmp      $BSym, %rbx
   jnz      .194
   cmp      %r12, %rdx
   jz       .195
   mov      (%rdx), %al
   add      $1, %rdx
.195:
   movzx    %al, %rax
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .172
.194:
   testb    $0x0E, %bl
   jnz      .172
   cmp      %r12, %rdx
   cmovzq   %rax, %rdx
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      (%r13), %rbx
   call     natRetACE_CE
   call     cons_Y
   mov      %rbx, (%r14)
   movq     $Nil, 8(%r14)
   push     %rbp
   mov      %rsp, %rbp
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
.198:
   mov      8(%r13), %r15
   testb    $0x02, %r15b
   jz       .199
   shr      $4, %r15
.200:
   sub      $1, %r15
   jz       .202
   mov      (%r13), %rbx
   call     natRetACE_CE
   call     cons_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   jmp      .200
.199:
   testb    $0x0E, %r15b
   jnz      .202
   mov      %r15, %r13
   mov      (%r13), %rbx
   call     natRetACE_CE
   call     cons_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   jmp      .198
.202:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
.172:
   rep
   ret

   .balign  16
   .global  fetchCharC_AC
fetchCharC_AC:
   mov      (%rdx), %al
   movzx    %al, %rax
   or       %al, %al
   jz       .203
   add      $1, %rdx
   cmp      $128, %al
   jc       .203
   testb    $32, %al
   jnz      .205
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .206
.205:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   mov      (%rdx), %al
   movzx    %al, %rax
   add      $1, %rdx
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.206:
   mov      (%rdx), %al
   movzx    %al, %rax
   add      $1, %rdx
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
.203:
   rep
   ret

   .balign  16
   .global  execE
execE:
   push     %r13
   mov      %rbx, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   push     %rbp
   mov      %rsp, %rbp
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %r10
   mov      %r10, At
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .global  runE_E
runE_E:
   push     %r13
   mov      %rbx, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   push     %rbp
   mov      %rsp, %rbp
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %r10
   mov      %r10, At
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .global  funqE_FE
funqE_FE:
   testb    $0x02, %bl
   jnz      retz
   testb    $0x04, %bl
   jnz      ret
   testb    $0x08, %bl
   jnz      ret
   mov      8(%rbx), %rdx
.207:
   testb    $0x0E, %dl
   jnz      .208
   cmp      %rbx, %rdx
   jz       retnz
   mov      (%rdx), %rax
   testb    $0x0E, %al
   jnz      .209
   testb    $0x06, (%rax)
   jz       .210
   testb    $0x0E, 8(%rdx)
   jz       retnz
   jmp      .212
.210:
   cmpq     $Nil, (%rax)
   jz       retnz
   cmpq     $TSym, (%rax)
   jz       retnz
   jmp      .212
.209:
   cmpq     $Nil, 8(%rdx)
   jnz      ret
.212:
   mov      8(%rdx), %rdx
   jmp      .207
.208:
   cmp      $Nil, %rdx
   jnz      ret
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
   jz       .213
   mov      %rbx, %rdx
.214:
   testb    $0x0E, %dl
   jnz      .215
   mov      (%rdx), %rax
   testb    $0x06, %al
   jnz      ret
   testb    $0x0E, %al
   jz       retnz
   cmp      $Nil, %rax
   jz       retnz
   cmp      $TSym, %rax
   jz       retnz
   mov      8(%rdx), %rdx
   cmp      %rbx, %rdx
   jz       retnz
   jmp      .214
.215:
   cmp      $TSym, %rdx
   jz       retnz
   testb    $0x06, %dl
   jnz      ret
.213:
   rep
   ret

   .balign  16
   .global  evSymX_E
evSymX_E:
   mov      (%r13), %rbx
   jmp      evSymE_E

   .balign  16
   .global  evSymY_E
evSymY_E:
   mov      (%r14), %rbx

   .global  evSymE_E
evSymE_E:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:

   .global  xSymE_E
xSymE_E:
   testb    $0x06, %bl
   jnz      .216
   testb    $0x08, %bl
   jnz      ret
.216:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   call     packECX_CX
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .global  evCntXY_FE
evCntXY_FE:
   mov      (%r14), %rbx

   .global  evCntEX_FE
evCntEX_FE:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:

   .balign  16
   .global  xCntEX_FE
xCntEX_FE:
   testb    $0x02, %bl
   jz       cntErrEX
   shr      $4, %rbx
   jnc      .217
   neg      %rbx
.217:
   rep
   ret

   .balign  16
   .global  xCntCX_FC
xCntCX_FC:
   testb    $0x02, %dl
   jz       cntErrCX
   shr      $4, %rdx
   jnc      .218
   neg      %rdx
.218:
   rep
   ret

   .balign  16
   .global  xCntAX_FA
xCntAX_FA:
   testb    $0x02, %al
   jz       cntErrAX
   shr      $4, %rax
   jnc      .219
   neg      %rax
.219:
   rep
   ret

   .balign  16
   .global  boxCntE_E
boxCntE_E:
   cmp      %r12, %rbx
   js       .220
   shl      $4, %rbx
   orb      $2, %bl
   ret
.220:
   neg      %rbx
   shl      $4, %rbx
   orb      $10, %bl
   ret

   .balign  16
   .global  putStringB
putStringB:
   push     %r13
   push     %rdx
   mov      StrX, %r13
   mov      StrC, %rdx
   call     byteSymBCX_CX
   mov      %rdx, StrC
   mov      %r13, StrX
   pop      %rdx
   pop      %r13
   ret

   .balign  16
   .global  begString
begString:
   pop      %rax
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   movq     $4, StrC
   mov      %rsp, StrX
   push     %rbp
   mov      %rsp, %rbp
   pushq    EnvPutB
   movq     $putStringB, EnvPutB
   jmp      *%rax

   .balign  16
   .global  endString_E
endString_E:
   pop      %rax
   popq     EnvPutB
   mov      $Nil, %rbx
   cmpq     $2, 8(%rbp)
   jz       .221
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
.221:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      *%rax

   .global  msec_A
msec_A:
   push     %rdx
   mov      %rdx, %r12
   mov      $Buf, %rdi
   xor      %rsi, %rsi
   call     gettimeofday
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Buf, %rax
   mov      $1000, %r10
   mul      %r10
   mov      %rax, Buf
   mov      Buf+8, %rax
   mov      $1000, %r10
   div      %r10
   add      Buf, %rax
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .global  doArgs
doArgs:
   mov      EnvArgs, %r10
   cmp      %r10, EnvNext
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doNext
doNext:
   mov      EnvNext, %rdx
   cmp      EnvArgs, %rdx
   jz       retNil
   sub      $8, %rdx
   mov      (%rdx), %rbx
   mov      %rdx, EnvNext
   ret

   .balign  16
   nop
   nop
   .global  doArg
doArg:
   cmp      %r12, EnvArgs
   jz       retNil
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .222
   mov      EnvNext, %r10
   mov      (%r10), %rbx
   ret
.222:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $8, %bl
   jnz      .223
   shr      $1, %rbx
   andb     $~1, %bl
   jz       .223
   mov      EnvNext, %rdx
   sub      %rbx, %rdx
   cmp      EnvArgs, %rdx
   jc       .223
   mov      (%rdx), %rbx
   ret
.223:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doRest
doRest:
   mov      $Nil, %rbx
   mov      EnvArgs, %rdx
.226:
   cmp      EnvNext, %rdx
   jz       .227
   call     consE_A
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   add      $8, %rdx
   jmp      .226
.227:
   rep
   ret

   .balign  16
   .global  tmDateC_E
tmDateC_E:
   movslq   12(%rdx), %rax
   mov      %rax, %r13
   movslq   16(%rdx), %rax
   add      $1, %rax
   mov      %rax, %r14
   movslq   20(%rdx), %rax
   add      $1900, %rax
   mov      %rax, %r15

   .balign  16
   .global  dateXYZ_E
dateXYZ_E:
   cmp      %r12, %r14
   jbe      retNil
   cmp      $12, %r14
   ja       retNil
   cmp      %r12, %r13
   jbe      retNil
   mov      Month(%r14), %al
   cmp      %al, %r13b
   jbe      .228
   cmp      $2, %r14
   jnz      retNil
   cmp      $29, %r13
   jnz      retNil
   testb    $3, %r15b
   jnz      retNil
   mov      %r15, %rax
   mov      %r12, %rdx
   mov      $100, %r10
   div      %r10
   cmp      %r12, %rdx
   jnz      .228
   mov      %r15, %rax
   mov      $400, %r10
   div      %r10
   cmp      %r12, %rdx
   jnz      retNil
.228:
   mov      %r15, %rax
   mov      $12, %r10
   mul      %r10
   add      %r14, %rax
   sub      $3, %rax
   mov      %r12, %rdx
   mov      $12, %r10
   div      %r10
   mov      %rax, %rbx
   mov      %r12, %rdx
   mov      $100, %r10
   div      %r10
   mov      %rbx, %rdx
   shr      $2, %rbx
   add      %rdx, %rdx
   sub      %rdx, %rbx
   sub      %rax, %rbx
   shr      $2, %rax
   add      %rax, %rbx
   mov      %r15, %rax
   mov      $4404, %r10
   mul      %r10
   mov      %rax, %r15
   mov      %r14, %rax
   mov      $367, %r10
   mul      %r10
   add      %r15, %rax
   sub      $1094, %rax
   mov      $12, %r10
   div      %r10
   add      %rax, %rbx
   add      %r13, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret
Month:
   .byte    31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31

   .balign  16
   nop
   nop
   .global  doDate
doDate:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jz       .230
   mov      %rdx, %r12
   mov      $Buf, %rdi
   call     time
   mov      $Buf, %rdi
   call     localtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, Time
   mov      %rax, %rdx
   call     tmDateC_E
   jmp      .231
.230:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      .232
   mov      %rdx, %r12
   mov      $Buf, %rdi
   call     time
   mov      $Buf, %rdi
   call     gmtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, Time
   mov      %rax, %rdx
   call     tmDateC_E
   jmp      .231
.232:
   cmp      $Nil, %rbx
   jz       .231
   testb    $0x0E, %bl
   jnz      .235
   mov      (%rbx), %rdx
   call     xCntCX_FC
   mov      %rdx, %r15
   mov      8(%rbx), %rbx
   mov      (%rbx), %rdx
   call     xCntCX_FC
   mov      %rdx, %r14
   mov      8(%rbx), %r10
   mov      (%r10), %rdx
   call     xCntCX_FC
   mov      %rdx, %r13
   call     dateXYZ_E
   jmp      .231
.235:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .237
   call     xCntEX_FE
   mov      %rbx, %rax
   mov      $100, %r10
   mul      %r10
   sub      $20, %rax
   mov      %r12, %rdx
   mov      $3652425, %r10
   div      %r10
   mov      %rax, %r15
   add      %rax, %rbx
   shr      $2, %rax
   sub      %rax, %rbx
   mov      %rbx, %rax
   mov      $100, %r10
   mul      %r10
   sub      $20, %rax
   mov      $36525, %r10
   div      %r10
   mov      %rax, %r15
   mov      $36525, %r10
   mul      %r10
   mov      $100, %r10
   div      %r10
   sub      %rax, %rbx
   mov      %rbx, %rax
   mov      $10, %r10
   mul      %r10
   sub      $5, %rax
   mov      $306, %r10
   div      %r10
   mov      %rax, %r14
   mov      $306, %r10
   mul      %r10
   mov      %rax, %r13
   mov      %rbx, %rax
   mov      $10, %r10
   mul      %r10
   sub      %r13, %rax
   add      $5, %rax
   mov      $10, %r10
   div      %r10
   mov      %rax, %r13
   cmp      $10, %r14
   jnc      .238
   add      $3, %r14
   jmp      .239
.238:
   add      $1, %r15
   sub      $9, %r14
.239:
   shl      $4, %r13
   orb      $2, %r13b
   call     cons_E
   mov      %r13, (%rbx)
   movq     $Nil, 8(%rbx)
   shl      $4, %r14
   orb      $2, %r14b
   call     consE_C
   mov      %r14, (%rdx)
   mov      %rbx, 8(%rdx)
   shl      $4, %r15
   orb      $2, %r15b
   call     consC_E
   mov      %r15, (%rbx)
   mov      %rdx, 8(%rbx)
   jmp      .231
.237:
   call     xCntEX_FE
   mov      %rbx, %r15
   call     evCntXY_FE
   push     %rbx
   mov      8(%r14), %r14
   call     evCntXY_FE
   mov      %rbx, %r13
   pop      %r14
   call     dateXYZ_E
.231:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  tmTimeY_E
tmTimeY_E:
   movslq   8(%r14), %rax
   mov      $3600, %r10
   mul      %r10
   mov      %rax, %rbx
   movslq   4(%r14), %rax
   mov      $60, %r10
   mul      %r10
   add      %rax, %rbx
   movslq   0(%r14), %rax
   add      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .global  doTime
doTime:
   push     %r13
   push     %r14
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jz       .241
   mov      %rdx, %r12
   mov      $Buf, %rdi
   call     time
   mov      $Buf, %rdi
   call     localtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %r14
   call     tmTimeY_E
   jmp      .242
.241:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      .243
   mov      Time, %r14
   cmp      %r12, %r14
   jz       .244
   call     tmTimeY_E
   jmp      .242
.244:
   mov      $Nil, %rbx
   jmp      .242
.243:
   cmp      $Nil, %rbx
   jz       .242
   testb    $0x0E, %bl
   jnz      .248
   mov      (%rbx), %rax
   call     xCntAX_FA
   mov      $3600, %r10
   mul      %r10
   mov      %rax, %r14
   mov      8(%rbx), %rbx
   mov      (%rbx), %rax
   call     xCntAX_FA
   mov      $60, %r10
   mul      %r10
   add      %rax, %r14
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   cmovnzq  %r14, %rbx
   jnz      .249
   mov      (%rbx), %rbx
   call     xCntEX_FE
   add      %r14, %rbx
.249:
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .242
.248:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .251
   call     xCntEX_FE
   mov      %rbx, %rax
   mov      %r12, %rdx
   mov      $60, %r10
   div      %r10
   shl      $4, %rdx
   orb      $2, %dl
   call     cons_Y
   mov      %rdx, (%r14)
   movq     $Nil, 8(%r14)
   mov      %rbx, %rax
   mov      %r12, %rdx
   mov      $60, %r10
   div      %r10
   mov      %r12, %rdx
   mov      $60, %r10
   div      %r10
   shl      $4, %rdx
   orb      $2, %dl
   call     consY_X
   mov      %rdx, (%r13)
   mov      %r14, 8(%r13)
   xchg     %rbx, %rax
   mov      %r12, %rdx
   mov      $3600, %r10
   div      %r10
   shl      $4, %rax
   orb      $2, %al
   call     consX_E
   mov      %rax, (%rbx)
   mov      %r13, 8(%rbx)
   jmp      .242
.251:
   call     xCntEX_FE
   mov      %rbx, %rax
   mov      $3600, %r10
   mul      %r10
   push     %rax
   call     evCntXY_FE
   mov      %rbx, %rax
   mov      $60, %r10
   mul      %r10
   add      %rax, (%rsp)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .253
   call     evCntXY_FE
   add      %rbx, (%rsp)
.253:
   pop      %rbx
   shl      $4, %rbx
   orb      $2, %bl
.242:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doUsec
doUsec:
   mov      %rdx, %r12
   mov      $Buf, %rdi
   xor      %rsi, %rsi
   call     gettimeofday
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Buf, %rax
   mov      $1000000, %r10
   mul      %r10
   add      Buf+8, %rax
   sub      USec, %rax
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .global  doPwd
doPwd:
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     getcwd
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       retNil
   push     %rax
   mov      %rax, %rbx
   call     mkStrE_E
   mov      %rdx, %r12
   pop      %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .balign  16
   nop
   nop
   .global  doCd
doCd:
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
   mov      $Nil, %rbx
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     getcwd
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .254
   push     %rax
   cmp      %r12b, 8(%rsp)
   jz       doCd_10
   mov      %rdx, %r12
   lea      8(%rsp), %rdi
   call     chdir
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .255
doCd_10:
   mov      (%rsp), %rbx
   call     mkStrE_E
.255:
   mov      %rdx, %r12
   pop      %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.254:
   mov      %r15, %rsp
   pop      %r15
   ret

   .balign  16
   nop
   nop
   .global  doCtty
doCtty:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       .256
   shr      $4, %rbx
   mov      %rbx, TtyPid
   mov      $TSym, %rbx
   jmp      .257
.256:
   testb    $0x08, %bl
   jz       argErrEX
   push     %r15
   call     bufStringE_SZ
   mov      $Nil, %rbx
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_r_, %rsi
   mov      stdin, %rdx
   call     freopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .258
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_w_, %rsi
   mov      stdout, %rdx
   call     freopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .258
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_w_, %rsi
   mov      stderr, %rdx
   call     freopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .258
   mov      OutFiles, %r11
   mov      8(%r11), %r11
   movq     $1, 16(%r11)
   mov      $TSym, %rbx
.258:
   mov      %r15, %rsp
   pop      %r15
.257:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doInfo
doInfo:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
   mov      %rsp, %rbx
   sub      $144, %rsp
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      %rsp, %rsi
   call     stat
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $Nil, %rbx
   cmp      %r12d, %eax
   js       .261
   mov      %rdx, %r12
   lea      88(%rsp), %rdi
   call     gmtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %r14
   call     tmTimeY_E
   push     %rbx
   push     %r15
   mov      %r14, %rdx
   call     tmDateC_E
   pop      %r15
   call     cons_X
   mov      %rbx, (%r13)
   popq     8(%r13)
   call     consX_E
   call     s_isdirS_F
   jnz      .262
   movq     $TSym, (%rbx)
   jmp      .263
.262:
   mov      48(%rsp), %rax
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rbx)
.263:
   mov      %r13, 8(%rbx)
.261:
   mov      %r15, %rsp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFile
doFile:
   mov      InFile, %rdx
   cmp      %r12, %rdx
   jz       retNil
   mov      48(%rdx), %rbx
   cmp      %r12, %rbx
   jz       retNil
   mov      $47, %al
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %rbx, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   cld
   mov      %rbx, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %rbx
   cmovzq   %rcx, %rdx
   jnz      .264
.265:
   cld
   mov      %rbx, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %rbx
   cmovzq   %rcx, %rdx
   jz       .265
   push     %r15
   mov      %rbx, %r15
   sub      $1, %r15
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   mov      InFile, %r10
   mov      40(%r10), %rax
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   mov      InFile, %r10
   mov      48(%r10), %rbx
   call     mkStrEZ_A
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   jmp      .266
.264:
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   mov      InFile, %r10
   mov      40(%r10), %rax
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 8(%rdx)
   call     consC_A
   movq     $193250, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   call     consAC_E
   mov      %rax, (%rbx)
   mov      %rdx, 8(%rbx)
.266:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doDir
doDir:
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   cmp      $Nil, %rbx
   jnz      .267
   mov      %rdx, %r12
   mov      $_dot_, %rdi
   call     opendir
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .268
.267:
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     opendir
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
.268:
   cmp      %r12, %rax
   jz       doDir_10
   mov      %rax, %r15
.269:
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     readdir
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      .270
doDir_10:
   mov      $Nil, %rbx
   pop      %r15
   ret
.270:
   lea      19(%rax), %rbx
   mov      (%rbx), %al
   cmp      $46, %al
   jz       .269
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.271:
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     readdir
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .272
   lea      19(%rax), %rbx
   mov      (%rbx), %al
   cmp      $46, %al
   jz       .271
   call     mkStrE_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .271
.272:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     closedir
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %r15
   ret

   .balign  16
   nop
   nop
   .global  doCmd
doCmd:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   cmp      $Nil, %rbx
   jnz      .274
   mov      AV0, %rbx
   jmp      mkStrE_E
.274:
   push     %r15
   call     bufStringE_SZ
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %rsp, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   add      $1, %rdx
   mov      AV0, %rdi
   lea      (%rsp), %rsi
   mov      %rdx, %rcx
   cld
   rep movsb
   mov      %r15, %rsp
   pop      %r15
   ret

   .balign  16
   nop
   nop
   .global  doArgv
doArgv:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      AV, %r15
   mov      (%r15), %rbx
   cmp      %r12, %rbx
   jz       .275
   mov      (%rbx), %al
   cmp      $45, %al
   jnz      .275
   cmp      %r12b, 1(%rbx)
   jnz      .275
   add      $8, %r15
.275:
   cmp      $Nil, %r14
   jnz      .283
   mov      $Nil, %rbx
   cmp      %r12, (%r15)
   jz       doArgv_90
   mov      (%r15), %rbx
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.280:
   add      $8, %r15
   cmp      %r12, (%r15)
   jz       .281
   mov      (%r15), %rbx
   call     mkStrE_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .280
.281:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      doArgv_90
.283:
   testb    $0x0E, %r14b
   jnz      .284
   mov      (%r14), %rbx
   call     needVarEX
   mov      (%r15), %rbx
   cmp      %r12, %rbx
   jz       .285
   add      $8, %r15
.285:
   call     mkStrE_E
   mov      (%r14), %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r14
   cmp      $Nil, %r14
   jz       doArgv_90
   jmp      .283
.284:
   testb    $0x06, %r14b
   jnz      symErrYX
   call     checkVarYX
   mov      (%r15), %rbx
   cmp      %r12, %rbx
   jnz      .286
   mov      $Nil, %rbx
   mov      %rbx, (%r14)
   jmp      doArgv_90
.286:
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.288:
   add      $8, %r15
   cmp      %r12, (%r15)
   jz       .289
   mov      (%r15), %rbx
   call     mkStrE_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .288
.289:
   mov      8(%rbp), %rbx
   mov      %rbx, (%r14)
   mov      (%rbp), %rsp
   pop      %rbp
doArgv_90:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOpt
doOpt:
   mov      AV, %r10
   mov      (%r10), %rbx
   cmp      %r12, %rbx
   jz       retNil
   mov      (%rbx), %al
   cmp      $45, %al
   jnz      .290
   cmp      %r12b, 1(%rbx)
   jz       retNil
.290:
   addq     $8, AV
   jmp      mkStrE_E

   .balign  16
   .global  errno_A
errno_A:
   call     __errno_location
   mov      (%rax), %rax
   ret

   .balign  16
   .global  errnoC
errnoC:
   call     __errno_location
   mov      %rdx, (%rax)
   ret

   .balign  16
   .global  s_isdirS_F
s_isdirS_F:
   movslq   32(%rsp), %rax
   and      $61440, %rax
   cmp      $16384, %rax
   ret

   .balign  16
   .global  wifstoppedS_F
wifstoppedS_F:
   mov      8(%rsp), %rax
   cmp      $127, %al
   ret

   .balign  16
   .global  wifsignaledS_F
wifsignaledS_F:
   mov      8(%rsp), %rax
   and      $127, %al
   add      $1, %al
   shr      $1, %al
   ret

   .balign  16
   .global  wtermsigS_A
wtermsigS_A:
   mov      8(%rsp), %rax
   and      $127, %al
   movzx    %al, %rax
   ret

   .balign  16
   .global  markE
markE:
   mov      %r12, %r13
.292:
   testb    $0x02, %bl
   jnz      .297
   mov      %rbx, %rax
   andb     $~15, %al
   testb    $1, 8(%rax)
   jz       .297
   andb     $~1, 8(%rax)
   testb    $0x04, %bl
   jz       .294
   mov      8(%rax), %rdx
.295:
   testb    $0x02, %dl
   jnz      .297
   testb    $1, 4(%rdx)
   jz       .297
   andb     $~1, 4(%rdx)
   mov      4(%rdx), %rdx
   jmp      .295
.294:
   mov      %rbx, %rdx
   mov      (%rax), %rbx
   orb      $1, %r13b
   mov      %r13, (%rax)
   mov      %rdx, %r13
   jmp      .292
.297:
   mov      %r13, %rax
   and      $-16, %rax
   jz       ret
   testb    $1, (%rax)
   jnz      .298
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %rbx, 8(%rax)
   mov      %rdx, %rbx
   jmp      .297
.298:
   mov      (%rax), %rdx
   mov      %rbx, (%rax)
   mov      8(%rax), %rbx
   andb     $~1, %dl
   mov      %rdx, 8(%rax)
   jmp      .292

   .balign  16
   .global  needC
needC:
   mov      Avail, %rax
.299:
   cmp      %r12, %rax
   jz       gc
   mov      (%rax), %rax
   sub      $1, %rdx
   jnz      .299
   rep
   ret

   .balign  16
   .global  gc
gc:
   push     %rax
   push     %rdx
   push     %rbx
   push     %r13
   push     %r14
   push     %r15
   movq     $2, DB
   mov      $Nil, %r13
   orb      $1, (%r13)
   add      $32, %r13
.300:
   orb      $1, (%r13)
   add      $16, %r13
   cmp      $GcMarkEnd, %r13
   jbe      .300
   mov      Heaps, %r13
.301:
   mov      $65536, %rdx
.302:
   orb      $1, 8(%r13)
   add      $16, %r13
   sub      $1, %rdx
   jnz      .302
   mov      (%r13), %r13
   cmp      %r12, %r13
   jnz      .301
   mov      Alarm, %rbx
   call     markE
   mov      LineX, %rbx
   call     markE
   mov      Intern, %rbx
   call     markE
   mov      Intern+8, %rbx
   call     markE
   mov      Transient, %rbx
   call     markE
   mov      Transient+8, %rbx
   call     markE
   mov      %rbp, %r14
.303:
   cmp      %r12, %r14
   jz       .304
   mov      (%r14), %r15
.305:
   add      $8, %r14
   cmp      %r15, %r14
   jz       .306
   mov      (%r14), %rbx
   call     markE
   jmp      .305
.306:
   mov      (%r14), %r14
   jmp      .303
.304:
   mov      Catch, %r14
.307:
   cmp      %r12, %r14
   jz       .308
   mov      8(%r14), %rbx
   cmp      %r12, %rbx
   jz       .309
   call     markE
.309:
   mov      16(%r14), %rbx
   call     markE
   mov      (%r14), %r14
   jmp      .307
.308:
   mov      EnvMeth, %r14
.310:
   cmp      %r12, %r14
   jz       .311
   mov      8(%r14), %rbx
   call     markE
   mov      16(%r14), %rbx
   call     markE
   mov      (%r14), %r14
   jmp      .310
.311:
   mov      $Extern, %r14
   mov      %r12, %r15
.313:
   andb     $~1, 8(%r14)
   mov      8(%r14), %rax
   andb     $~1, 8(%rax)
   testb    $0x0E, 8(%rax)
   jnz      .315
   mov      %r14, %rdx
   mov      8(%rax), %r14
   mov      %r15, 8(%rax)
   mov      %rdx, %r15
   jmp      .313
.315:
   mov      (%r14), %rbx
   testb    $1, (%rbx)
   jz       .316
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      .317
   andb     $~9, %al
.318:
   mov      8(%rax), %rax
   andb     $~1, %al
   testb    $0x06, %al
   jz       .318
.317:
   rcl      $1, %rax
   jnc      .316
   call     markE
.316:
   mov      8(%r14), %rax
   testb    $0x0E, (%rax)
   jnz      .322
   mov      %r14, %rdx
   mov      (%rax), %r14
   mov      %r15, (%rax)
   orb      $8, %dl
   mov      %rdx, %r15
   jmp      .313
.322:
   mov      %r15, %rax
   cmp      %r12, %rax
   jz       gc_10
   testb    $0x08, %al
   jnz      .323
   mov      8(%rax), %rdx
   mov      8(%rdx), %r15
   mov      %r14, 8(%rdx)
   mov      %rax, %r14
   jmp      .315
.323:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r15
   mov      %r14, (%rdx)
   mov      %rax, %r14
   jmp      .322
gc_10:
   mov      $Db1, %rax
   mov      %rax, DB
   testb    $1, (%rax)
   jz       .325
   movq     $Nil, (%rax)
   movq     $26, -8(%rax)
.325:
   mov      $Extern, %r14
   mov      %r12, %r15
gc_20:
   mov      8(%r14), %rax
   testb    $0x0E, 8(%rax)
   jnz      .329
   mov      %r14, %rdx
   mov      8(%rax), %r14
   mov      %r15, 8(%rax)
   mov      %rdx, %r15
   jmp      gc_20
.329:
   mov      (%r14), %r11
   testb    $1, (%r11)
   jz       gc_30
   mov      8(%r14), %rax
   testb    $0x0E, %al
   jz       .331
   orb      $1, 8(%r14)
   mov      %rax, %r14
   jmp      gc_40
.331:
   testb    $0x0E, (%rax)
   jz       .332
   orb      $1, 8(%r14)
   mov      8(%rax), %r14
   jmp      gc_40
.332:
   testb    $0x0E, 8(%rax)
   jz       .333
   orb      $1, 8(%r14)
   mov      (%rax), %r14
   jmp      gc_20
.333:
   mov      8(%rax), %rax
   mov      8(%rax), %r13
   testb    $0x0E, (%r13)
   jz       .334
   mov      (%rax), %r10
   mov      %r10, (%r14)
   mov      8(%r14), %r11
   mov      8(%r13), %r10
   mov      %r10, 8(%r11)
   jmp      gc_30
.334:
   mov      (%r13), %r13
.335:
   mov      8(%r13), %rdx
   testb    $0x0E, (%rdx)
   jnz      .336
   mov      %r13, %rax
   mov      (%rdx), %r13
   jmp      .335
.336:
   mov      (%r13), %r10
   mov      %r10, (%r14)
   mov      8(%rax), %r11
   mov      8(%rdx), %r10
   mov      %r10, (%r11)
gc_30:
   mov      8(%r14), %rax
   testb    $0x0E, (%rax)
   jnz      gc_40
   mov      %r14, %rdx
   mov      (%rax), %r14
   mov      %r15, (%rax)
   orb      $8, %dl
   mov      %rdx, %r15
   jmp      gc_20
gc_40:
   mov      %r15, %rax
   cmp      %r12, %rax
   jz       gc_50
   testb    $0x08, %al
   jnz      .340
   mov      8(%rax), %rdx
   mov      8(%rdx), %r15
   mov      %r14, 8(%rdx)
   mov      %rax, %r14
   jmp      .329
.340:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r15
   mov      %r14, (%rdx)
   mov      %rax, %r14
   jmp      gc_40
gc_50:
   mov      EnvApply, %r14
.342:
   cmp      %r12, %r14
   jz       .343
   mov      (%r14), %r15
   add      $16, %r14
.344:
   andb     $~1, (%r14)
   add      $16, %r14
   cmp      %r15, %r14
   jc       .344
   mov      (%r15), %r14
   jmp      .342
.343:
   mov      %r12, %r13
   mov      Heaps, %r14
   mov      GcCount, %rdx
   cmp      %r12, %rdx
   jz       .345
.346:
   lea      1048560(%r14), %r15
.347:
   testb    $1, 8(%r15)
   jz       .348
   mov      %r13, (%r15)
   mov      %r15, %r13
   sub      $1, %rdx
.348:
   sub      $16, %r15
   cmp      %r14, %r15
   jnc      .347
   mov      1048576(%r14), %r14
   cmp      %r12, %r14
   jnz      .346
   mov      %r13, Avail
.349:
   cmp      %r12, %rdx
   js       .351
   call     heapAlloc
   sub      $65536, %rdx
   jmp      .349
.345:
   mov      $Heaps, %rbx
.352:
   mov      Avail, %rax
   mov      $65536, %rdx
   lea      1048560(%r14), %r15
.353:
   testb    $1, 8(%r15)
   jz       .354
   mov      %r13, (%r15)
   mov      %r15, %r13
   sub      $1, %rdx
.354:
   sub      $16, %r15
   cmp      %r14, %r15
   jnc      .353
   cmp      %r12, %rdx
   jz       .355
   lea      1048576(%r14), %rbx
   mov      (%rbx), %r14
   jmp      .356
.355:
   mov      %rax, Avail
   mov      1048576(%r14), %r14
   mov      %rdx, %r12
   mov      (%rbx), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r14, (%rbx)
.356:
   cmp      %r12, %r14
   jnz      .352
.351:
   pop      %r15
   pop      %r14
   pop      %r13
   pop      %rbx
   pop      %rdx
   pop      %rax
   ret

   .balign  16
   nop
   nop
   .global  doGc
doGc:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .357
   call     gc
   jmp      .358
.357:
   mov      %rbx, %r13
   call     xCntEX_FE
   shl      $16, %rbx
   mov      GcCount, %rdx
   mov      %rbx, GcCount
   call     gc
   mov      %rdx, GcCount
   mov      %r13, %rbx
.358:
   pop      %r13
   ret

   .balign  16
   .global  cons_A
cons_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .359
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.359:
   call     gc
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  cons_C
cons_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jz       .360
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.360:
   call     gc
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  cons_E
cons_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .361
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.361:
   call     gc
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  cons_X
cons_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .362
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.362:
   call     gc
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  cons_Y
cons_Y:
   mov      Avail, %r14
   cmp      %r12, %r14
   jz       .363
   mov      (%r14), %r10
   mov      %r10, Avail
   ret
.363:
   call     gc
   mov      Avail, %r14
   mov      (%r14), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  cons_Z
cons_Z:
   mov      Avail, %r15
   cmp      %r12, %r15
   jz       .364
   mov      (%r15), %r10
   mov      %r10, Avail
   ret
.364:
   call     gc
   mov      Avail, %r15
   mov      (%r15), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consA_A
consA_A:
   cmp      %r12, Avail
   jz       .365
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.365:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consC_A
consC_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .366
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.366:
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consE_A
consE_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .367
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.367:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consX_A
consX_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .368
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.368:
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consA_C
consA_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jz       .369
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.369:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consC_C
consC_C:
   cmp      %r12, Avail
   jz       .370
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.370:
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consE_C
consE_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jz       .371
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.371:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consA_E
consA_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .372
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.372:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consC_E
consC_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .373
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.373:
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consE_E
consE_E:
   cmp      %r12, Avail
   jz       .374
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.374:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consX_E
consX_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .375
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.375:
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consA_X
consA_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .376
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.376:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consE_X
consE_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .377
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.377:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consY_X
consY_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .378
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.378:
   push     %rbp
   mov      %rsp, %rbp
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consA_Y
consA_Y:
   mov      Avail, %r14
   cmp      %r12, %r14
   jz       .379
   mov      (%r14), %r10
   mov      %r10, Avail
   ret
.379:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r14
   mov      (%r14), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consA_Z
consA_Z:
   mov      Avail, %r15
   cmp      %r12, %r15
   jz       .380
   mov      (%r15), %r10
   mov      %r10, Avail
   ret
.380:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r15
   mov      (%r15), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consAC_E
consAC_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .381
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.381:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .global  consSymX_E
consSymX_E:
   cmp      $2, %r13
   jz       retNil
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .382
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
.382:
   mov      (%rbx), %r10
   mov      %r10, Avail
   mov      %r13, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
   ret

   .balign  16
   .global  boxNum_A
boxNum_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .383
   call     gc
   mov      Avail, %rax
.383:
   mov      (%rax), %r10
   mov      %r10, Avail
   movq     $2, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .global  boxNum_C
boxNum_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jnz      .384
   call     gc
   mov      Avail, %rdx
.384:
   mov      (%rdx), %r10
   mov      %r10, Avail
   movq     $2, 8(%rdx)
   orb      $4, %dl
   ret

   .balign  16
   .global  boxNum_E
boxNum_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .385
   call     gc
   mov      Avail, %rbx
.385:
   mov      (%rbx), %r10
   mov      %r10, Avail
   movq     $2, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .global  boxNum_X
boxNum_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jnz      .386
   call     gc
   mov      Avail, %r13
.386:
   mov      (%r13), %r10
   mov      %r10, Avail
   movq     $2, 8(%r13)
   orb      $4, %r13b
   ret

   .balign  16
   .global  boxNumA_A
boxNumA_A:
   push     %rax
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .387
   call     gc
   mov      Avail, %rax
.387:
   mov      (%rax), %r10
   mov      %r10, Avail
   popq     (%rax)
   movq     $2, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .global  boxNumE_E
boxNumE_E:
   push     %rbx
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .388
   call     gc
   mov      Avail, %rbx
.388:
   mov      (%rbx), %r10
   mov      %r10, Avail
   popq     (%rbx)
   movq     $2, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .global  consNumAC_A
consNumAC_A:
   push     %rax
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .389
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
.389:
   mov      (%rax), %r10
   mov      %r10, Avail
   popq     (%rax)
   mov      %rdx, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .global  consNumAE_A
consNumAE_A:
   push     %rax
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .390
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
.390:
   mov      (%rax), %r10
   mov      %r10, Avail
   popq     (%rax)
   mov      %rbx, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .global  consNumCA_C
consNumCA_C:
   push     %rdx
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jnz      .391
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
.391:
   mov      (%rdx), %r10
   mov      %r10, Avail
   popq     (%rdx)
   mov      %rax, 8(%rdx)
   orb      $4, %dl
   ret

   .balign  16
   .global  consNumCE_A
consNumCE_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .392
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
.392:
   mov      (%rax), %r10
   mov      %r10, Avail
   mov      %rdx, (%rax)
   mov      %rbx, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .global  consNumCE_C
consNumCE_C:
   push     %rdx
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jnz      .393
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
.393:
   mov      (%rdx), %r10
   mov      %r10, Avail
   popq     (%rdx)
   mov      %rbx, 8(%rdx)
   orb      $4, %dl
   ret

   .balign  16
   .global  consNumCE_E
consNumCE_E:
   cmp      %r12, Avail
   jnz      .394
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
.394:
   push     %rbx
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   mov      %rdx, (%rbx)
   popq     8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .global  consNumEA_A
consNumEA_A:
   cmp      %r12, Avail
   jnz      .395
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
.395:
   push     %rax
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   mov      %rbx, (%rax)
   popq     8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .global  consNumEA_E
consNumEA_E:
   push     %rbx
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .396
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
.396:
   mov      (%rbx), %r10
   mov      %r10, Avail
   popq     (%rbx)
   mov      %rax, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .global  consNumEC_E
consNumEC_E:
   push     %rbx
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .397
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
.397:
   mov      (%rbx), %r10
   mov      %r10, Avail
   popq     (%rbx)
   mov      %rdx, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .global  applyXYZ_E
applyXYZ_E:
   mov      (%r14), %rdx
.398:
   testb    $0x02, %dl
   jz       .399
   pushq    EnvApply
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %spl
   jz       .400
   pushq    $2
.400:
   pushq    $Nil
   push     %rdx
   mov      %rsp, %rbx
.401:
   cmp      %r15, %r14
   jz       .402
   sub      $8, %r14
   pushq    (%r14)
   pushq    $2
   pushq    $Nil
   lea      16(%rsp), %rax
   push     %rax
   mov      %rsp, 40(%rsp)
   jmp      .401
.402:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvApply
   call     *%rdx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvApply
   ret
.399:
   testb    $0x04, %dl
   jnz      undefinedCX
   testb    $0x0E, %dl
   jnz      .403
   push     %r13
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
.404:
   testb    $0x0E, %r13b
   jnz      .405
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .406
   sub      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%rbx)
   jmp      .404
.406:
   movq     $Nil, (%rbx)
   jmp      .404
.405:
   cmp      $Nil, %r13
   jnz      .408
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.409:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .409
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.408:
   cmp      $At, %r13
   jz       .410
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.411:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .411
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.410:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .412
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .413
.412:
   push     %rbp
   mov      %rsp, %rbp
.414:
   sub      $8, %r14
   pushq    (%r14)
   cmp      %r15, %r14
   jnz      .414
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.413:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .415
   mov      (%rbp), %rsp
   pop      %rbp
.415:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.416:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .416
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.403:
   mov      (%rdx), %rax
   cmp      $doMeth, %rax
   jnz      .417
   sub      $8, %r14
   mov      (%r14), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .418
   call     dbFetchEX
.418:
   push     %r13
   push     %r15
   push     %r14
   mov      %rdx, %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   xchg     8(%rsp), %r15
   xchg     (%rsp), %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
   pushq    This
   pushq    $This
   mov      (%r14), %r10
   mov      %r10, This
.419:
   testb    $0x0E, %r13b
   jnz      .420
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .421
   sub      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%rbx)
   jmp      .419
.421:
   movq     $Nil, (%rbx)
   jmp      .419
.420:
   cmp      $Nil, %r13
   jnz      .423
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.424:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .424
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.423:
   cmp      $At, %r13
   jz       .425
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.426:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .426
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.425:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .427
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .428
.427:
   push     %rbp
   mov      %rsp, %rbp
.429:
   sub      $8, %r14
   pushq    (%r14)
   cmp      %r15, %r14
   jnz      .429
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.428:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .430
   mov      (%rbp), %rsp
   pop      %rbp
.430:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.431:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .431
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.417:
   cmp      (%rax), %rax
   jnz      .432
   call     sharedLibC_FA
   jz       undefinedCX
.432:
   mov      %rax, %rdx
   jmp      .398

   .balign  16
   .global  applyVarXYZ_E
applyVarXYZ_E:
   mov      (%r14), %rdx
.433:
   testb    $0x02, %dl
   jz       .434
   pushq    EnvApply
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %spl
   jz       .435
   pushq    $2
.435:
   pushq    $Nil
   push     %rdx
   mov      %rsp, %rbx
.436:
   cmp      %r15, %r14
   jz       .437
   sub      $8, %r14
   mov      (%r14), %r10
   pushq    (%r10)
   pushq    $2
   pushq    $Nil
   lea      16(%rsp), %rax
   push     %rax
   mov      %rsp, 40(%rsp)
   jmp      .436
.437:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvApply
   call     *%rdx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvApply
   ret
.434:
   testb    $0x04, %dl
   jnz      undefinedCX
   testb    $0x0E, %dl
   jnz      .438
   push     %r13
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
.439:
   testb    $0x0E, %r13b
   jnz      .440
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .441
   sub      $8, %r14
   mov      (%r14), %r10
   mov      (%r10), %r10
   mov      %r10, (%rbx)
   jmp      .439
.441:
   movq     $Nil, (%rbx)
   jmp      .439
.440:
   cmp      $Nil, %r13
   jnz      .443
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.444:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .444
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.443:
   cmp      $At, %r13
   jz       .445
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.446:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .446
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.445:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .447
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .448
.447:
   push     %rbp
   mov      %rsp, %rbp
.449:
   sub      $8, %r14
   mov      (%r14), %r10
   pushq    (%r10)
   cmp      %r15, %r14
   jnz      .449
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.448:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .450
   mov      (%rbp), %rsp
   pop      %rbp
.450:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.451:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .451
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.438:
   mov      (%rdx), %rax
   cmp      $doMeth, %rax
   jnz      .452
   sub      $8, %r14
   mov      (%r14), %r10
   mov      (%r10), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .453
   call     dbFetchEX
.453:
   push     %r13
   push     %r15
   push     %r14
   mov      %rdx, %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   xchg     8(%rsp), %r15
   xchg     (%rsp), %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
   pushq    This
   pushq    $This
   mov      (%r14), %r10
   mov      (%r10), %r10
   mov      %r10, This
.454:
   testb    $0x0E, %r13b
   jnz      .455
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .456
   sub      $8, %r14
   mov      (%r14), %r10
   mov      (%r10), %r10
   mov      %r10, (%rbx)
   jmp      .454
.456:
   movq     $Nil, (%rbx)
   jmp      .454
.455:
   cmp      $Nil, %r13
   jnz      .458
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.459:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .459
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.458:
   cmp      $At, %r13
   jz       .460
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.461:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .461
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.460:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .462
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .463
.462:
   push     %rbp
   mov      %rsp, %rbp
.464:
   sub      $8, %r14
   mov      (%r14), %r10
   pushq    (%r10)
   cmp      %r15, %r14
   jnz      .464
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.463:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .465
   mov      (%rbp), %rsp
   pop      %rbp
.465:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.466:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .466
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.452:
   cmp      (%rax), %rax
   jnz      .467
   call     sharedLibC_FA
   jz       undefinedCX
.467:
   mov      %rax, %rdx
   jmp      .433

   .balign  16
   nop
   nop
   .global  doApply
doApply:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
   mov      8(%r15), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
.468:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jnz      .470
   push     %rbx
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   xchg     (%rsp), %rbx
   jmp      .468
.470:
   testb    $0x0E, %bl
   jnz      .471
   pushq    (%rbx)
   mov      8(%rbx), %rbx
   jmp      .470
.471:
   mov      %rsp, %r15
   push     %rbp
   mov      %rsp, %rbp
   call     applyXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPass
doPass:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.472:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jnz      .473
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .472
.473:
   mov      EnvNext, %rdx
.474:
   cmp      EnvArgs, %rdx
   jz       .475
   sub      $8, %rdx
   pushq    (%rdx)
   jmp      .474
.475:
   mov      %rsp, %r15
   push     %rbp
   mov      %rsp, %rbp
   call     applyXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMaps
doMaps:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
.476:
   testb    $0x0E, %r15b
   jnz      .477
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   jmp      .476
.477:
   push     %rbp
   mov      %rsp, %rbp
   mov      -8(%r14), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .478
   call     dbFetchEX
.478:
   mov      -8(%rbx), %rbx
   andb     $~8, %bl
   mov      %rbx, -8(%r14)
   mov      $Nil, %rbx
.479:
   testb    $0x0E, -8(%r14)
   jnz      .480
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   lea      8(%rbp), %r15
.481:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .481
   jmp      .479
.480:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMap
doMap:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.482:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .482
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.483:
   testb    $0x0E, -8(%r14)
   jnz      .484
   push     %r14
   lea      8(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   lea      8(%rbp), %r15
.485:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .485
   jmp      .483
.484:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMapc
doMapc:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.486:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .486
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.487:
   testb    $0x0E, -8(%r14)
   jnz      .488
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   lea      8(%rbp), %r15
.489:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .489
   jmp      .487
.488:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMaplist
doMaplist:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.490:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .490
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.491:
   testb    $0x0E, -8(%r14)
   jnz      .492
   push     %r14
   lea      16(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .493
   mov      %rdx, 8(%rbp)
   jmp      .494
.493:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.494:
   mov      %rdx, -8(%rbp)
   lea      16(%rbp), %r15
.495:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .495
   jmp      .491
.492:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMapcar
doMapcar:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.496:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .496
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.497:
   testb    $0x0E, -8(%r14)
   jnz      .498
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .499
   mov      %rdx, 8(%rbp)
   jmp      .500
.499:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.500:
   mov      %rdx, -8(%rbp)
   lea      16(%rbp), %r15
.501:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .501
   jmp      .497
.498:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMapcon
doMapcon:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.502:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .502
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.503:
   testb    $0x0E, -8(%r14)
   jnz      .504
   push     %r14
   lea      16(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   testb    $0x0E, %bl
   jnz      .505
   cmp      %r12, -8(%rbp)
   jnz      .506
   mov      %rbx, 8(%rbp)
   jmp      .507
.506:
   mov      -8(%rbp), %rax
.508:
   testb    $0x0E, 8(%rax)
   jnz      .509
   mov      8(%rax), %rax
   jmp      .508
.509:
   mov      %rbx, 8(%rax)
.507:
   mov      %rbx, -8(%rbp)
.505:
   lea      16(%rbp), %r15
.510:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .510
   jmp      .503
.504:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMapcan
doMapcan:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.511:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .511
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.512:
   testb    $0x0E, -8(%r14)
   jnz      .513
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   testb    $0x0E, %bl
   jnz      .514
   cmp      %r12, -8(%rbp)
   jnz      .515
   mov      %rbx, 8(%rbp)
   jmp      .516
.515:
   mov      -8(%rbp), %rax
.517:
   testb    $0x0E, 8(%rax)
   jnz      .518
   mov      8(%rax), %rax
   jmp      .517
.518:
   mov      %rbx, 8(%rax)
.516:
   mov      %rbx, -8(%rbp)
.514:
   lea      16(%rbp), %r15
.519:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .519
   jmp      .512
.513:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFilter
doFilter:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.520:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .520
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.521:
   testb    $0x0E, -8(%r14)
   jnz      .522
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .523
   call     consE_C
   mov      -8(%r14), %r10
   mov      (%r10), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .524
   mov      %rdx, 8(%rbp)
   jmp      .525
.524:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.525:
   mov      %rdx, -8(%rbp)
.523:
   lea      16(%rbp), %r15
.526:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .526
   jmp      .521
.522:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doExtract
doExtract:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.527:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .527
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.528:
   testb    $0x0E, -8(%r14)
   jnz      .529
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .530
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .531
   mov      %rdx, 8(%rbp)
   jmp      .532
.531:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.532:
   mov      %rdx, -8(%rbp)
.530:
   lea      16(%rbp), %r15
.533:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .533
   jmp      .528
.529:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSeek
doSeek:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.534:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .534
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.535:
   testb    $0x0E, -8(%r14)
   jnz      .536
   push     %r14
   lea      8(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .537
   mov      -8(%r14), %rbx
   jmp      .536
.537:
   lea      8(%rbp), %r15
.538:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .538
   jmp      .535
.536:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFind
doFind:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.539:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .539
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.540:
   testb    $0x0E, -8(%r14)
   jnz      .541
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .542
   mov      -8(%r14), %r10
   mov      (%r10), %rbx
   jmp      .541
.542:
   lea      8(%rbp), %r15
.543:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .543
   jmp      .540
.541:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPick
doPick:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.544:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .544
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.545:
   testb    $0x0E, -8(%r14)
   jnz      .546
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jnz      .546
   lea      8(%rbp), %r15
.547:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .547
   jmp      .545
.546:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCnt
doCnt:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.548:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .548
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
.549:
   testb    $0x0E, -8(%r14)
   jnz      .550
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .551
   addq     $16, (%rsp)
.551:
   lea      8(%rbp), %r15
.552:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .552
   jmp      .549
.550:
   pop      %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSum
doSum:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.553:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .553
   pushq    $2
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
.554:
   testb    $0x0E, -8(%r14)
   jnz      .555
   push     %r14
   lea      24(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   testb    $0x06, %bl
   jz       .556
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     addAE_A
   mov      %rax, 8(%rbp)
.556:
   lea      24(%rbp), %r15
.557:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .557
   jmp      .554
.555:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMaxi
doMaxi:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.558:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .558
   pushq    $Nil
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.559:
   testb    $0x0E, -8(%r14)
   jnz      .560
   push     %r14
   lea      24(%rbp), %r15
   call     applyVarXYZ_E
   mov      %rbx, %r14
   mov      16(%rbp), %rax
   call     compareAE_F
   jnc      .561
   mov      (%rsp), %r10
   mov      -8(%r10), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rbp)
   mov      %r14, 16(%rbp)
.561:
   pop      %r14
   lea      24(%rbp), %r15
.562:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .562
   jmp      .559
.560:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMini
doMini:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.563:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .563
   pushq    $TSym
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.564:
   testb    $0x0E, -8(%r14)
   jnz      .565
   push     %r14
   lea      24(%rbp), %r15
   call     applyVarXYZ_E
   mov      %rbx, %r14
   mov      16(%rbp), %rax
   call     compareAE_F
   jbe      .566
   mov      (%rsp), %r10
   mov      -8(%r10), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rbp)
   mov      %r14, 16(%rbp)
.566:
   pop      %r14
   lea      24(%rbp), %r15
.567:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .567
   jmp      .564
.565:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFish
doFish:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
   mov      8(%r15), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   pushq    $2
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %rax
   call     fishAXY
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  fishAXY
fishAXY:
   push     %rax
   push     %r14
   lea      24(%rbp), %r15
   mov      %rax, (%r15)
   call     applyXYZ_E
   pop      %r14
   pop      %rax
   cmp      $Nil, %rbx
   jz       .568
   call     cons_C
   mov      %rax, (%rdx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%rbp)
   ret
.568:
   testb    $0x0E, %al
   jnz      ret
   cmpq     $Nil, 8(%rax)
   jz       .569
   push     %rax
   mov      8(%rax), %rax
   call     fishAXY
   pop      %rax
.569:
   mov      (%rax), %rax
   jmp      fishAXY

   .balign  16
   nop
   nop
   .global  doBy
doBy:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   xchg     (%rsp), %rbx
   push     %rbx
   mov      %rsp, %r14
.570:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .570
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.571:
   testb    $0x0E, -8(%r14)
   jnz      .572
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   call     consE_C
   mov      %rbx, (%rdx)
   mov      -8(%r14), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rdx)
   call     consC_A
   mov      %rdx, (%rax)
   movq     $Nil, 8(%rax)
   cmp      %r12, -8(%rbp)
   jnz      .573
   mov      %rax, 8(%rbp)
   jmp      .574
.573:
   mov      -8(%rbp), %r11
   mov      %rax, 8(%r11)
.574:
   mov      %rax, -8(%rbp)
   lea      16(%rbp), %r15
.575:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .575
   jmp      .571
.572:
   mov      %r14, %r15
   add      $8, %r14
   mov      8(%rbp), %r10
   mov      %r10, (%r15)
   call     applyXYZ_E
   mov      %rbx, %rdx
.576:
   testb    $0x0E, %dl
   jnz      .577
   mov      (%rdx), %r10
   mov      8(%r10), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %rdx
   jmp      .576
.577:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .global  redefMsgEC
redefMsgEC:
   pushq    OutFile
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   pushq    EnvPutB
   movq     $putStdoutB, EnvPutB
   push     %rdx
   mov      $HashBlank, %rdx
   call     outStringC
   call     printE
   pop      %rbx
   cmp      %r12, %rbx
   jz       .578
   call     space
   call     printE_E
.578:
   mov      $Redefined, %rdx
   call     outStringC
   popq     EnvPutB
   popq     OutFile
   ret
HashBlank:
   .string  "# "
Redefined:
   .string  " redefined\n"

   .global  putSrcEC_E
putSrcEC_E:
   cmpq     $Nil, Dbg
   jz       .579
   testb    $0x08, -8(%rbx)
   jnz      .579
   mov      InFile, %rax
   cmp      %r12, %rax
   jz       .579
   cmp      %r12, 48(%rax)
   jz       .579
   push     %r13
   push     %rbx
   push     %rdx
   mov      $Dbg, %rdx
   call     getEC_E
   mov      %rbx, %r13
   mov      InFile, %r10
   mov      48(%r10), %rbx
   call     mkStrE_E
   mov      InFile, %r10
   mov      40(%r10), %rax
   shl      $4, %rax
   orb      $2, %al
   push     %rbx
   call     consE_E
   mov      %rax, (%rbx)
   popq     8(%rbx)
   mov      (%rsp), %rax
   cmp      %r12, %rax
   jnz      .583
   cmp      $Nil, %r13
   jnz      .584
   push     %rbx
   call     consE_E
   popq     (%rbx)
   movq     $Nil, 8(%rbx)
   mov      8(%rsp), %rax
   mov      $Dbg, %rdx
   call     putACE
   jmp      .586
.584:
   mov      %rbx, (%r13)
   jmp      .586
.583:
   cmp      $Nil, %r13
   jnz      .587
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   call     consC_E
   movq     $Nil, (%rbx)
   mov      %rdx, 8(%rbx)
   mov      8(%rsp), %rax
   mov      $Dbg, %rdx
   call     putACE
   jmp      .586
.587:
   mov      8(%r13), %rdx
.589:
   testb    $0x0E, %dl
   jz       .590
   call     consE_C
   mov      (%rsp), %r10
   mov      %r10, (%rdx)
   mov      %rbx, 8(%rdx)
   call     consC_A
   mov      %rdx, (%rax)
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r13)
   jmp      .586
.590:
   mov      (%rdx), %r11
   mov      (%rsp), %r10
   cmp      %r10, (%r11)
   jnz      .592
   mov      (%rdx), %r11
   mov      %rbx, 8(%r11)
   jmp      .586
.592:
   mov      8(%rdx), %rdx
   jmp      .589
.586:
   pop      %rdx
   pop      %rbx
   pop      %r13
.579:
   rep
   ret

   .balign  16
   .global  redefineCEX
redefineCEX:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   call     checkVarEX
   mov      (%rbx), %rax
   cmp      $Nil, %rax
   jz       .593
   cmp      %rbx, %rax
   jz       .593
   push     %rdx
   push     %rbx
   mov      %rdx, %rbx
   call     equalAE_F
   jz       .595
   mov      (%rsp), %rbx
   mov      %r12, %rdx
   call     redefMsgEC
.595:
   pop      %rbx
   pop      %rdx
.593:
   mov      %rdx, (%rbx)
   mov      %r12, %rdx
   call     putSrcEC_E
   ret

   .balign  16
   nop
   nop
   .global  doQuote
doQuote:
   mov      8(%rbx), %rbx
   ret

   .balign  16
   nop
   nop
   .global  doAs
doAs:
   mov      8(%rbx), %rbx
   push     %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   cmp      $Nil, %rbx
   jz       retNil
   mov      8(%rax), %rbx
   ret

   .balign  16
   nop
   nop
   .global  doPid
doPid:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      Pid, %rax
   testb    $0x0E, %bl
   jz       .597
   cmp      %rax, %rbx
   pop      %rbx
   jnz      retNil
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret
.597:
   cmp      %rax, (%rbx)
   jnz      .598
   pop      %rbx
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret
.598:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .597
   pop      %rax
   ret

   .balign  16
   nop
   nop
   .global  doLit
doLit:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .599
   cmp      $Nil, %rbx
   jz       .599
   cmp      $TSym, %rbx
   jz       .599
   testb    $0x0E, %bl
   jnz      doLit_10
   testb    $0x06, (%rbx)
   jnz      .599
doLit_10:
   mov      %rbx, %rax
   call     consE_E
   movq     $Quote, (%rbx)
   mov      %rax, 8(%rbx)
.599:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doEval
doEval:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .603
doEval_10:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.603:
   cmp      %r12, EnvBind
   jz       doEval_10
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   shr      $4, %rbx
   push     %rbx
   push     %r12
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %r14
   mov      -8(%rbp), %rdx
   mov      EnvBind, %r14
.604:
   mov      (%r14), %rax
   addq     $1, -16(%rbp)
   mov      -8(%rbp), %r10
   sub      %r10, -8(%r14)
   jnc      .605
   add      $8, %r14
.606:
   mov      (%r14), %r13
   mov      (%r13), %r10
   xchg     %r10, 8(%r14)
   mov      %r10, (%r13)
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .606
   cmp      $At, %r13
   jnz      .605
   sub      $1, %rdx
   jz       .608
.605:
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .604
.608:
   testb    $0x0E, %bl
   jz       .609
   mov      8(%rbp), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .610
.609:
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
.611:
   mov      (%rbx), %r13
   pushq    (%r13)
   push     %r13
   mov      -16(%rbp), %rdx
   mov      EnvBind, %r14
.612:
   mov      (%r14), %rax
   add      $8, %r14
.613:
   cmp      (%r14), %r13
   jnz      .614
   mov      8(%r14), %r10
   mov      %r10, (%r13)
   jmp      doEval_20
.614:
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .613
   sub      $1, %rdx
   jz       doEval_20
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .612
doEval_20:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .611
   mov      (%rbp), %r10
   mov      8(%r10), %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   pop      %rbp
.616:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .616
   pop      %rbp
   popq     EnvBind
.610:
   mov      -16(%rbp), %rdx
.617:
   mov      %rdx, %rax
   mov      EnvBind, %r14
.618:
   sub      $1, %rax
   jz       .619
   mov      (%r14), %r10
   mov      8(%r10), %r14
   jmp      .618
.619:
   mov      (%r14), %rax
   mov      -8(%rbp), %r10
   add      %r10, -8(%r14)
   jnz      .620
   sub      $16, %rax
.621:
   mov      (%rax), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%rax)
   mov      %r10, (%r11)
   sub      $16, %rax
   cmp      %r14, %rax
   jnc      .621
.620:
   sub      $1, %rdx
   jnz      .617
   pop      %r14
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doRun
doRun:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .622
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .623
doRun_10:
   testb    $0x08, %bl
   jz       .624
   mov      (%rbx), %rbx
   jmp      .625
.624:
   call     runE_E
.625:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.623:
   cmp      %r12, EnvBind
   jz       doRun_10
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   shr      $4, %rbx
   push     %rbx
   push     %r12
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %r14
   mov      -8(%rbp), %rdx
   mov      EnvBind, %r14
.626:
   mov      (%r14), %rax
   addq     $1, -16(%rbp)
   mov      -8(%rbp), %r10
   sub      %r10, -8(%r14)
   jnc      .627
   add      $8, %r14
.628:
   mov      (%r14), %r13
   mov      (%r13), %r10
   xchg     %r10, 8(%r14)
   mov      %r10, (%r13)
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .628
   cmp      $At, %r13
   jnz      .627
   sub      $1, %rdx
   jz       .630
.627:
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .626
.630:
   testb    $0x0E, %bl
   jz       .631
   mov      8(%rbp), %r13
   testb    $0x08, %r13b
   jz       .632
   mov      (%r13), %rbx
   jmp      .634
.632:
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   jmp      .634
.631:
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
.635:
   mov      (%rbx), %r13
   pushq    (%r13)
   push     %r13
   mov      -16(%rbp), %rdx
   mov      EnvBind, %r14
.636:
   mov      (%r14), %rax
   add      $8, %r14
.637:
   cmp      (%r14), %r13
   jnz      .638
   mov      8(%r14), %r10
   mov      %r10, (%r13)
   jmp      doRun_20
.638:
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .637
   sub      $1, %rdx
   jz       doRun_20
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .636
doRun_20:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .635
   mov      (%rbp), %r10
   mov      8(%r10), %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   testb    $0x08, %r13b
   jz       .640
   mov      (%r13), %rbx
   jmp      .641
.640:
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
.641:
   pop      %rax
   pop      %rbp
.642:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .642
   pop      %rbp
   popq     EnvBind
.634:
   mov      -16(%rbp), %rdx
.643:
   mov      %rdx, %rax
   mov      EnvBind, %r14
.644:
   sub      $1, %rax
   jz       .645
   mov      (%r14), %r10
   mov      8(%r10), %r14
   jmp      .644
.645:
   mov      (%r14), %rax
   mov      -8(%rbp), %r10
   add      %r10, -8(%r14)
   jnz      .646
   sub      $16, %rax
.647:
   mov      (%rax), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%rax)
   mov      %r10, (%r11)
   sub      $16, %rax
   cmp      %r14, %rax
   jnc      .647
.646:
   sub      $1, %rdx
   jnz      .643
   pop      %r14
   mov      (%rbp), %rsp
   pop      %rbp
.622:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDef
doDef:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needSymEX
   testb    $0x08, -8(%rbx)
   jz       .648
   call     dbTouchEX
.648:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .649
   mov      16(%rbp), %rdx
   mov      (%rdx), %rax
   cmp      $Nil, %rax
   jz       .650
   cmp      %rdx, %rax
   jz       .650
   call     equalAE_F
   jz       .650
   mov      %rdx, %rbx
   mov      %r12, %rdx
   call     redefMsgEC
.650:
   mov      16(%rbp), %rbx
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   mov      %r12, %rdx
   call     putSrcEC_E
   jmp      .653
.649:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      24(%rbp), %rbx
   testb    $0x08, -8(%rbx)
   jz       .654
   call     dbTouchEX
.654:
   mov      16(%rbp), %rdx
   call     getEC_E
   cmp      $Nil, %rbx
   jz       .655
   mov      8(%rbp), %rax
   call     equalAE_F
   jz       .655
   mov      24(%rbp), %rbx
   mov      16(%rbp), %rdx
   call     redefMsgEC
.655:
   mov      24(%rbp), %rax
   mov      16(%rbp), %rdx
   mov      8(%rbp), %rbx
   call     putACE
   mov      24(%rbp), %rbx
   mov      16(%rbp), %rdx
   call     putSrcEC_E
.653:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDe
doDe:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   mov      8(%r13), %rdx
   call     redefineCEX
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDm
doDm:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   testb    $0x0E, %bl
   jz       .657
   mov      Class, %rdx
   jmp      .658
.657:
   mov      8(%rbx), %rdx
   testb    $0x0E, %dl
   jnz      .659
   mov      8(%rdx), %rbx
   cmp      $Nil, %rbx
   jnz      .660
   mov      Class, %rbx
.660:
   mov      (%rdx), %rdx
   call     getEC_E
   mov      %rbx, %rdx
   mov      (%r14), %rbx
.659:
   mov      (%rbx), %rbx
.658:
   cmp      $TSym, %rbx
   jz       .661
   push     %rdx
   mov      $doMeth, %rdx
   call     redefineCEX
   pop      %rdx
.661:
   mov      8(%r14), %rax
   testb    $0x06, %al
   jnz      .662
   testb    $0x08, %al
   jz       .662
   mov      (%rax), %rax
.664:
   testb    $0x0E, %al
   jnz      msgErrAX
   testb    $0x0E, (%rax)
   jnz      msgErrAX
   mov      (%rax), %r10
   cmp      (%r10), %rbx
   jnz      .665
   mov      (%rax), %r14
   jmp      .662
.665:
   mov      8(%rax), %rax
   jmp      .664
.662:
   mov      (%rdx), %r13
.667:
   testb    $0x0E, %r13b
   jnz      .668
   testb    $0x0E, (%r13)
   jnz      .668
   mov      (%r13), %r10
   cmp      (%r10), %rbx
   jnz      .669
   push     %rbx
   mov      (%r13), %r10
   mov      8(%r10), %rbx
   mov      8(%r14), %rax
   call     equalAE_F
   jz       .670
   mov      (%rsp), %rbx
   push     %rdx
   call     redefMsgEC
   pop      %rdx
.670:
   pop      %rbx
   mov      (%r13), %r11
   mov      8(%r14), %r10
   mov      %r10, 8(%r11)
   call     putSrcEC_E
   pop      %r14
   pop      %r13
   ret
.669:
   mov      8(%r13), %r13
   jmp      .667
.668:
   testb    $0x0E, (%r14)
   jz       .671
   call     cons_A
   mov      %r14, (%rax)
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
   jmp      .672
.671:
   call     cons_A
   mov      %rbx, (%rax)
   mov      8(%r14), %r10
   mov      %r10, 8(%rax)
   push     %rax
   call     consA_A
   popq     (%rax)
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
.672:
   mov      %rax, (%rdx)
   call     putSrcEC_E
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  evMethodACXYZ_E
evMethodACXYZ_E:
   push     %r15
   push     %r14
   pushq    EnvMeth
   mov      (%rdx), %r14
   mov      8(%rdx), %r15
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
   push     %rax
   pushq    $This
.673:
   testb    $0x0E, %r14b
   jnz      .674
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    (%r14)
   mov      8(%r14), %r14
   jmp      .673
.674:
   cmp      $Nil, %r14
   jnz      .675
   mov      %rsp, %r14
.676:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .676
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%rbp), %r10
   lea      16(%r10), %r11
   mov      %r11, EnvMeth
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.677:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .677
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   ret
.675:
   cmp      $At, %r14
   jz       .678
   pushq    (%r14)
   push     %r14
   mov      %r13, (%r14)
   lea      16(%rsp), %r14
.679:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .679
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%rbp), %r10
   lea      16(%r10), %r11
   mov      %r11, EnvMeth
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.680:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .680
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   ret
.678:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, %r14
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   testb    $0x0E, %r13b
   jz       .681
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .682
.681:
   push     %rbp
   mov      %rsp, %rbp
.683:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .683
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.682:
   mov      %r14, EnvBind
   mov      (%r14), %r10
   lea      16(%r10), %r11
   mov      %r11, EnvMeth
   mov      (%r14), %rdx
   add      $8, %r14
.684:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .684
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .685
   mov      (%rbp), %rsp
   pop      %rbp
.685:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.686:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .686
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   ret

   .balign  16
   .global  methodEY_FCYZ
methodEY_FCYZ:
   mov      (%rbx), %rax
   testb    $0x0E, %al
   jnz      .687
   mov      (%rax), %rdx
   testb    $0x0E, %dl
   jnz      .693
   cmp      (%rdx), %r14
   jnz      .690
   mov      8(%rdx), %rdx
   ret
.690:
   mov      %rax, %rdx
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jnz      ret
   testb    $0x0E, (%rax)
   jnz      .693
   mov      (%rax), %r10
   cmp      (%r10), %r14
   jnz      .690
   mov      8(%rax), %r10
   mov      %r10, 8(%rdx)
   mov      (%rbx), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%rbx)
   mov      (%rax), %r10
   mov      8(%r10), %rdx
   ret
.693:
   mov      %rax, %r15
   mov      (%rax), %rbx
   push     %rax
   call     methodEY_FCYZ
   pop      %rax
   jz       ret
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .693
.687:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doBox
doBox:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   movq     $2, (%rax)
   orb      $8, %al
   mov      %rbx, (%rax)
   mov      %rax, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doNew
doNew:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .694
   call     consE_A
   movq     $2, (%rax)
   orb      $8, %al
   mov      %rbx, (%rax)
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   jmp      .695
.694:
   cmp      $Nil, %rbx
   jnz      .696
   call     cons_E
   movq     $2, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   jmp      .697
.696:
   testb    $0x02, %bl
   mov      $18, %r10
   cmovzq   %r10, %rbx
   shr      $4, %rbx
   call     newIdEX_X
   call     externX_E
   mov      -8(%rbx), %rax
   shl      $1, %rax
   stc
   rcr      $1, %rax
   mov      %rax, -8(%rbx)
.697:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %rax
   mov      %rbx, (%rax)
.695:
   mov      8(%r14), %r13
   mov      %rax, %rbx
   mov      $TSym, %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      .700
   mov      16(%rbp), %rax
   call     evMethodACXYZ_E
   jmp      .699
.700:
   testb    $0x0E, %r13b
   jnz      .699
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %rax
   mov      8(%rbp), %rdx
   call     putACE
   mov      8(%r13), %r13
   jmp      .700
.699:
   mov      16(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doType
doType:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .702
   testb    $0x08, %bl
   jz       .702
   testb    $0x08, -8(%rbx)
   jz       .704
   call     dbFetchEX
.704:
   pop      %r13
   mov      (%rbx), %rbx
   mov      %rbx, %rdx
.705:
   testb    $0x0E, %bl
   jnz      retNil
   testb    $0x0E, (%rbx)
   jz       .706
   mov      %rbx, %rax
.707:
   testb    $0x06, (%rax)
   jnz      retNil
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .708
   cmp      $Nil, %rax
   jnz      retNil
   rep
   ret
.708:
   cmp      %rax, %rdx
   jz       retNil
   jmp      .707
.706:
   mov      8(%rbx), %rbx
   cmp      %rbx, %rdx
   jz       retNil
   jmp      .705
.702:
   pop      %r13
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doIsa
doIsa:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .709
   testb    $0x08, %bl
   jz       .709
   testb    $0x08, -8(%rbx)
   jz       .711
   call     dbFetchEX
.711:
   mov      8(%rbp), %rdx
   testb    $0x0E, %dl
   jz       .712
   call     isaCE_F
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   jmp      .713
.712:
   mov      %rdx, %r14
.714:
   mov      (%r14), %rdx
   call     isaCE_F
   jz       .715
   mov      $Nil, %rbx
   jmp      .713
.715:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .714
.713:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.709:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
isaCE_F:
   mov      (%rbx), %r13
   mov      %r13, %rax
.717:
   testb    $0x0E, %r13b
   jnz      ret
   testb    $0x0E, (%r13)
   jz       .718
.719:
   testb    $0x06, (%r13)
   jnz      ret
   mov      (%r13), %r10
   testb    $0x08, -8(%r10)
   jnz      ret
   cmp      (%r13), %rdx
   jz       ret
   push     %rax
   push     %rbx
   push     %r13
   mov      (%r13), %rbx
   call     isaCE_F
   pop      %r13
   pop      %rbx
   pop      %rax
   jz       ret
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      ret
   cmp      %r13, %rax
   jz       retnz
   testb    $0x0E, (%r13)
   jz       retnz
   jmp      .719
.718:
   mov      8(%r13), %r13
   cmp      %r13, %rax
   jz       retnz
   jmp      .717

   .balign  16
   nop
   nop
   .global  doMethod
doMethod:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .720
   call     dbFetchEX
.720:
   mov      8(%rbp), %r14
   call     methodEY_FCYZ
   mov      %rdx, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMeth
doMeth:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, -8(%rbx)
   jz       .721
   call     dbFetchEX
.721:
   pushq    8(%r14)
   mov      (%r13), %r14
.722:
   testb    $0x06, %r14b
   jnz      msgErrYX
   testb    $0x08, %r14b
   jz       msgErrYX
   testb    $0x02, (%r14)
   jz       .723
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   mov      8(%rbp), %rax
   pop      %r13
   call     evMethodACXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.723:
   mov      (%r14), %r14
   jmp      .722

   .balign  16
   nop
   nop
   .global  doSend
doSend:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .724
   call     dbFetchEX
.724:
   mov      8(%r14), %r13
   mov      16(%rbp), %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   mov      8(%rbp), %rax
   call     evMethodACXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doTry
doTry:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jnz      doTry_90
   testb    $0x08, %bl
   jz       doTry_90
   testb    $0x08, -8(%rbx)
   jz       .725
   call     isLifeE_F
   jnz      doTry_90
   call     dbFetchEX
.725:
   mov      8(%r14), %r13
   mov      16(%rbp), %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      doTry_90
   mov      8(%rbp), %rax
   call     evMethodACXYZ_E
   jmp      .727
doTry_90:
   mov      $Nil, %rbx
.727:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSuper
doSuper:
   push     %r13
   push     %r14
   push     %r15
   push     %rbx
   mov      EnvMeth, %rax
   mov      8(%rax), %r14
   mov      16(%rax), %r13
   cmp      $Nil, %r13
   cmovnzq  (%r13), %r13
   cmovzq   This, %r13
   mov      (%r13), %r13
.728:
   testb    $0x0E, (%r13)
   jnz      .730
   mov      8(%r13), %r13
   jmp      .728
.730:
   testb    $0x0E, %r13b
   jnz      .731
   mov      (%r13), %rbx
   mov      %r13, %r15
   call     methodEY_FCYZ
   jnz      .732
   pop      %rbx
   push     %r15
   push     %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   call     evExprCE_E
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.732:
   mov      8(%r13), %r13
   jmp      .730
.731:
   mov      %r14, %rbx
   pop      %r13
   mov      $SuperErr, %r14
   jmp      errEXYZ
SuperErr:
   .string  "Bad super"

   .balign  16
   nop
   nop
   .global  doExtra
doExtra:
   push     %r13
   push     %r14
   push     %r15
   push     %rbx
   mov      EnvMeth, %r10
   mov      8(%r10), %r14
   mov      This, %r13
   call     extraXY_FCYZ
   jnz      .733
   pop      %rbx
   push     %r15
   push     %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   call     evExprCE_E
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.733:
   mov      %r14, %rbx
   pop      %r13
   mov      $ExtraErr, %r14
   jmp      errEXYZ
ExtraErr:
   .string  "Bad extra"

   .balign  16
   .global  extraXY_FCYZ
extraXY_FCYZ:
   mov      (%r13), %r13
.734:
   testb    $0x0E, (%r13)
   jnz      .736
   mov      8(%r13), %r13
   jmp      .734
.736:
   testb    $0x0E, %r13b
   jnz      .737
   mov      EnvMeth, %r10
   cmp      16(%r10), %r13
   jnz      .738
extraXY_FCYZ_10:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .740
   mov      (%r13), %rbx
   mov      %r13, %r15
   call     methodEY_FCYZ
   jnz      extraXY_FCYZ_10
.740:
   rep
   ret
.738:
   push     %r13
   mov      (%r13), %r13
   call     extraXY_FCYZ
   pop      %r13
   jz       ret
   ja       extraXY_FCYZ_10
   mov      8(%r13), %r13
   jmp      .736
.737:
   stc
   ret

   .balign  16
   nop
   nop
   .global  doWith
doWith:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .741
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    This
   pushq    $This
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      %rbx, This
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rax
   pop      %rax
   popq     This
   pop      %rbp
   popq     EnvBind
.741:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doBind
doBind:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      argErrEX
   mov      8(%r13), %r13
   cmp      $Nil, %rbx
   jnz      .742
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.742:
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %bl
   jz       .744
   pushq    (%rbx)
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.744:
   mov      (%rbx), %rax
   testb    $0x06, %al
   jnz      argErrAX
   mov      (%rax), %rdx
   testb    $0x08, %al
   jz       .745
   push     %rdx
   push     %rax
   jmp      .746
.745:
   pushq    (%rdx)
   push     %rdx
   mov      8(%rax), %r10
   mov      %r10, (%rdx)
.746:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .744
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
.747:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .747
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doJob
doJob:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .748
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %rax
.749:
   mov      (%rax), %rdx
   mov      (%rdx), %r10
   pushq    (%r10)
   pushq    (%rdx)
   mov      (%rdx), %r11
   mov      8(%rdx), %r10
   mov      %r10, (%r11)
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .749
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
.748:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rdx
   pop      %rbp
   cmp      $Nil, %rdx
   jz       .750
   pop      %rax
   mov      (%rbp), %r10
   lea      -16(%r10), %r13
.751:
   mov      (%r13), %rax
   mov      (%rdx), %r11
   mov      (%rax), %r10
   mov      %r10, 8(%r11)
   mov      8(%r13), %r10
   mov      %r10, (%rax)
   mov      8(%rdx), %rdx
   sub      $16, %r13
   cmp      %rbp, %r13
   jnc      .751
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvBind
.750:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLet
doLet:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %r14b
   jz       .753
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r14)
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret
.753:
   mov      (%r14), %rax
   pushq    (%rax)
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%r14), %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r10
   mov      8(%r10), %r14
   testb    $0x0E, %r14b
   jnz      .754
   pop      %rax
   pop      %rbp
   jmp      .753
.754:
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
.755:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .755
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLetQ
doLetQ:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .756
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      %rbx, (%r14)
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
.756:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doUse
doUse:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %r14b
   jz       .758
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret
.758:
   mov      (%r14), %rax
   pushq    (%rax)
   push     %rax
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .758
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
.759:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .759
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doAnd
doAnd:
   push     %r13
   mov      8(%rbx), %r13
.760:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .761
   mov      %rbx, At
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .760
.761:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOr
doOr:
   push     %r13
   mov      8(%rbx), %r13
.762:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .763
   mov      %rbx, At
   pop      %r13
   ret
.763:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .762
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doNand
doNand:
   push     %r13
   mov      8(%rbx), %r13
.764:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .765
   mov      $TSym, %rbx
   pop      %r13
   ret
.765:
   mov      %rbx, At
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .764
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doNor
doNor:
   push     %r13
   mov      8(%rbx), %r13
.766:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .767
   mov      %rbx, At
   mov      $Nil, %rbx
   pop      %r13
   ret
.767:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .766
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doXor
doXor:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .768
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $TSym, %r10
   cmovnzq  %r10, %rbx
   ret
.768:
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doBool
doBool:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $TSym, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doNot
doNot:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doNil
doNil:
   push     %r13
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doT
doT:
   push     %r13
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doProg
doProg:
   push     %r13
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doProg1
doProg1:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doProg2
doProg2:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doIf
doIf:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .769
   mov      %rbx, At
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret
.769:
   xchg     (%rsp), %r13
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doIf2
doIf2:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .770
   xchg     (%rsp), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .771
   mov      8(%r13), %r10
   mov      8(%r10), %r10
   mov      8(%r10), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.771:
   mov      %rbx, At
   mov      8(%r13), %r10
   mov      8(%r10), %r10
   mov      8(%r10), %r13
   mov      (%r13), %rbx
   pop      %r13
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret
.770:
   mov      %rbx, At
   xchg     (%rsp), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .772
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   mov      (%r13), %rbx
   pop      %r13
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret
.772:
   mov      %rbx, At
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   pop      %r13
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret

   .balign  16
   nop
   nop
   .global  doIfn
doIfn:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .773
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret
.773:
   mov      %rbx, At
   xchg     (%rsp), %r13
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doWhen
doWhen:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .774
   pop      %rax
   ret
.774:
   mov      %rbx, At
   xchg     (%rsp), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doUnless
doUnless:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .775
   mov      %rbx, At
   pop      %rax
   mov      $Nil, %rbx
   ret
.775:
   xchg     (%rsp), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCond
doCond:
   push     %r13
   mov      %rbx, %r13
.776:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .777
   mov      (%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .776
   mov      %rbx, At
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.777:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doNond
doNond:
   push     %r13
   mov      %rbx, %r13
.779:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .780
   mov      (%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .781
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.781:
   mov      %rbx, At
   jmp      .779
.780:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCase
doCase:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
.782:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .783
   mov      (%r13), %r10
   mov      (%r10), %rdx
   cmp      $TSym, %rdx
   jz       doCase_10
   mov      At, %rax
   mov      %rdx, %rbx
   call     equalAE_F
   jnz      .784
doCase_10:
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.784:
   testb    $0x0E, %dl
   jnz      .782
.786:
   mov      At, %rax
   mov      (%rdx), %rbx
   call     equalAE_F
   jnz      .787
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.787:
   mov      8(%rdx), %rdx
   testb    $0x0E, %dl
   jz       .786
   jmp      .782
.783:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doState
doState:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     needVarEX
.788:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .789
   mov      (%r14), %r10
   mov      (%r10), %r13
   mov      (%r13), %rbx
   cmp      $TSym, %rbx
   jz       doState_10
   mov      8(%rbp), %r10
   mov      (%r10), %rax
   cmp      %rbx, %rax
   jz       doState_10
.790:
   testb    $0x0E, %bl
   jnz      .791
   cmp      (%rbx), %rax
   jz       .791
   mov      8(%rbx), %rbx
   jmp      .790
.791:
   jnz      .788
doState_10:
   mov      8(%r13), %r13
   mov      8(%r13), %r15
   testb    $0x0E, %r15b
   jnz      doState_20
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      $Nil, %rbx
   jz       .788
   mov      %rbx, At
doState_20:
   mov      8(%rbp), %r11
   mov      (%r13), %r10
   mov      %r10, (%r11)
   mov      (%rbp), %rsp
   pop      %rbp
   mov      (%r14), %r10
   mov      8(%r10), %r13
   pop      %r15
   pop      %r14
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.789:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doWhile
doWhile:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.794:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .795
   mov      %rbx, At
   mov      8(%r13), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      %rbx, 8(%rbp)
   jmp      .794
.795:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doUntil
doUntil:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.796:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .797
   mov      8(%r13), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      %rbx, 8(%rbp)
   jmp      .796
.797:
   mov      %rbx, At
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doAt
doAt:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      cellErrEX
   mov      (%rbx), %rax
   testb    $0x02, %al
   jz       cntErrAX
   mov      8(%rbx), %rdx
   testb    $0x02, %dl
   jz       cntErrCX
   add      $16, %rax
   cmp      %rdx, %rax
   jnc      .798
   mov      %rax, (%rbx)
   mov      $Nil, %rbx
   jmp      .799
.798:
   movq     $2, (%rbx)
   mov      8(%r14), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
.799:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDo
doDo:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .800
   testb    $0x02, %bl
   jz       loopX
   shr      $4, %rbx
   jbe      .801
   push     %rbx
.802:
   mov      %r13, %r14
   call     loopY_FE
   jz       .803
   subq     $1, (%rsp)
   jnz      .802
.803:
   pop      %rax
   jmp      .800
.801:
   mov      $Nil, %rbx
.800:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLoop
doLoop:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
loopX:
   mov      %r13, %r14
.806:
   mov      (%r14), %rbx
   testb    $0x0E, %bl
   jnz      .807
   mov      (%rbx), %rax
   cmp      $Nil, %rax
   jnz      .808
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .809
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.809:
   mov      %rbx, At
   jmp      .807
.808:
   cmp      $TSym, %rax
   jnz      .811
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .807
   mov      %rbx, At
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.811:
   call     evListE_E
.807:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .806
   jmp      loopX

   .balign  16
   nop
   nop
   .global  doFor
doFor:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %r14b
   jz       .814
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
.815:
   mov      8(%rbp), %rax
   testb    $0x0E, %al
   jnz      .816
   mov      8(%rax), %r10
   mov      %r10, 8(%rbp)
   mov      40(%rbp), %r11
   mov      (%rax), %r10
   mov      %r10, (%r11)
   mov      %r13, %r14
   call     loopY_FE
   jnz      .815
.816:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   jmp      .817
.814:
   mov      8(%r14), %r15
   testb    $0x0E, %r15b
   jz       .818
   pushq    (%r15)
   push     %r15
   mov      (%r14), %r15
   pushq    (%r15)
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   movq     $2, (%r15)
   mov      8(%r13), %r13
.819:
   mov      8(%rbp), %rax
   testb    $0x0E, %al
   jnz      .820
   mov      8(%rax), %r10
   mov      %r10, 8(%rbp)
   mov      56(%rbp), %r11
   mov      (%rax), %r10
   mov      %r10, (%r11)
   mov      40(%rbp), %r11
   addq     $16, (%r11)
   mov      %r13, %r14
   call     loopY_FE
   jnz      .819
.820:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   jmp      .817
.818:
   mov      (%r14), %r15
   mov      8(%r14), %r14
   testb    $0x0E, %r15b
   jz       .822
   pushq    (%r15)
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   pushq    8(%r14)
.823:
   mov      (%rsp), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .824
   mov      8(%rbp), %rbx
   jmp      .825
.824:
   mov      %rbx, At
   mov      %r13, %r14
   call     loopY_FE
   jz       .825
   mov      %rbx, 8(%rbp)
   mov      (%rsp), %r10
   mov      8(%r10), %r14
   testb    $0x0E, %r14b
   jnz      .823
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      40(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      .823
.825:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   jmp      .817
.822:
   mov      8(%r15), %rdx
   pushq    (%rdx)
   push     %rdx
   mov      (%r15), %rdx
   pushq    (%rdx)
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r15), %r11
   mov      %rbx, (%r11)
   mov      (%r15), %r11
   movq     $2, (%r11)
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   pushq    8(%r14)
.828:
   mov      (%rsp), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .829
   mov      8(%rbp), %rbx
   jmp      .830
.829:
   mov      %rbx, At
   mov      40(%rbp), %r11
   addq     $16, (%r11)
   mov      %r13, %r14
   call     loopY_FE
   jz       .830
   mov      %rbx, 8(%rbp)
   mov      (%rsp), %r10
   mov      8(%r10), %r14
   testb    $0x0E, %r14b
   jnz      .828
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      56(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      .828
.830:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
.817:
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  loopY_FE
loopY_FE:
.832:
   mov      (%r14), %rbx
   testb    $0x06, %bl
   jnz      .833
   testb    $0x08, %bl
   jz       .834
   mov      (%rbx), %rbx
   jmp      .833
.834:
   mov      (%rbx), %rax
   cmp      $Nil, %rax
   jnz      .836
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .837
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   or       %r12, %r12
   ret
.837:
   mov      %rbx, At
   mov      $Nil, %rbx
   jmp      .833
.836:
   cmp      $TSym, %rax
   jnz      .839
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .833
   mov      %rbx, At
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   or       %r12, %r12
   ret
.839:
   call     evListE_E
.833:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .832
   rep
   ret

   .balign  16
   nop
   nop
   .global  doCatch
doCatch:
   push     %r13
   push     %r14
   push     %r15
   push     %rbp
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   sub      $(EnvEnd-Env), %rsp
   lea      (%rsp), %rdi
   lea      Env, %rsi
   mov      $(EnvEnd-Env), %rcx
   cld
   rep movsb
   pushq    $2
   push     %rbx
   pushq    Catch
   mov      %rsp, Catch
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
caught:
   popq     Catch
   add      $8+8+(EnvEnd-Env), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doThrow
doThrow:
   mov      %rbx, %r13
   mov      8(%r13), %r14
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r15
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      Catch, %rdx
.842:
   cmp      %r12, %rdx
   jz       throwErrZX
   cmpq     $TSym, 8(%rdx)
   jz       .843
   cmp      8(%rdx), %r15
   jz       .843
   mov      (%rdx), %rdx
   jmp      .842
.843:
   push     %rbx
   call     unwindC_Z
   pop      %rbx
   mov      %r15, %rsp
   jmp      caught

   .global  throwErrZX
throwErrZX:
   mov      %r15, %rbx
   mov      $ThrowErr, %r14
   jmp      errEXYZ
ThrowErr:
   .string  "Tag not found"

   .balign  16
   nop
   nop
   .global  doFinally
doFinally:
   push     %r13
   sub      $(EnvEnd-Env), %rsp
   lea      (%rsp), %rdi
   lea      Env, %rsi
   mov      $(EnvEnd-Env), %rcx
   cld
   rep movsb
   mov      8(%rbx), %r13
   pushq    (%r13)
   mov      8(%r13), %r13
   push     %r12
   pushq    Catch
   mov      %rsp, Catch
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      40(%rsp), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Catch
   add      $8+8+(EnvEnd-Env), %rsp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doBreak
doBreak:
   mov      8(%rbx), %rbx
   cmpq     $Nil, Dbg
   jz       .844
   call     brkLoadE_E
.844:
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   movq     (%rbx), %rbx
   ret

   .global  brkLoadE_E
brkLoadE_E:
   cmp      %r12, EnvBrk
   jnz      .845
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .845
   mov      %rdx, %r12
   mov      $1, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .845
   push     %r13
   push     %r14
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    Up
   pushq    $Up
   mov      %rbx, Up
   pushq    Run
   pushq    $Run
   movq     $Nil, Run
   pushq    At
   pushq    $At
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   mov      %rbp, EnvBrk
   push     %r12
   sub      $32, %rsp
   mov      %rsp, %r14
   movq     $1, 8(%r14)
   mov      %r12, 16(%r14)
   call     pushOutFilesY
   call     printE
   call     newline
   mov      $33, %al
   mov      $Nil, %rbx
   mov      %r12, %r13
   call     loadBEX_E
   call     popOutFiles
   add      $56, %rsp
   popq     At
   pop      %rax
   popq     Run
   pop      %rax
   mov      Up, %rbx
   popq     Up
   pop      %rbp
   popq     EnvBind
   mov      %r12, EnvBrk
   pop      %r14
   pop      %r13
.845:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doE
doE:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   cmp      %r12, EnvBrk
   jz       brkErrX
   push     %rbp
   mov      %rsp, %rbp
   pushq    Dbg
   pushq    At
   pushq    Run
   push     %rbp
   mov      %rsp, %rbp
   movq     $Nil, Dbg
   mov      EnvBrk, %rdx
   mov      16(%rdx), %r10
   mov      %r10, At
   mov      32(%rdx), %r10
   mov      %r10, Run
   call     popOutFiles
   mov      EnvInFrames, %r14
   call     popInFiles
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .848
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   jmp      .849
.848:
   mov      Up, %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.849:
   call     pushInFilesY
   mov      EnvBrk, %r10
   lea      -40(%r10), %r14
   call     pushOutFilesY
   pop      %rbp
   popq     Run
   popq     At
   popq     Dbg
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doTrace
doTrace:
   push     %r13
   mov      8(%rbx), %r13
   cmpq     $Nil, Dbg
   jnz      .850
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   jmp      .851
.850:
   push     %r14
   push     %r15
   pushq    OutFile
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   pushq    EnvPutB
   movq     $putStdoutB, EnvPutB
   mov      (%r13), %r14
   mov      8(%r13), %r13
   mov      8(%r13), %r15
   addq     $1, EnvTrace
   mov      EnvTrace, %rdx
   call     traceCY
   mov      $trc1, %rdx
   call     outStringC
   mov      (%r13), %r13
.852:
   testb    $0x0E, %r13b
   jnz      .853
   call     space
   mov      (%r13), %rbx
   mov      (%rbx), %rbx
   call     printE
   mov      8(%r13), %r13
   jmp      .852
.853:
   cmp      $Nil, %r13
   jz       .854
   cmp      $At, %r13
   jz       .855
   call     space
   mov      (%r13), %rbx
   call     printE
   jmp      .854
.855:
   mov      EnvNext, %r13
.857:
   cmp      EnvArgs, %r13
   jz       .854
   call     space
   sub      $8, %r13
   mov      (%r13), %rbx
   call     printE
   jmp      .857
.854:
   call     newline
   mov      (%rsp), %r10
   mov      %r10, EnvPutB
   mov      8(%rsp), %r10
   mov      %r10, OutFile
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   movq     $putStdoutB, EnvPutB
   mov      EnvTrace, %rdx
   subq     $1, EnvTrace
   call     traceCY
   mov      $trc2, %rdx
   call     outStringC
   call     printE_E
   call     newline
   popq     EnvPutB
   popq     OutFile
   pop      %r15
   pop      %r14
.851:
   pop      %r13
   ret
trc1:
   .string  " :"
trc2:
   .string  " = "

   .global  traceCY
traceCY:
   cmp      $64, %rdx
   jbe      .860
   mov      $64, %rdx
.860:
   call     space
   sub      $1, %rdx
   jg       .860
   push     %rbx
   testb    $0x0E, %r14b
   jz       .861
   mov      %r14, %rbx
   call     printE
   jmp      .862
.861:
   mov      (%r14), %rbx
   call     printE
   call     space
   mov      8(%r14), %rbx
   call     printE
   call     space
   mov      This, %rbx
   call     printE
.862:
   pop      %rbx
   ret

   .balign  16
   nop
   nop
   .global  doSys
doSys:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   call     evSymX_E
   call     bufStringE_SZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .863
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     getenv
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %rbx
   call     mkStrE_E
   jmp      .864
.863:
   push     %r15
   call     evSymX_E
   lea      8(%rsp), %r13
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %r13, %rdi
   mov      %rsp, %rsi
   mov      $1, %rdx
   call     setenv
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      %r15, %rsp
   pop      %r15
.864:
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCall
doCall:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   push     %rbx
   push     %r12
   call     evSymX_E
   call     pathStringE_SZ
.865:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .866
   push     %r15
   call     evSymX_E
   call     bufStringE_SZ
   jmp      .865
.866:
   push     %r15
   mov      %rsp, %r15
   mov      %r15, %r13
   push     %r12
.867:
   lea      8(%r13), %rax
   push     %rax
   mov      (%r13), %r13
   cmp      %r12, (%r13)
   jnz      .867
   mov      8(%r13), %r13
   call     flushAll
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .868
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      (%rsp), %rdi
   mov      %rsp, %rsi
   call     execvp
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      execErrS
.868:
   js       forkErrX
.869:
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .869
   mov      %rax, %r15
   mov      %rdx, %r12
   mov      %r15, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, Termio
   jz       .872
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      %r15, %rsi
   call     tcsetpgrp
   mov      %r12, %rdx
   xor      %r12, %r12
.872:
   mov      %rdx, %r12
   mov      %r15, %rdi
   mov      %rsp, %rsi
   mov      $2, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .873
   call     errno_A
   cmp      $4, %rax
   jnz      waitPidErrX
   cmp      %r12b, Signal
   jz       .872
   call     sighandlerX
   jmp      .872
.873:
   cmp      %r12, Termio
   jz       .875
   mov      %rdx, %r12
   call     getpgrp
   xor      %rdi, %rdi
   mov      %rax, %rsi
   call     tcsetpgrp
   mov      %r12, %rdx
   xor      %r12, %r12
.875:
   call     wifstoppedS_F
   jz       .876
   movslq   (%rsp), %rax
   or       %rax, %rax
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   pop      %r13
   pop      %r15
   pop      %r13
   ret
.876:
   mov      $43, %al
   mov      $Nil, %rbx
   call     loadBEX_E
   cmp      %r12, Termio
   jz       .877
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      %r15, %rsi
   call     tcsetpgrp
   mov      %r12, %rdx
   xor      %r12, %r12
.877:
   mov      %rdx, %r12
   mov      %r15, %rdi
   mov      $18, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .872

   .balign  16
   nop
   nop
   .global  doTick
doTick:
   push     %r13
   pushq    TickU
   pushq    TickS
   mov      %rdx, %r12
   mov      $Tms, %rdi
   call     times
   mov      %r12, %rdx
   xor      %r12, %r12
   pushq    Tms+0
   pushq    Tms+8
   mov      8(%rbx), %rbx
   pushq    (%rbx)
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   mov      %rdx, %r12
   mov      $Tms, %rdi
   call     times
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Tms+0, %rax
   sub      8(%rsp), %rax
   sub      TickU, %rax
   add      24(%rsp), %rax
   add      %rax, TickU
   shl      $4, %rax
   add      %rax, (%r13)
   mov      Tms+8, %rax
   sub      (%rsp), %rax
   sub      TickS, %rax
   add      16(%rsp), %rax
   add      %rax, TickS
   shl      $4, %rax
   add      %rax, 8(%r13)
   add      $32, %rsp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doIpid
doIpid:
   mov      EnvInFrames, %rdx
   cmp      %r12, %rdx
   jz       .878
   mov      16(%rdx), %rbx
   cmp      $1, %rbx
   jbe      .878
   shl      $4, %rbx
   orb      $2, %bl
   ret
.878:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doOpid
doOpid:
   mov      EnvOutFrames, %rdx
   cmp      %r12, %rdx
   jz       .880
   mov      16(%rdx), %rbx
   cmp      $1, %rbx
   jbe      .880
   shl      $4, %rbx
   orb      $2, %bl
   ret
.880:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doKill
doKill:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .882
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $15, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .883
.882:
   push     %rbx
   call     evCntXY_FE
   mov      %rdx, %r12
   pop      %rdi
   mov      %rbx, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
.883:
   cmp      %r12d, %eax
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFork
doFork:
   push     %r13
   mov      %rbx, %r13
   call     forkLispX_FE
   jnc      .884
   mov      $Nil, %rbx
   jmp      .885
.884:
   shl      $4, %rbx
   orb      $2, %bl
.885:
   pop      %r13
   ret

   .balign  16
   .global  forkLispX_FE
forkLispX_FE:
   call     flushAll
   cmp      %r12, Spkr
   jnz      .886
   mov      %rdx, %r12
   mov      $SpMiPipe, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movslq   SpMiPipe, %rax
   mov      %rax, Spkr
   call     closeOnExecAX
   movslq   SpMiPipe+4, %rax
   call     closeOnExecAX
.886:
   push     %rax
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   mov      %rdx, %r12
   lea      8(%rsp), %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movslq   (%rsp), %rax
   call     closeOnExecAX
   movslq   4(%rsp), %rax
   call     closeOnExecAX
   movslq   8(%rsp), %rax
   call     closeOnExecAX
   movslq   12(%rsp), %rax
   call     closeOnExecAX
   mov      %r12, %rdx
   mov      Child, %rax
.887:
   cmp      Children, %rdx
   jz       .888
   cmp      %r12, (%rax)
   jz       .888
   add      $48, %rax
   add      $48, %rdx
   jmp      .887
.888:
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       forkErrX
   jnz      .889
   mov      %rdx, Slot
   mov      %r12, Spkr
   movslq   SpMiPipe+4, %rax
   mov      %rax, Mic
   movslq   4(%rsp), %rax
   call     closeAX
   movslq   8(%rsp), %rax
   call     closeAX
   movslq   SpMiPipe, %rax
   call     closeAX
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .890
   call     closeAX
   mov      Hear, %rax
   call     closeInFileA
   mov      Hear, %rax
   call     closeOutFileA
.890:
   movslq   (%rsp), %rax
   mov      %rax, Hear
   call     initInFileA_A
   mov      Tell, %rax
   cmp      %r12, %rax
   jz       .891
   call     closeAX
.891:
   movslq   12(%rsp), %rax
   mov      %rax, Tell
   mov      Child, %rbx
   mov      Children, %rdx
.892:
   sub      $48, %rdx
   jc       .893
   cmp      %r12, (%rbx)
   jz       .894
   mov      %rdx, %r12
   mov      8(%rbx), %rdi
   call     close
   mov      16(%rbx), %rdi
   call     close
   mov      40(%rbx), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.894:
   add      $48, %rbx
   jmp      .892
.893:
   mov      %r12, Children
   mov      %rdx, %r12
   mov      Child, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Child
   mov      EnvInFrames, %rax
.895:
   cmp      %r12, %rax
   jz       .896
   mov      %r12, 16(%rax)
   mov      (%rax), %rax
   jmp      .895
.896:
   mov      EnvOutFrames, %rax
.897:
   cmp      %r12, %rax
   jz       .898
   mov      %r12, 16(%rax)
   mov      (%rax), %rax
   jmp      .897
.898:
   mov      Catch, %rax
.899:
   cmp      %r12, %rax
   jz       .900
   movq     $2, 16(%rax)
   mov      (%rax), %rax
   jmp      .899
.900:
   mov      %rdx, %r12
   mov      Termio, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Termio
   mov      Pid, %r10
   mov      %r10, PPid
   mov      %rdx, %r12
   call     getpid
   mov      %r12, %rdx
   xor      %r12, %r12
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, Pid
   mov      Fork, %rbx
   call     execE
   movq     $Nil, Fork
   pop      %rax
   pop      %rax
   stc
   ret
.889:
   cmp      Children, %rdx
   cmovnzq  %rax, %rbx
   jnz      .901
   push     %rax
   mov      Child, %rax
   mov      %rdx, %rbx
   add      $384, %rbx
   mov      %rbx, Children
   call     allocAE_A
   mov      %rax, Child
   add      %rbx, %rax
   mov      $8, %rbx
.902:
   sub      $48, %rax
   mov      %r12, (%rax)
   sub      $1, %rbx
   jnz      .902
   pop      %rbx
.901:
   add      Child, %rdx
   mov      %rbx, (%rdx)
   movslq   (%rsp), %rax
   call     closeAX
   movslq   4(%rsp), %rax
   mov      %rax, 16(%rdx)
   call     nonblockingA_A
   movslq   8(%rsp), %rax
   mov      %rax, 8(%rdx)
   movslq   12(%rsp), %rax
   call     closeAX
   mov      %r12, 24(%rdx)
   mov      %r12, 32(%rdx)
   mov      %r12, 40(%rdx)
   pop      %rax
   pop      %rax
   clc
   ret

   .balign  16
   nop
   nop
   .global  doBye
doBye:
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .903
   mov      %r12, %rbx
   jmp      byeE
.903:
   call     xCntEX_FE
   jmp      byeE

   .balign  16
   .global  cmpLongAX_F
cmpLongAX_F:
   push     %r13
.905:
   mov      -4(%r13), %r10
   cmp      %r10, -4(%rax)
   jz       .906
   pop      %r13
   ret
.906:
   mov      4(%rax), %rax
   mov      4(%r13), %r13
   testb    $0x04, %al
   jnz      .907
   testb    $0x04, %r13b
   jz       .908
   stc
   pop      %r13
   ret
.908:
   cmp      %r13, %rax
   pop      %r13
   ret
.907:
   testb    $0x02, %r13b
   jz       .905
   clc
   pop      %r13
   ret

   .balign  16
   .global  isInternEXY_F
isInternEXY_F:
   testb    $0x02, %r13b
   jz       .909
   mov      (%r14), %r14
.910:
   testb    $0x0E, %r14b
   jnz      ret
   mov      (%r14), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   cmp      %r13, %rax
   jz       .911
   mov      8(%r14), %r14
   cmovcq   8(%r14), %r14
   cmovncq  (%r14), %r14
   jmp      .910
.911:
   cmp      (%r14), %rbx
   ret
.909:
   mov      8(%r14), %r14
.912:
   testb    $0x0E, %r14b
   jnz      ret
   mov      (%r14), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   call     cmpLongAX_F
   jz       .913
   mov      8(%r14), %r14
   cmovcq   8(%r14), %r14
   cmovncq  (%r14), %r14
   jmp      .912
.913:
   cmp      (%r14), %rbx
   ret

   .balign  16
   .global  internEXY_FE
internEXY_FE:
   testb    $0x02, %r13b
   jz       .914
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jz       .917
   cmp      %r12, %rbx
   jnz      .916
   call     consSymX_E
.916:
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, (%r14)
   stc
   ret
.917:
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   cmp      %r13, %rax
   jnz      .918
   mov      (%rdx), %rbx
   clc
   ret
.918:
   jnc      .919
   testb    $0x0E, 8(%rdx)
   jz       .920
   cmp      %r12, %rbx
   jnz      .921
   call     consSymX_E
.921:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   movq     $Nil, (%r13)
   mov      %rax, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.920:
   mov      8(%rdx), %rdx
   testb    $0x0E, 8(%rdx)
   cmovzq   8(%rdx), %rdx
   jz       .917
   cmp      %r12, %rbx
   jnz      .923
   call     consSymX_E
.923:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   stc
   ret
.919:
   testb    $0x0E, 8(%rdx)
   jz       .925
   cmp      %r12, %rbx
   jnz      .926
   call     consSymX_E
.926:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.925:
   mov      8(%rdx), %rdx
   testb    $0x0E, (%rdx)
   cmovzq   (%rdx), %rdx
   jz       .917
   cmp      %r12, %rbx
   jnz      .928
   call     consSymX_E
.928:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%rdx)
   stc
   ret
.914:
   mov      8(%r14), %rdx
   testb    $0x0E, %dl
   jz       .931
   cmp      %r12, %rbx
   jnz      .930
   call     consSymX_E
.930:
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, 8(%r14)
   stc
   ret
.931:
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   call     cmpLongAX_F
   jnz      .932
   mov      (%rdx), %rbx
   clc
   ret
.932:
   jnc      .933
   testb    $0x0E, 8(%rdx)
   jz       .934
   cmp      %r12, %rbx
   jnz      .935
   call     consSymX_E
.935:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   movq     $Nil, (%r13)
   mov      %rax, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.934:
   mov      8(%rdx), %rdx
   testb    $0x0E, 8(%rdx)
   cmovzq   8(%rdx), %rdx
   jz       .931
   cmp      %r12, %rbx
   jnz      .937
   call     consSymX_E
.937:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   stc
   ret
.933:
   testb    $0x0E, 8(%rdx)
   jz       .939
   cmp      %r12, %rbx
   jnz      .940
   call     consSymX_E
.940:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.939:
   mov      8(%rdx), %rdx
   testb    $0x0E, (%rdx)
   cmovzq   (%rdx), %rdx
   jz       .931
   cmp      %r12, %rbx
   jnz      .942
   call     consSymX_E
.942:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%rdx)
   stc
   ret

   .balign  16
   .global  externX_E
externX_E:
   mov      $3, %rdx
   call     needC
   push     %r13
   mov      $6364136223846793005, %rax
   mulq     %r13
   mov      %rax, %rbx
   mov      $Extern, %r13
.943:
   mov      (%r13), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   mov      $4611686018427387895, %r10
   and      %r10, %rax
   mov      $6364136223846793005, %r10
   mul      %r10
   cmp      %rbx, %rax
   jnz      .944
   pop      %rax
   mov      (%r13), %rbx
   ret
.944:
   jnc      .945
   testb    $0x0E, 8(%r13)
   jz       .946
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   movq     $Nil, (%rdx)
   mov      %rax, 8(%rdx)
   mov      %rdx, 8(%r13)
   ret
.946:
   mov      8(%r13), %r13
   testb    $0x0E, 8(%r13)
   cmovzq   8(%r13), %r13
   jz       .943
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   ret
.945:
   testb    $0x0E, 8(%r13)
   jz       .949
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   ret
.949:
   mov      8(%r13), %r13
   testb    $0x0E, (%r13)
   cmovzq   (%r13), %r13
   jz       .943
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%r13)
   ret

   .balign  16
   .global  uninternXY
uninternXY:
   cmp      $2, %r13
   jz       ret
   testb    $0x02, %r13b
   jz       .951
.952:
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jnz      ret
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   cmp      %r13, %rax
   jnz      .953
   mov      8(%rdx), %rax
   testb    $0x0E, (%rax)
   jz       .954
   mov      8(%rax), %r10
   mov      %r10, (%r14)
   ret
.954:
   testb    $0x0E, 8(%rax)
   jz       .955
   mov      (%rax), %r10
   mov      %r10, (%r14)
   ret
.955:
   mov      8(%rax), %rax
   mov      8(%rax), %r14
   testb    $0x0E, (%r14)
   jz       .956
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %r11
   mov      8(%r14), %r10
   mov      %r10, 8(%r11)
   ret
.956:
   mov      (%r14), %r14
.957:
   mov      8(%r14), %r13
   testb    $0x0E, (%r13)
   jnz      .958
   mov      %r14, %rax
   mov      (%r13), %r14
   jmp      .957
.958:
   mov      (%r14), %r10
   mov      %r10, (%rdx)
   mov      8(%rax), %r11
   mov      8(%r13), %r10
   mov      %r10, (%r11)
   ret
.953:
   mov      8(%rdx), %rdx
   jnc      .959
   testb    $0x0E, %dl
   jnz      ret
   lea      8(%rdx), %r14
   jmp      .952
.959:
   testb    $0x0E, %dl
   jnz      ret
   mov      %rdx, %r14
   jmp      .952
.951:
   lea      8(%r14), %r14
.961:
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jnz      ret
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   call     cmpLongAX_F
   jnz      .962
   mov      8(%rdx), %rax
   testb    $0x0E, (%rax)
   jz       .963
   mov      8(%rax), %r10
   mov      %r10, (%r14)
   ret
.963:
   testb    $0x0E, 8(%rax)
   jz       .964
   mov      (%rax), %r10
   mov      %r10, (%r14)
   ret
.964:
   mov      8(%rax), %rax
   mov      8(%rax), %r14
   testb    $0x0E, (%r14)
   jz       .965
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %r11
   mov      8(%r14), %r10
   mov      %r10, 8(%r11)
   ret
.965:
   mov      (%r14), %r14
.966:
   mov      8(%r14), %r13
   testb    $0x0E, (%r13)
   jz       .967
   mov      %r14, %rax
   mov      (%r13), %r14
   jmp      .966
.967:
   mov      (%r14), %r10
   mov      %r10, (%rdx)
   mov      8(%rax), %r11
   mov      8(%r13), %r10
   mov      %r10, (%r11)
   ret
.962:
   mov      8(%rdx), %rdx
   jnc      .968
   testb    $0x0E, %dl
   jnz      ret
   lea      8(%rdx), %r14
   jmp      .961
.968:
   testb    $0x0E, %dl
   jnz      ret
   mov      %rdx, %r14
   jmp      .961

   .balign  16
   .global  nameA_A
nameA_A:
   andb     $~8, %al
.970:
   testb    $0x06, %al
   jnz      ret
   mov      8(%rax), %rax
   jmp      .970

   .balign  16
   .global  nameE_E
nameE_E:
   andb     $~8, %bl
.971:
   testb    $0x06, %bl
   jnz      ret
   mov      8(%rbx), %rbx
   jmp      .971

   .balign  16
   .global  nameX_X
nameX_X:
   andb     $~8, %r13b
.972:
   testb    $0x06, %r13b
   jnz      ret
   mov      8(%r13), %r13
   jmp      .972

   .balign  16
   .global  nameY_Y
nameY_Y:
   andb     $~8, %r14b
.973:
   testb    $0x06, %r14b
   jnz      ret
   mov      8(%r14), %r14
   jmp      .973

   .balign  16
   nop
   nop
   .global  doName
doName:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .974
   cmp      $Nil, %rbx
   jz       .978
   mov      -8(%rbx), %r13
   testb    $0x08, %r13b
   jnz      .976
   call     nameX_X
   call     consSymX_E
   jmp      .978
.976:
   call     nameX_X
   call     packExtNmX_E
   jmp      .978
.974:
   cmp      $Nil, %rbx
   jz       renErrEX
   testb    $0x08, -8(%rbx)
   jnz      renErrEX
   push     %r13
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Intern, %r14
   call     isInternEXY_F
   pop      %r14
   pop      %r13
   jz       renErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      8(%rbp), %rbx
   lea      -8(%rbx), %r14
.979:
   testb    $0x06, (%r14)
   jnz      .980
   mov      (%r14), %r10
   lea      8(%r10), %r14
   jmp      .979
.980:
   mov      %r13, (%r14)
   mov      (%rbp), %rsp
   pop      %rbp
.978:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  mkCharA_A
mkCharA_A:
   cmp      $128, %rax
   jc       .981
   cmp      $2048, %rax
   jnc      .982
   mov      %al, Buf
   shr      $6, %rax
   and      $31, %al
   orb      $192, %al
   xchg     Buf, %al
   and      $63, %rax
   orb      $128, %al
   shl      $8, %rax
   mov      Buf, %al
   jmp      .981
.982:
   cmp      $65536, %rax
   jnz      .984
   mov      $255, %al
   movzx    %al, %rax
   jmp      .981
.984:
   push     %rdx
   mov      %rax, %rdx
   shr      $12, %rax
   and      $15, %al
   orb      $224, %al
   mov      %al, Buf
   mov      %rdx, %rax
   shr      $6, %rax
   and      $63, %rax
   orb      $128, %al
   shl      $8, %rax
   xchg     %rdx, %rax
   and      $63, %rax
   orb      $128, %al
   shl      $16, %rax
   or       %rdx, %rax
   mov      Buf, %al
   pop      %rdx
.981:
   shl      $4, %rax
   orb      $2, %al
   push     %rax
   call     cons_A
   popq     (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   ret

   .balign  16
   .global  mkStrE_E
mkStrE_E:
   cmp      %r12, %rbx
   jz       retNil
   cmp      %r12b, (%rbx)
   jz       retNil
   push     %rdx
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.986:
   mov      (%rbx), %al
   call     byteSymBCX_CX
   add      $1, %rbx
   cmp      %r12b, (%rbx)
   jnz      .986
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   pop      %rdx
   ret

   .balign  16
   .global  mkStrEZ_A
mkStrEZ_A:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.987:
   mov      (%rbx), %al
   call     byteSymBCX_CX
   cmp      %r15, %rbx
   jz       .988
   add      $1, %rbx
   cmp      %r12b, (%rbx)
   jnz      .987
.988:
   call     cons_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .global  firstByteA_B
firstByteA_B:
   call     nameA_A
   testb    $0x02, %al
   jz       .989
   shr      $4, %rax
   jmp      .990
.989:
   mov      -4(%rax), %rax
.990:
   rep
   ret

   .balign  16
   .global  firstCharE_A
firstCharE_A:
   mov      %r12, %rax
   cmp      $Nil, %rbx
   jz       .991
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
   call     symCharCX_FACX
   pop      %r13
.991:
   rep
   ret

   .balign  16
   .global  isBlankE_F
isBlankE_F:
   testb    $0x06, %bl
   jnz      ret
   testb    $0x08, %bl
   jz       retnz
   cmp      $Nil, %rbx
   jz       ret
   testb    $0x08, -8(%rbx)
   jnz      ret
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
.992:
   call     symByteCX_FACX
   jz       .993
   cmp      $32, %al
   jbe      .992
.993:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSpQ
doSpQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     isBlankE_F
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doPatQ
doPatQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doFunQ
doFunQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     funqE_FE
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doGetd
doGetd:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .994
   testb    $0x08, %bl
   jz       .994
   push     %rbx
   mov      (%rbx), %rbx
   call     funqE_FE
   pop      %rbx
   jnz      .996
   mov      (%rbx), %rbx
   ret
.996:
   cmpq     $Nil, (%rbx)
   jnz      .994
   mov      %rbx, %rdx
   call     sharedLibC_FA
   jz       .994
   mov      %rax, %rbx
   ret
.994:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doAll
doAll:
   push     %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .999
   cmpq     $Nil, (%rbx)
   jnz      .1000
   cmpq     $Nil, 8(%rbx)
   cmovzq   Intern, %rbx
   cmovnzq  Intern+8, %rbx
   jmp      .1003
.1000:
   cmpq     $TSym, (%rbx)
   mov      $Extern, %r10
   cmovnzq  %r10, %rbx
   jnz      .1003
   cmpq     $Nil, 8(%rbx)
   cmovzq   Transient, %rbx
   cmovnzq  Transient+8, %rbx
   jmp      .1003
.999:
   cmp      $Nil, %rbx
   jnz      .1004
   mov      Intern+8, %r13
   call     consTreeXE_E
   mov      Intern, %r13
   jmp      .1005
.1004:
   cmp      $TSym, %rbx
   jnz      .1006
   mov      $Nil, %rbx
   mov      Transient+8, %r13
   call     consTreeXE_E
   mov      Transient, %r13
   jmp      .1005
.1006:
   mov      $Nil, %rbx
   mov      $Extern, %r13
.1005:
   call     consTreeXE_E
.1003:
   pop      %r13
   ret

   .balign  16
   .global  consTreeXE_E
consTreeXE_E:
   testb    $0x0E, %r13b
   jnz      ret
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.1009:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .1010
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      8(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rdx, 8(%rbp)
   jmp      .1009
.1010:
   mov      %r13, 16(%rbp)
.1011:
   call     consE_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .1014
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   orb      $8, %dl
   mov      %rdx, 8(%rbp)
   mov      %r13, 16(%rbp)
   jmp      .1009
.1014:
   mov      8(%rbp), %rax
   cmp      $Nil, %rax
   jz       consTreeXE_E_90
   testb    $0x08, %al
   jnz      .1015
   mov      8(%rax), %rdx
   mov      8(%rdx), %r10
   mov      %r10, 8(%rbp)
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   mov      %r13, 16(%rbp)
   jmp      .1011
.1015:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r10
   mov      %r10, 8(%rbp)
   mov      %r13, (%rdx)
   mov      %rax, %r13
   mov      %r13, 16(%rbp)
   jmp      .1014
consTreeXE_E_90:
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .global  doIntern
doIntern:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       .1017
   push     %r14
   mov      $Intern, %r14
   call     internEXY_FE
   pop      %r14
   pop      %r13
   ret
.1017:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doExtern
doExtern:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       doExtern_90
   mov      %r12, %rdx
   call     symCharCX_FACX
   cmp      $123, %al
   jnz      .1019
   call     symCharCX_FACX
.1019:
   mov      %r12, %rbx
.1020:
   cmp      $64, %al
   jc       .1021
   cmp      $79, %al
   ja       doExtern_90
   sub      $64, %al
   shl      $4, %rbx
   add      %rax, %rbx
   call     symCharCX_FACX
   jz       doExtern_90
   jmp      .1020
.1021:
   cmp      $48, %al
   jc       doExtern_90
   cmp      $55, %al
   ja       doExtern_90
   sub      $48, %al
   movzx    %al, %rax
   mov      %rax, %r14
.1022:
   call     symCharCX_FACX
   jz       .1023
   cmp      $125, %al
   jz       .1023
   cmp      $48, %al
   jc       doExtern_90
   cmp      $55, %al
   ja       doExtern_90
   sub      $48, %al
   shl      $3, %r14
   add      %rax, %r14
   jmp      .1022
.1023:
   mov      %r14, %rdx
   call     extNmCE_X
   call     externX_E
   call     isLifeE_F
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   pop      %r14
   pop      %r13
   ret
doExtern_90:
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doHide
doHide:
   mov      $Nil, %rax
   mov      %rax, Transient
   mov      %rax, Transient+8
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
.1024:
   testb    $0x0E, %r15b
   jnz      .1025
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Transient, %r14
   call     internEXY_FE
   pop      %r13
   mov      8(%r15), %r15
   jmp      .1024
.1025:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doBoxQ
doBoxQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   call     nameA_A
   cmp      $2, %rax
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doStrQ
doStrQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   testb    $0x08, -8(%rbx)
   jnz      retNil
   push     %r13
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Intern, %r14
   call     isInternEXY_F
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doExtQ
doExtQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jz       retNil
   call     isLifeE_F
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doTouch
doTouch:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .1026
   call     dbTouchEX
.1026:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doZap
doZap:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jz       .1027
   call     dbZapE
   jmp      .1028
.1027:
   cmp      $Nil, %rbx
   jc       .1029
   cmp      $Bye, %rbx
   jbe      protErrEX
.1029:
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Intern, %r14
   call     uninternXY
   pop      %r14
.1028:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doChop
doChop:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       .1030
   cmp      $Nil, %rbx
   jz       .1030
   push     %r13
   call     xSymE_E
   mov      -8(%rbx), %r13
   call     nameX_X
   testb    $0x08, -8(%rbx)
   jnz      .1032
   mov      %r12, %rdx
   call     symCharCX_FACX
   jz       .1033
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     mkCharA_A
   call     consA_Y
   mov      %rax, (%r14)
   movq     $Nil, 8(%r14)
   mov      (%rsp), %rbp
   movq     %r14, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1034:
   call     symCharCX_FACX
   jz       .1035
   call     mkCharA_A
   call     consA_E
   mov      %rax, (%rbx)
   movq     $Nil, 8(%rbx)
   mov      %rbx, 8(%r14)
   mov      %rbx, %r14
   jmp      .1034
.1035:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   jmp      .1037
.1033:
   mov      $Nil, %rbx
   jmp      .1037
.1032:
   call     chopExtNmX_E
.1037:
   pop      %r13
.1030:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doPack
doPack:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.1038:
   call     packECX_CX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1039
   mov      %rdx, %r15
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 24(%rbp)
   mov      %r15, %rdx
   jmp      .1038
.1039:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  packECX_CX
packECX_CX:
   testb    $0x0E, %bl
   jnz      .1040
.1041:
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   call     packECX_CX
   pop      %rbx
   testb    $0x0E, %bl
   jz       .1041
.1040:
   cmp      $Nil, %rbx
   jz       ret
   testb    $0x06, %bl
   jnz      .1042
   testb    $0x08, -8(%rbx)
   jz       packECX_CX_10
   mov      $123, %al
   call     byteSymBCX_CX
   push     %rdx
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   call     packExtNmX_E
   mov      %rbx, 16(%rbp)
   pop      %r13
   pop      %rdx
   call     packECX_CX_10
   mov      $125, %al
   jmp      byteSymBCX_CX
.1042:
   mov      %r12, %rax
   call     fmtNum0AE_E
   mov      %rbx, 16(%rbp)
packECX_CX_10:
   push     %rdx
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
.1045:
   call     symByteCX_FACX
   jz       .1046
   xchg     8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     byteSymBCX_CX
   xchg     (%rsp), %r13
   xchg     8(%rsp), %rdx
   jmp      .1045
.1046:
   pop      %r13
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .global  doGlue
doGlue:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $2
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %bl
   jnz      .1047
   mov      %rbx, %r14
.1048:
   mov      (%r14), %rbx
   call     packECX_CX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1049
   mov      32(%rbp), %rbx
   call     packECX_CX
   jmp      .1048
.1049:
   mov      8(%rbp), %r13
   call     consSymX_E
.1047:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doText
doText:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   call     evSymX_E
   cmp      $Nil, %rbx
   jz       .1050
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.1051:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1052
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1051
.1052:
   pushq    $2
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $4
   push     %r13
   mov      (%rbp), %r10
   mov      -8(%r10), %r13
   mov      %r12, %rdx
.1053:
   call     symByteCX_FACX
   jz       .1054
   cmp      $64, %al
   jz       .1055
doText_10:
   xchg     8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     byteSymBCX_CX
   xchg     (%rsp), %r13
   xchg     8(%rsp), %rdx
   jmp      .1053
.1055:
   call     symByteCX_FACX
   jz       .1054
   cmp      $64, %al
   jz       doText_10
   sub      $48, %al
   jbe      .1053
   cmp      $8, %al
   jbe      .1057
   sub      $7, %al
.1057:
   shl      $3, %rax
   mov      (%rbp), %r10
   lea      -8(%r10), %rbx
   sub      %rax, %rbx
   lea      16(%rbp), %rax
   cmp      %rax, %rbx
   jbe      .1053
   mov      (%rbx), %rbx
   xchg     8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     packECX_CX
   xchg     (%rsp), %r13
   xchg     8(%rsp), %rdx
   jmp      .1053
.1054:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1050:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  preCEXY_F
preCEXY_F:
.1059:
   call     symByteCX_FACX
   jz       ret
   mov      %al, Buf
   xchg     %rbx, %rdx
   xchg     %r14, %r13
   call     symByteCX_FACX
   jz       retnz
   cmp      %al, Buf
   jnz      ret
   xchg     %rbx, %rdx
   xchg     %r14, %r13
   jmp      .1059

   .balign  16
   .global  subStrAE_F
subStrAE_F:
   cmp      $Nil, %rax
   jz       ret
   mov      -8(%rax), %rax
   call     nameA_A
   cmpq     $2, %rax
   jz       ret
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jz       retnz
   push     %r13
   push     %r14
   push     %r15
   push     %rax
   mov      %rbx, %r15
   push     %r12
.1060:
   mov      8(%rsp), %r13
   mov      %r12, %rdx
   mov      %r15, %r14
   mov      (%rsp), %rbx
   call     preCEXY_F
   jz       .1061
   mov      (%rsp), %rax
   shr      $8, %rax
   jnz      .1062
   cmpq     $2, %r15
   jnz      .1063
   cmp      %rsp, %r12
   jmp      .1061
.1063:
   testb    $0x02, %r15b
   jz       .1064
   mov      %r15, %rax
   shr      $4, %rax
   mov      $2, %r15
   jmp      .1062
.1064:
   mov      -4(%r15), %rax
   mov      4(%r15), %r15
.1062:
   mov      %rax, (%rsp)
   jmp      .1060
.1061:
   pop      %rax
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPreQ
doPreQ:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   call     evSymX_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   call     evSymX_E
   mov      8(%rbp), %r13
   cmp      $Nil, %r13
   jz       .1066
   mov      %rbx, %r15
   mov      -8(%r13), %r13
   call     nameX_X
   mov      %r12, %rdx
   mov      -8(%rbx), %rbx
   call     nameE_E
   mov      %rbx, %r14
   mov      %r12, %rbx
   call     preCEXY_F
   mov      $Nil, %rbx
   cmovzq   %r15, %rbx
.1066:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSubQ
doSubQ:
   push     %r13
   mov      8(%rbx), %r13
   call     evSymX_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   call     evSymX_E
   mov      8(%rbp), %rax
   mov      %rbx, %r13
   call     subStrAE_F
   mov      $Nil, %rbx
   cmovzq   %r13, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doVal
doVal:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   testb    $0x08, %bl
   jz       .1067
   testb    $0x08, -8(%rbx)
   jz       .1067
   call     dbFetchEX
.1067:
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSet
doSet:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
.1069:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1070
   testb    $0x08, -8(%rbx)
   jz       .1070
   call     dbTouchEX
.1070:
   mov      %rbx, 8(%rbp)
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1069
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSetq
doSetq:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
.1072:
   mov      (%r14), %rbx
   call     needVarEX
   mov      %rbx, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1072
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doXchg
doXchg:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
.1073:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1074
   testb    $0x08, -8(%rbx)
   jz       .1074
   call     dbTouchEX
.1074:
   mov      %rbx, 8(%rbp)
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1076
   testb    $0x08, -8(%rbx)
   jz       .1076
   call     dbTouchEX
.1076:
   mov      8(%rbp), %rdx
   mov      (%rdx), %rax
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   mov      %rax, (%rbx)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1073
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOn
doOn:
   push     %r13
   mov      8(%rbx), %r13
.1078:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $TSym, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1078
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOff
doOff:
   push     %r13
   mov      8(%rbx), %r13
.1079:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $Nil, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1079
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOnOff
doOnOff:
   push     %r13
   mov      8(%rbx), %r13
.1080:
   mov      (%r13), %rbx
   call     needVarEX
   cmpq     $Nil, (%rbx)
   mov      $TSym, %rax
   mov      $Nil, %r10
   cmovnzq  %r10, %rax
   mov      %rax, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1080
   mov      %rax, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doZero
doZero:
   push     %r13
   mov      8(%rbx), %r13
.1081:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $2, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1081
   mov      $2, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOne
doOne:
   push     %r13
   mov      8(%rbx), %r13
.1082:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $18, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1082
   mov      $18, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDefault
doDefault:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
.1083:
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   call     needVarEX
   mov      %rbx, %r15
   cmpq     $Nil, (%r15)
   jnz      .1084
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
.1084:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1083
   mov      (%r15), %rbx
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPush
doPush:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1085
   testb    $0x08, -8(%rbx)
   jz       .1085
   call     dbTouchEX
.1085:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
.1087:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%rbp), %rdx
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%rdx)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1087
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPush1
doPush1:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1088
   testb    $0x08, -8(%rbx)
   jz       .1088
   call     dbTouchEX
.1088:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
.1090:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r10
   mov      (%r10), %rdx
.1091:
   testb    $0x0E, %dl
   jnz      .1092
   mov      (%rdx), %rax
   mov      %rbx, %r15
   call     equalAE_F
   mov      %r15, %rbx
   jz       doPush1_10
   mov      8(%rdx), %rdx
   jmp      .1091
.1092:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%rbp), %rdx
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%rdx)
doPush1_10:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1090
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPop
doPop:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1093
   testb    $0x08, -8(%rbx)
   jz       .1093
   call     dbTouchEX
.1093:
   mov      %rbx, %rax
   mov      (%rax), %rbx
   testb    $0x0E, %bl
   jnz      .1095
   mov      8(%rbx), %r10
   mov      %r10, (%rax)
   mov      (%rbx), %rbx
.1095:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCut
doCut:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   jle      .1096
   mov      8(%r14), %r10
   mov      (%r10), %r14
   xchg     %r14, %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1097
   testb    $0x08, -8(%rbx)
   jz       .1097
   call     dbTouchEX
.1097:
   testb    $0x0E, (%rbx)
   cmovnzq  (%rbx), %rbx
   jnz      .1099
   call     consE_X
   mov      (%rbx), %rdx
   mov      (%rdx), %r10
   mov      %r10, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.1100:
   mov      8(%rdx), %rdx
   testb    $0x0E, %dl
   jnz      .1101
   sub      $1, %r14
   jz       .1101
   call     cons_A
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   mov      8(%r13), %r13
   jmp      .1100
.1101:
   mov      16(%rbp), %r11
   mov      %rdx, (%r11)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1099:
   pop      %r14
   pop      %r13
   ret
.1096:
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDel
doDel:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     needVarEX
   testb    $0x08, %bl
   jz       .1102
   testb    $0x08, -8(%rbx)
   jz       .1102
   call     dbTouchEX
.1102:
   mov      8(%rbp), %r10
   mov      (%r10), %rbx
   testb    $0x0E, %bl
   jnz      doDel_90
   mov      %rbx, %r14
   mov      (%r14), %rbx
   mov      16(%rbp), %rax
   call     equalAE_F
   jnz      .1105
   mov      8(%r14), %rbx
   mov      8(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      doDel_90
.1105:
   call     cons_Z
   mov      (%r14), %r10
   mov      %r10, (%r15)
   movq     $Nil, 8(%r15)
   mov      (%rsp), %rbp
   movq     %r15, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1107:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1108
   mov      (%r14), %rbx
   mov      24(%rbp), %rax
   call     equalAE_F
   jnz      .1109
   mov      8(%r14), %r10
   mov      %r10, 8(%r15)
   mov      8(%rbp), %rbx
   mov      16(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      doDel_90
.1109:
   call     cons_A
   mov      (%r14), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      8(%r15), %r15
   jmp      .1107
.1108:
   mov      16(%rbp), %r10
   mov      (%r10), %rbx
doDel_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doQueue
doQueue:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1110
   testb    $0x08, -8(%rbx)
   jz       .1110
   call     dbTouchEX
.1110:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      8(%rbp), %r13
   mov      (%r13), %r14
   testb    $0x0E, %r14b
   jz       .1114
   mov      %rdx, (%r13)
   jmp      .1113
.1114:
   testb    $0x0E, 8(%r14)
   jnz      .1115
   mov      8(%r14), %r14
   jmp      .1114
.1115:
   mov      %rdx, 8(%r14)
.1113:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFifo
doFifo:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1116
   testb    $0x08, -8(%rbx)
   jz       .1116
   call     dbTouchEX
.1116:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1118
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%rbp), %rdx
   mov      (%rdx), %r13
   testb    $0x0E, %r13b
   jnz      .1119
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r13)
   jmp      .1120
.1119:
   mov      %rax, 8(%rax)
   mov      %r13, (%rdx)
.1120:
   mov      %rax, %r13
.1121:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1122
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r13)
   mov      %rax, %r13
   jmp      .1121
.1122:
   mov      8(%rbp), %r11
   mov      %r13, (%r11)
   jmp      .1123
.1118:
   mov      8(%rbp), %rdx
   mov      (%rdx), %r13
   testb    $0x0E, %r13b
   jz       .1124
   mov      $Nil, %rbx
   jmp      .1123
.1124:
   cmp      8(%r13), %r13
   jnz      .1126
   mov      (%r13), %rbx
   movq     $Nil, (%rdx)
   jmp      .1123
.1126:
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   mov      8(%r13), %r10
   mov      8(%r10), %r10
   mov      %r10, 8(%r13)
.1123:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doIdx
doIdx:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   testb    $0x0E, %r13b
   jz       .1128
   mov      (%rbx), %r13
   mov      $Nil, %rbx
   call     consTreeXE_E
   jmp      .1129
.1128:
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1130
   mov      16(%rbp), %r13
   call     idxGetXY_E
   jmp      .1131
.1130:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %r13
   cmp      $Nil, %rbx
   jz       .1132
   call     idxPutXY_E
   jmp      .1131
.1132:
   call     idxDelXY_E
.1131:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
.1129:
   pop      %r13
   ret

   .balign  16
   .global  idxGetXY_E
idxGetXY_E:
   mov      (%r13), %r13
.1134:
   testb    $0x0E, %r13b
   mov      $Nil, %rbx
   jnz      .1135
   mov      %r14, %rax
   mov      (%r13), %rbx
   call     compareAE_F
   mov      %r13, %rbx
   jz       .1135
   mov      8(%r13), %r13
   cmovcq   (%r13), %r13
   cmovncq  8(%r13), %r13
   jmp      .1134
.1135:
   rep
   ret

   .balign  16
   .global  idxPutXY_E
idxPutXY_E:
   testb    $0x0E, (%r13)
   jz       .1136
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%r13)
   mov      $Nil, %rbx
   jmp      .1137
.1136:
   mov      (%r13), %r13
.1138:
   mov      %r14, %rax
   mov      (%r13), %rbx
   call     compareAE_F
   mov      %r13, %rbx
   jz       .1137
   mov      8(%r13), %rax
   jc       .1140
   testb    $0x0E, %al
   jz       .1141
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   movq     $Nil, (%rdx)
   mov      %rax, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      $Nil, %rbx
   jmp      .1137
.1141:
   mov      %rax, %r13
   testb    $0x0E, 8(%r13)
   cmovzq   8(%r13), %r13
   jz       .1138
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   mov      $Nil, %rbx
   jmp      .1137
.1140:
   testb    $0x0E, %al
   jz       .1144
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      $Nil, %rbx
   jmp      .1137
.1144:
   mov      %rax, %r13
   testb    $0x0E, (%r13)
   cmovzq   (%r13), %r13
   jz       .1138
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%r13)
   mov      $Nil, %rbx
.1137:
   rep
   ret

   .balign  16
   .global  idxDelXY_E
idxDelXY_E:
.1146:
   testb    $0x0E, (%r13)
   mov      $Nil, %rbx
   jnz      .1147
   mov      %r14, %rax
   mov      (%r13), %r10
   mov      (%r10), %rbx
   call     compareAE_F
   jnz      .1148
   mov      (%r13), %rdx
   mov      %rdx, %rbx
   mov      8(%rdx), %rax
   testb    $0x0E, (%rax)
   jz       .1149
   mov      8(%rax), %r10
   mov      %r10, (%r13)
   ret
.1149:
   testb    $0x0E, 8(%rax)
   jz       .1150
   mov      (%rax), %r10
   mov      %r10, (%r13)
   ret
.1150:
   mov      8(%rax), %rax
   mov      8(%rax), %r13
   testb    $0x0E, (%r13)
   jz       .1151
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %r11
   mov      8(%r13), %r10
   mov      %r10, 8(%r11)
   ret
.1151:
   push     %rbx
   mov      (%r13), %r13
.1152:
   mov      8(%r13), %rbx
   testb    $0x0E, (%rbx)
   jnz      .1153
   mov      %r13, %rax
   mov      (%rbx), %r13
   jmp      .1152
.1153:
   mov      (%r13), %r10
   mov      %r10, (%rdx)
   mov      8(%rax), %r11
   mov      8(%rbx), %r10
   mov      %r10, (%r11)
   pop      %rbx
   ret
.1148:
   mov      $Nil, %rbx
   mov      (%r13), %r10
   mov      8(%r10), %r13
   jc       .1154
   testb    $0x0E, %r13b
   jnz      .1147
   lea      8(%r13), %r13
   jmp      .1146
.1154:
   testb    $0x0E, %r13b
   jz       .1146
.1147:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doLup
doLup:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1156
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1157
   pop      %r13
   pop      %rbp
   push     %r14
   mov      %rbx, %r14
.1158:
   mov      (%r13), %rbx
   cmp      $TSym, %rbx
   jnz      .1159
   mov      8(%r13), %r10
   mov      (%r10), %r13
   jmp      .1160
.1159:
   testb    $0x0E, %bl
   jz       .1161
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   jmp      .1160
.1161:
   mov      %r14, %rax
   mov      (%rbx), %rbx
   call     compareAE_F
   jnz      .1163
   mov      (%r13), %rbx
   pop      %r14
   pop      %r13
   ret
.1163:
   mov      8(%r13), %r13
   cmovcq   (%r13), %r13
   cmovncq  8(%r13), %r13
.1160:
   testb    $0x0E, %r13b
   jz       .1158
   mov      $Nil, %rbx
   pop      %r14
   jmp      .1156
.1157:
   push     %rbx
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $Nil
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      40(%rbp), %r13
.1166:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .1167
   mov      (%r13), %rbx
   cmp      $TSym, %rbx
   jz       .1167
   testb    $0x0E, %bl
   jnz      doLup_10
   mov      24(%rbp), %rax
   mov      (%rbx), %rbx
   call     compareAE_F
   jc       .1167
doLup_10:
   mov      %r13, %rdx
   mov      8(%r13), %rax
   mov      8(%rax), %r13
   mov      16(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rdx, 16(%rbp)
   jmp      .1166
.1167:
   mov      %r13, 40(%rbp)
.1168:
   mov      (%r13), %rbx
   testb    $0x0E, %bl
   jnz      .1174
   mov      32(%rbp), %rax
   mov      (%rbx), %rbx
   call     compareAE_F
   ja       .1174
   mov      24(%rbp), %rax
   mov      (%r13), %r10
   mov      (%r10), %rbx
   call     compareAE_F
   jc       .1171
   call     cons_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%rbp)
.1171:
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .1174
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      16(%rbp), %r10
   mov      %r10, (%rax)
   orb      $8, %dl
   mov      %rdx, 16(%rbp)
   mov      %r13, 40(%rbp)
   jmp      .1166
.1174:
   mov      16(%rbp), %rax
   cmp      $Nil, %rax
   jnz      .1175
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1175:
   testb    $0x08, %al
   jnz      .1176
   mov      8(%rax), %rdx
   mov      8(%rdx), %r10
   mov      %r10, 16(%rbp)
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   mov      %r13, 40(%rbp)
   jmp      .1168
.1176:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r10
   mov      %r10, 16(%rbp)
   mov      %r13, (%rdx)
   mov      %rax, %r13
   mov      %r13, 40(%rbp)
   jmp      .1174
.1156:
   pop      %r13
   ret

   .balign  16
   .global  setAE
setAE:
   mov      %rbx, (%rax)
   ret

   .balign  16
   .global  putACE
putACE:
   cmpq     $2, %rdx
   jz       setAE
   push     %r13
   mov      -8(%rax), %r13
   testb    $0x06, %r13b
   jnz      .1178
   andb     $~8, %r13b
   testb    $0x0E, (%r13)
   jz       .1179
   cmp      (%r13), %rdx
   jnz      .1183
   cmp      $Nil, %rbx
   jnz      .1181
putACE_10:
   mov      8(%r13), %r13
   testb    $0x08, -8(%rax)
   jz       .1182
   orb      $8, %r13b
.1182:
   mov      %r13, -8(%rax)
putACE_20:
   pop      %r13
   ret
.1181:
   cmp      $TSym, %rbx
   jz       putACE_20
   push     %rdx
   call     consE_C
   mov      %rbx, (%rdx)
   popq     8(%rdx)
   mov      %rdx, (%r13)
   pop      %r13
   ret
.1179:
   mov      (%r13), %r10
   cmp      8(%r10), %rdx
   jnz      .1183
   cmp      $Nil, %rbx
   jz       putACE_10
   cmp      $TSym, %rbx
   jz       .1185
   mov      (%r13), %r11
   mov      %rbx, (%r11)
   jmp      .1186
.1185:
   mov      %rdx, (%r13)
.1186:
   pop      %r13
   ret
.1183:
   push     %r14
.1187:
   mov      8(%r13), %r14
   testb    $0x0E, %r14b
   jnz      .1188
   testb    $0x0E, (%r14)
   jz       .1189
   cmp      (%r14), %rdx
   jnz      .1196
   cmp      $Nil, %rbx
   jnz      .1191
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   jmp      .1196
.1191:
   cmp      $TSym, %rbx
   jz       .1193
   push     %rdx
   call     consE_C
   mov      %rbx, (%rdx)
   popq     8(%rdx)
   mov      %rdx, (%r14)
.1193:
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   mov      -8(%rax), %r13
   testb    $0x08, %r13b
   jnz      .1194
   mov      %r13, 8(%r14)
   jmp      .1195
.1194:
   andb     $~8, %r13b
   mov      %r13, 8(%r14)
   orb      $8, %r14b
.1195:
   mov      %r14, -8(%rax)
   pop      %r14
   pop      %r13
   ret
.1189:
   mov      (%r14), %r10
   cmp      8(%r10), %rdx
   jnz      .1196
   cmp      $Nil, %rbx
   jnz      .1198
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   jmp      .1196
.1198:
   cmp      $TSym, %rbx
   jz       .1200
   mov      (%r14), %r11
   mov      %rbx, (%r11)
   jmp      .1201
.1200:
   mov      %rdx, (%r14)
.1201:
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   mov      -8(%rax), %r13
   testb    $0x08, %r13b
   jnz      .1202
   mov      %r13, 8(%r14)
   jmp      .1203
.1202:
   andb     $~8, %r13b
   mov      %r13, 8(%r14)
   orb      $8, %r14b
.1203:
   mov      %r14, -8(%rax)
   pop      %r14
   pop      %r13
   ret
.1196:
   mov      %r14, %r13
   jmp      .1187
.1188:
   pop      %r14
   mov      -8(%rax), %r13
.1178:
   cmp      $Nil, %rbx
   jz       .1204
   cmp      $TSym, %rbx
   jz       .1205
   push     %rdx
   call     consE_C
   mov      %rbx, (%rdx)
   popq     8(%rdx)
.1205:
   push     %rdx
   call     consC_C
   popq     (%rdx)
   testb    $0x08, %r13b
   jnz      .1206
   mov      %r13, 8(%rdx)
   jmp      .1207
.1206:
   andb     $~8, %r13b
   mov      %r13, 8(%rdx)
   orb      $8, %dl
.1207:
   mov      %rdx, -8(%rax)
.1204:
   pop      %r13
   ret

   .balign  16
   .global  getnECX_E
getnECX_E:
   testb    $0x06, %bl
   jnz      argErrEX
   testb    $0x0E, %bl
   jnz      .1208
   testb    $0x06, %dl
   jz       .1213
   shr      $4, %rdx
   jc       .1212
   jz       retNil
.1211:
   sub      $1, %rdx
   jz       retE_E
   mov      8(%rbx), %rbx
   jmp      .1211
.1212:
   mov      8(%rbx), %rbx
   sub      $1, %rdx
   jnz      .1212
   rep
   ret
.1213:
   testb    $0x0E, (%rbx)
   jnz      .1214
   mov      (%rbx), %r10
   cmp      (%r10), %rdx
   jz       .1215
.1214:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      retNil
   jmp      .1213
.1215:
   mov      (%rbx), %r10
   mov      8(%r10), %rbx
   ret
.1208:
   testb    $0x08, -8(%rbx)
   jz       .1216
   call     dbFetchEX
.1216:

   .balign  16
   .global  getEC_E
getEC_E:
   cmpq     $2, %rdx
   jz       retE_E
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      retNil
   andb     $~8, %al
   testb    $0x0E, (%rax)
   jz       .1217
   cmp      (%rax), %rdx
   jz       retT
   jmp      .1218
.1217:
   mov      (%rax), %r10
   cmp      8(%r10), %rdx
   jnz      .1218
   mov      (%rax), %r10
   mov      (%r10), %rbx
   ret
.1218:
   push     %r13
.1220:
   mov      8(%rax), %r13
   testb    $0x0E, %r13b
   jnz      .1221
   testb    $0x0E, (%r13)
   jz       .1222
   cmp      (%r13), %rdx
   jnz      .1226
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1224
   mov      %rax, 8(%r13)
   jmp      .1225
.1224:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   orb      $8, %r13b
.1225:
   mov      %r13, -8(%rbx)
   mov      $TSym, %rbx
   pop      %r13
   ret
.1222:
   mov      (%r13), %r10
   cmp      8(%r10), %rdx
   jnz      .1226
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1228
   mov      %rax, 8(%r13)
   mov      %r13, -8(%rbx)
   mov      (%r13), %r10
   mov      (%r10), %rbx
   jmp      .1229
.1228:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   mov      (%r13), %r10
   mov      (%r10), %rax
   orb      $8, %r13b
   mov      %r13, -8(%rbx)
   mov      %rax, %rbx
.1229:
   pop      %r13
   ret
.1226:
   mov      %r13, %rax
   jmp      .1220
.1221:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   .global  propEC_E
propEC_E:
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      retNil
   andb     $~8, %al
   testb    $0x0E, (%rax)
   jz       .1230
   cmp      (%rax), %rdx
   jnz      .1232
   mov      %rdx, %rbx
   ret
.1230:
   mov      (%rax), %r10
   cmp      8(%r10), %rdx
   jnz      .1232
   mov      (%rax), %rbx
   ret
.1232:
   push     %r13
.1234:
   mov      8(%rax), %r13
   testb    $0x0E, %r13b
   jnz      .1235
   testb    $0x0E, (%r13)
   jz       .1236
   cmp      (%r13), %rdx
   jnz      .1240
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1238
   mov      %rax, 8(%r13)
   jmp      .1239
.1238:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   orb      $8, %r13b
.1239:
   mov      %r13, -8(%rbx)
   mov      %rdx, %rbx
   pop      %r13
   ret
.1236:
   mov      (%r13), %r10
   cmp      8(%r10), %rdx
   jnz      .1240
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1242
   mov      %rax, 8(%r13)
   mov      %r13, -8(%rbx)
   mov      (%r13), %rbx
   jmp      .1243
.1242:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   mov      (%r13), %rax
   orb      $8, %r13b
   mov      %r13, -8(%rbx)
   mov      %rax, %rbx
.1243:
   pop      %r13
   ret
.1240:
   mov      %r13, %rax
   jmp      .1234
.1235:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPut
doPut:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1244:
   mov      8(%r14), %r14
   testb    $0x0E, 8(%r14)
   jnz      .1245
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 16(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   jmp      .1244
.1245:
   mov      16(%rbp), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       protErrEX
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %rax
   testb    $0x08, -8(%rax)
   jz       .1246
   push     %rbx
   mov      %rax, %rbx
   call     dbTouchEX
   mov      %rbx, %rax
   pop      %rbx
.1246:
   mov      8(%rbp), %rdx
   call     putACE
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doGet
doGet:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1247
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1248:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1249
   mov      %rbx, 8(%rbp)
   jmp      .1248
.1249:
   mov      (%rbp), %rsp
   pop      %rbp
.1247:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doProp
doProp:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1250:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1251
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 16(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   jmp      .1250
.1251:
   mov      16(%rbp), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .1252
   call     dbFetchEX
.1252:
   mov      8(%rbp), %rdx
   call     propEC_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSemicol
doSemicol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1253
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1254:
   mov      (%r14), %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1255
   mov      %rbx, 8(%rbp)
   jmp      .1254
.1255:
   mov      (%rbp), %rsp
   pop      %rbp
.1253:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSetCol
doSetCol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      This, %rbx
   testb    $0x08, -8(%rbx)
   jz       .1256
   call     dbFetchEX
.1256:
   mov      (%r14), %rdx
   mov      8(%r14), %r14
   testb    $0x0E, 8(%r14)
   jnz      .1257
   call     getEC_E
.1258:
   mov      (%r14), %rdx
   mov      8(%r14), %r14
   testb    $0x0E, 8(%r14)
   jnz      .1257
   call     getnECX_E
   jmp      .1258
.1257:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       protErrEX
   testb    $0x08, -8(%rbx)
   jz       .1260
   call     dbTouchEX
.1260:
   push     %rdx
   push     %rbx
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   pop      %rdx
   call     putACE
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCol
doCol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      This, %rbx
   testb    $0x08, -8(%rbx)
   jz       .1261
   call     dbFetchEX
.1261:
   mov      (%r14), %rdx
   call     getEC_E
.1262:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1263
   mov      (%r14), %rdx
   call     getnECX_E
   jmp      .1262
.1263:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPropCol
doPropCol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      This, %rbx
   testb    $0x08, -8(%rbx)
   jz       .1264
   call     dbFetchEX
.1264:
   mov      (%r14), %rdx
   testb    $0x0E, 8(%r14)
   jnz      .1265
   call     getEC_E
.1266:
   mov      8(%r14), %r14
   mov      (%r14), %rdx
   testb    $0x0E, 8(%r14)
   jnz      .1265
   call     getnECX_E
   jmp      .1266
.1265:
   call     propEC_E
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPutl
doPutl:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1268:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1269
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 16(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   jmp      .1268
.1269:
   mov      16(%rbp), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       protErrEX
   testb    $0x08, -8(%rbx)
   jz       .1270
   call     dbTouchEX
.1270:
   mov      -8(%rbx), %r13
   andb     $~8, %r13b
.1271:
   testb    $0x06, %r13b
   jnz      .1272
   mov      8(%r13), %r13
   jmp      .1271
.1272:
   mov      8(%rbp), %r14
.1273:
   testb    $0x0E, %r14b
   jnz      .1274
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jz       .1275
   mov      %r13, %rax
   call     consA_X
   mov      %rdx, (%r13)
   mov      %rax, 8(%r13)
   jmp      .1276
.1275:
   cmpq     $Nil, (%rdx)
   jz       .1276
   cmpq     $TSym, (%rdx)
   jnz      .1278
   mov      8(%rdx), %rdx
.1278:
   mov      %r13, %rax
   call     consA_X
   mov      %rdx, (%r13)
   mov      %rax, 8(%r13)
.1276:
   mov      8(%r14), %r14
   jmp      .1273
.1274:
   testb    $0x08, -8(%rbx)
   jz       .1279
   orb      $8, %r13b
.1279:
   mov      %r13, -8(%rbx)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doGetl
doGetl:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1280:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1281
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 8(%rbp)
   jmp      .1280
.1281:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .1282
   call     dbFetchEX
.1282:
   mov      -8(%rbx), %r13
   testb    $0x06, %r13b
   jz       .1283
   mov      $Nil, %rbx
   jmp      .1284
.1283:
   andb     $~8, %r13b
   call     cons_C
   mov      (%r13), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1285:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1286
   call     cons_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1285
.1286:
   mov      8(%rbp), %rbx
.1284:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doWipe
doWipe:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1287
   testb    $0x0E, %bl
   jz       .1288
   call     wipeE
   jmp      .1287
.1288:
   push     %rbx
   mov      %rbx, %rdx
.1290:
   mov      (%rdx), %rbx
   call     wipeE
   mov      8(%rdx), %rdx
   testb    $0x0E, %dl
   jz       .1290
   pop      %rbx
.1287:
   rep
   ret

   .balign  16
   .global  wipeE
wipeE:
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1291
   call     nameA_A
   movq     $Nil, (%rbx)
   mov      %rax, -8(%rbx)
   ret
.1291:
   call     nameA_A
   shl      $1, %rax
   jc       .1292
   shl      $1, %rax
   jnc      .1292
   clc
   rcr      $1, %rax
   rcr      $1, %rax
   movq     $Nil, (%rbx)
   orb      $8, %al
   mov      %rax, -8(%rbx)
.1292:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doMeta
doMeta:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jnz      argErrEX
   testb    $0x08, %bl
   jz       .1294
   testb    $0x08, -8(%rbx)
   jz       .1295
   call     dbFetchEX
.1295:
   mov      (%rbx), %r10
   mov      %r10, 8(%rbp)
.1294:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %r13
   call     metaCX_E
.1296:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1297
   mov      %rbx, 8(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   jmp      .1296
.1297:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  metaCX_E
metaCX_E:
.1298:
   testb    $0x0E, %r13b
   jnz      retNil
   mov      (%r13), %rbx
   testb    $0x06, %bl
   jnz      .1299
   testb    $0x08, %bl
   jz       .1299
   call     getEC_E
   cmp      $Nil, %rbx
   jnz      Ret
   push     %r13
   mov      (%r13), %r10
   mov      (%r10), %r13
   call     metaCX_E
   pop      %r13
   cmp      $Nil, %rbx
   jnz      Ret
.1299:
   mov      8(%r13), %r13
   jmp      .1298

   .balign  16
   .global  caseDataA_AC
caseDataA_AC:
   mov      %rax, %rdx
   shr      $4, %rax
   andb     $~1, %al
   movswq   CaseBlocks(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   shl      $1, %rax
   movswq   CaseData(%rax), %rax
   ret

   .balign  16
   nop
   nop
   .global  doLowQ
doLowQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   call     firstCharE_A
   call     caseDataA_AC
   and      $31, %al
   cmp      $2, %al
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doUppQ
doUppQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   call     firstCharE_A
   call     caseDataA_AC
   and      $31, %al
   cmp      $1, %al
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doLowc
doLowc:
   push     %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .1301
   testb    $0x08, %bl
   jz       .1301
   cmp      $Nil, %rbx
   jz       .1301
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $4
   push     %r13
   mov      16(%rbp), %r13
   mov      %r12, %rdx
.1304:
   call     symCharCX_FACX
   jz       .1305
   mov      %rdx, %rbx
   call     caseDataA_AC
   and      $65535, %rax
   shr      $6, %rax
   andb     $~1, %al
   movswq   CaseLower(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   mov      8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     charSymACX_CX
   xchg     (%rsp), %r13
   mov      %rdx, 8(%rsp)
   mov      %rbx, %rdx
   jmp      .1304
.1305:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1301:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doUppc
doUppc:
   push     %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .1306
   testb    $0x08, %bl
   jz       .1306
   cmp      $Nil, %rbx
   jz       .1306
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $4
   push     %r13
   mov      16(%rbp), %r13
   mov      %r12, %rdx
.1309:
   call     symCharCX_FACX
   jz       .1310
   mov      %rdx, %rbx
   call     caseDataA_AC
   and      $65535, %rax
   shr      $6, %rax
   andb     $~1, %al
   movswq   CaseUpper(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   mov      8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     charSymACX_CX
   xchg     (%rsp), %r13
   mov      %rdx, 8(%rsp)
   mov      %rbx, %rdx
   jmp      .1309
.1310:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1306:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFold
doFold:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .1311
   testb    $0x08, %bl
   jz       .1311
   cmp      $Nil, %rbx
   jz       .1311
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1314
   pushq    $24
   jmp      .1315
.1314:
   call     evCntXY_FE
   push     %rbx
.1315:
   pushq    $4
   lea      8(%rbp), %r13
   push     %r13
   mov      16(%rbp), %r13
   mov      %r12, %rdx
.1316:
   call     symCharCX_FACX
   jz       .1317
   mov      %rdx, %rbx
   call     isLetterOrDigitA_F
   jz       .1318
   subq     $1, 16(%rsp)
   js       .1317
   call     caseDataA_AC
   and      $65535, %rax
   shr      $6, %rax
   andb     $~1, %al
   movswq   CaseLower(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   mov      8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     charSymACX_CX
   xchg     (%rsp), %r13
   mov      %rdx, 8(%rsp)
.1318:
   mov      %rbx, %rdx
   jmp      .1316
.1317:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1311:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  isLetterOrDigitA_F
isLetterOrDigitA_F:
   push     %rax
   call     caseDataA_AC
   and      $31, %al
   mov      $1, %rdx
   movzx    %al, %rax
   mov      %al, %cl
   shl      %cl, %rdx
   test     $574, %rdx
   pop      %rax
   ret

   .balign  16
   nop
   nop
   .global  doCar
doCar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdr
doCdr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1319
   testb    $0x0E, %bl
   jnz      lstErrEX
.1319:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaar
doCaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCadr
doCadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1320
   testb    $0x0E, %bl
   jnz      lstErrEX
.1320:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdar
doCdar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1321
   testb    $0x0E, %bl
   jnz      lstErrEX
.1321:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCddr
doCddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1322
   testb    $0x0E, %bl
   jnz      lstErrEX
.1322:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1323
   testb    $0x0E, %bl
   jnz      lstErrEX
.1323:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaaar
doCaaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaadr
doCaadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1324
   testb    $0x0E, %bl
   jnz      lstErrEX
.1324:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCadar
doCadar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1325
   testb    $0x0E, %bl
   jnz      lstErrEX
.1325:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaddr
doCaddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1326
   testb    $0x0E, %bl
   jnz      lstErrEX
.1326:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1327
   testb    $0x0E, %bl
   jnz      lstErrEX
.1327:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdaar
doCdaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1328
   testb    $0x0E, %bl
   jnz      lstErrEX
.1328:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdadr
doCdadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1329
   testb    $0x0E, %bl
   jnz      lstErrEX
.1329:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1330
   testb    $0x0E, %bl
   jnz      lstErrEX
.1330:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCddar
doCddar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1331
   testb    $0x0E, %bl
   jnz      lstErrEX
.1331:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1332
   testb    $0x0E, %bl
   jnz      lstErrEX
.1332:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdddr
doCdddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1333
   testb    $0x0E, %bl
   jnz      lstErrEX
.1333:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1334
   testb    $0x0E, %bl
   jnz      lstErrEX
.1334:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1335
   testb    $0x0E, %bl
   jnz      lstErrEX
.1335:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaaaar
doCaaaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaaadr
doCaaadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1336
   testb    $0x0E, %bl
   jnz      lstErrEX
.1336:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaadar
doCaadar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1337
   testb    $0x0E, %bl
   jnz      lstErrEX
.1337:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaaddr
doCaaddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1338
   testb    $0x0E, %bl
   jnz      lstErrEX
.1338:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1339
   testb    $0x0E, %bl
   jnz      lstErrEX
.1339:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCadaar
doCadaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1340
   testb    $0x0E, %bl
   jnz      lstErrEX
.1340:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCadadr
doCadadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1341
   testb    $0x0E, %bl
   jnz      lstErrEX
.1341:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1342
   testb    $0x0E, %bl
   jnz      lstErrEX
.1342:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCaddar
doCaddar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1343
   testb    $0x0E, %bl
   jnz      lstErrEX
.1343:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1344
   testb    $0x0E, %bl
   jnz      lstErrEX
.1344:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCadddr
doCadddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1345
   testb    $0x0E, %bl
   jnz      lstErrEX
.1345:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1346
   testb    $0x0E, %bl
   jnz      lstErrEX
.1346:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1347
   testb    $0x0E, %bl
   jnz      lstErrEX
.1347:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdaaar
doCdaaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1348
   testb    $0x0E, %bl
   jnz      lstErrEX
.1348:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdaadr
doCdaadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1349
   testb    $0x0E, %bl
   jnz      lstErrEX
.1349:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1350
   testb    $0x0E, %bl
   jnz      lstErrEX
.1350:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdadar
doCdadar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1351
   testb    $0x0E, %bl
   jnz      lstErrEX
.1351:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1352
   testb    $0x0E, %bl
   jnz      lstErrEX
.1352:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdaddr
doCdaddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1353
   testb    $0x0E, %bl
   jnz      lstErrEX
.1353:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1354
   testb    $0x0E, %bl
   jnz      lstErrEX
.1354:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1355
   testb    $0x0E, %bl
   jnz      lstErrEX
.1355:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCddaar
doCddaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1356
   testb    $0x0E, %bl
   jnz      lstErrEX
.1356:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1357
   testb    $0x0E, %bl
   jnz      lstErrEX
.1357:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCddadr
doCddadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1358
   testb    $0x0E, %bl
   jnz      lstErrEX
.1358:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1359
   testb    $0x0E, %bl
   jnz      lstErrEX
.1359:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1360
   testb    $0x0E, %bl
   jnz      lstErrEX
.1360:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCdddar
doCdddar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1361
   testb    $0x0E, %bl
   jnz      lstErrEX
.1361:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1362
   testb    $0x0E, %bl
   jnz      lstErrEX
.1362:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1363
   testb    $0x0E, %bl
   jnz      lstErrEX
.1363:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCddddr
doCddddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1364
   testb    $0x0E, %bl
   jnz      lstErrEX
.1364:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1365
   testb    $0x0E, %bl
   jnz      lstErrEX
.1365:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1366
   testb    $0x0E, %bl
   jnz      lstErrEX
.1366:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1367
   testb    $0x0E, %bl
   jnz      lstErrEX
.1367:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doNth
doNth:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
.1368:
   testb    $0x0E, %bl
   jnz      .1369
   call     evCntXY_FE
   mov      %rbx, %rdx
   sub      $1, %rdx
   js       .1370
   mov      8(%rbp), %rbx
.1371:
   sub      $1, %rdx
   js       .1373
   mov      8(%rbx), %rbx
   jmp      .1371
.1370:
   mov      $Nil, %rbx
   jmp      .1369
.1373:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1369
   mov      (%rbx), %rbx
   mov      %rbx, 8(%rbp)
   jmp      .1368
.1369:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCon
doCon:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      cellErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r11
   mov      %rbx, 8(%r11)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCons
doCons:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1374:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, 8(%r13)
   jnz      .1375
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1374
.1375:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%r14)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doConc
doConc:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1376:
   mov      %rbx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1377
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %r14b
   jz       .1380
   mov      %rbx, 8(%rbp)
   jmp      .1376
.1380:
   testb    $0x0E, 8(%r14)
   jnz      .1381
   mov      8(%r14), %r14
   jmp      .1380
.1381:
   mov      %rbx, 8(%r14)
   jmp      .1376
.1377:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCirc
doCirc:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1382:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1383
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1382
.1383:
   mov      8(%rbp), %rbx
   mov      %rbx, 8(%r14)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doRot
doRot:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1384
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   cmovnzq  %r12, %rbx
   jnz      .1385
   call     evCntXY_FE
.1385:
   mov      8(%rbp), %r14
   mov      (%r14), %r13
.1386:
   sub      $1, %rbx
   jz       .1387
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1387
   cmp      8(%rbp), %r14
   jz       .1387
   xchg     (%r14), %r13
   jmp      .1386
.1387:
   mov      8(%rbp), %r11
   mov      %r13, (%r11)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1384:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doList
doList:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1388:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1389
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1388
.1389:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doNeed
doNeed:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      %rbx, %r13
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %rbx
   or       %r13, %r13
   jz       .1390
   js       .1391
   mov      %rbx, %r14
.1392:
   testb    $0x0E, %r14b
   jnz      .1394
   mov      8(%r14), %r14
   sub      $1, %r13
   jmp      .1392
.1394:
   sub      $1, %r13
   js       .1390
   mov      %rbx, %rdx
   call     consC_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   mov      %rdx, 8(%rbx)
   jmp      .1394
.1391:
   testb    $0x0E, %bl
   jz       .1399
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   movq     $Nil, 8(%rbx)
   mov      %rbx, 16(%rbp)
   jmp      .1401
.1399:
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jnz      .1401
   add      $1, %r13
   mov      %r14, %rbx
   jmp      .1399
.1401:
   add      $1, %r13
   jns      .1402
   call     cons_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rbx)
   mov      8(%rbx), %rbx
   jmp      .1401
.1402:
   mov      16(%rbp), %rbx
.1390:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doRange
doRange:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       numErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   testb    $0x06, %bl
   jz       numErrEX
   push     %rbx
   pushq    $18
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   cmp      $Nil, %rbx
   jz       .1403
   testb    $0x06, %bl
   jz       numErrEX
   cmpq     $2, %rbx
   jz       argErrEX
   testb    $8, %bl
   jnz      argErrEX
   mov      %rbx, (%rsp)
.1403:
   push     %rbp
   mov      %rsp, %rbp
   call     cons_X
   mov      (%rsp), %rbp
   movq     %r13, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      32(%rbp), %r10
   mov      %r10, (%r13)
   movq     $Nil, 8(%r13)
   mov      32(%rbp), %rax
   mov      24(%rbp), %rbx
   call     cmpNumAE_F
   mov      32(%rbp), %rax
   ja       .1408
.1405:
   mov      16(%rbp), %rbx
   call     addAE_A
   push     %rax
   mov      24(%rbp), %rbx
   call     cmpNumAE_F
   ja       .1407
   pop      %rax
   call     consA_Y
   mov      %rax, (%r14)
   movq     $Nil, 8(%r14)
   mov      %r14, 8(%r13)
   mov      %r14, %r13
   jmp      .1405
.1408:
   mov      16(%rbp), %rbx
   call     subAE_A
   push     %rax
   mov      24(%rbp), %rbx
   call     cmpNumAE_F
   jc       .1407
   pop      %rax
   call     consA_Y
   mov      %rax, (%r14)
   movq     $Nil, 8(%r14)
   mov      %r14, 8(%r13)
   mov      %r14, %r13
   jmp      .1408
.1407:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFull
doFull:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1410:
   testb    $0x0E, %bl
   jnz      retT
   cmpq     $Nil, (%rbx)
   jz       retNil
   mov      8(%rbx), %rbx
   jmp      .1410

   .balign  16
   nop
   nop
   .global  doMake
doMake:
   push     %r13
   mov      8(%rbx), %r13
   pushq    EnvMake
   pushq    EnvYoke
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   mov      %rsp, EnvMake
   mov      %rsp, EnvYoke
   push     %rbp
   mov      %rsp, %rbp
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvYoke
   popq     EnvMake
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMade
doMade:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrEX
   push     %r14
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jnz      .1411
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      EnvYoke, %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       .1412
   mov      EnvYoke, %r10
   mov      (%r10), %rbx
.1413:
   mov      8(%rbx), %rax
   testb    $0x0E, %al
   jnz      .1412
   mov      %rax, %rbx
   jmp      .1413
.1412:
   lea      8(%rbx), %rbx
   mov      %rbx, EnvMake
.1411:
   mov      EnvYoke, %r10
   mov      (%r10), %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doChain
doChain:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrEX
   push     %r14
   mov      8(%rbx), %r14
.1415:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      EnvMake, %r11
   mov      %rbx, (%r11)
   testb    $0x0E, %bl
   jnz      .1416
   mov      %rbx, %rdx
.1417:
   mov      8(%rdx), %rax
   testb    $0x0E, %al
   jnz      .1418
   mov      %rax, %rdx
   jmp      .1417
.1418:
   lea      8(%rdx), %rdx
   mov      %rdx, EnvMake
.1416:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1415
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLink
doLink:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrEX
   push     %r14
   mov      8(%rbx), %r14
.1419:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      EnvMake, %r11
   mov      %rdx, (%r11)
   lea      8(%rdx), %rdx
   mov      %rdx, EnvMake
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1419
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doYoke
doYoke:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrEX
   push     %r14
   mov      8(%rbx), %r14
.1420:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      EnvYoke, %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rax)
   mov      EnvYoke, %r11
   mov      %rax, (%r11)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1420
.1421:
   mov      EnvMake, %r10
   mov      (%r10), %rdx
   testb    $0x0E, %dl
   jnz      .1422
   lea      8(%rdx), %rdx
   mov      %rdx, EnvMake
   jmp      .1421
.1422:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCopy
doCopy:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1423
   push     %r15
   mov      %rbx, %r15
   call     consE_C
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   mov      8(%rbx), %r10
   mov      %r10, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1424:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1425
   cmp      %r15, %rbx
   jnz      .1426
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   jmp      .1425
.1426:
   call     consE_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      8(%rbx), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1424
.1425:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
.1423:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doMix
doMix:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doMix_10
   testb    $0x0E, %bl
   jnz      .1427
doMix_10:
   push     %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1428
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r13), %rdx
   testb    $0x02, %dl
   jnz      .1429
   mov      %rdx, %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .1430
.1429:
   shr      $4, %rdx
   ja       .1433
   mov      $Nil, %rbx
   jmp      .1430
.1433:
   sub      $1, %rdx
   jz       .1434
   mov      8(%rbx), %rbx
   jmp      .1433
.1434:
   mov      (%rbx), %rbx
.1430:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1435:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1436
   mov      (%r13), %rbx
   testb    $0x02, %bl
   jnz      .1437
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .1438
.1437:
   shr      $4, %rbx
   ja       .1439
   mov      $Nil, %rbx
   jmp      .1438
.1439:
   mov      16(%rbp), %rdx
.1441:
   sub      $1, %rbx
   jz       .1442
   mov      8(%rdx), %rdx
   jmp      .1441
.1442:
   mov      (%rdx), %rbx
.1438:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1435
.1436:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .1443
.1428:
   mov      $Nil, %rbx
.1443:
   pop      %r14
.1427:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doAppend
doAppend:
   push     %r13
   mov      8(%rbx), %r13
.1444:
   testb    $0x0E, 8(%r13)
   jnz      .1445
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1446
   mov      %rbx, %rax
   call     consE_E
   mov      (%rax), %r10
   mov      %r10, (%rbx)
   mov      8(%rax), %rdx
   mov      %rdx, 8(%rbx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1447:
   testb    $0x0E, %dl
   jnz      .1448
   call     consC_A
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   mov      8(%rdx), %rdx
   mov      %rdx, 8(%rax)
   mov      %rax, 8(%rbx)
   mov      %rax, %rbx
   jmp      .1447
.1448:
   push     %rbx
.1449:
   mov      8(%r13), %r13
   testb    $0x0E, 8(%r13)
   jnz      .1450
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1451:
   testb    $0x0E, %bl
   jnz      .1449
   call     consE_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      8(%rbx), %rbx
   mov      %rbx, 8(%rax)
   mov      (%rsp), %r11
   mov      %rax, 8(%r11)
   mov      %rax, (%rsp)
   jmp      .1451
.1450:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   mov      %rbx, 8(%rax)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1446:
   mov      8(%r13), %r13
   jmp      .1444
.1445:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDelete
doDelete:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %bl
   jnz      .1453
   mov      %rbx, %r13
   mov      16(%rbp), %rax
   mov      (%r13), %rbx
   call     equalAE_F
   jnz      .1454
   mov      8(%r13), %rbx
   jmp      .1453
.1454:
   call     cons_C
   mov      (%r13), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1456:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1457
   mov      24(%rbp), %rax
   mov      (%r13), %rbx
   call     equalAE_F
   jnz      .1458
   mov      8(%r13), %r13
   jmp      .1457
.1458:
   call     cons_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1456
.1457:
   mov      %r13, 8(%rdx)
   mov      8(%rbp), %rbx
.1453:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDelq
doDelq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %bl
   jnz      .1459
   mov      16(%rbp), %r13
   cmp      (%rbx), %r13
   jnz      .1460
   mov      8(%rbx), %rbx
   jmp      .1459
.1460:
   call     cons_C
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1462:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1463
   cmp      (%rbx), %r13
   jnz      .1464
   mov      8(%rbx), %rbx
   jmp      .1463
.1464:
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1462
.1463:
   mov      %rbx, 8(%rdx)
   mov      8(%rbp), %rbx
.1459:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doReplace
doReplace:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1465
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rbx, %r14
.1466:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1467
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1466
.1467:
   mov      %rbp, %r13
   lea      -8(%rsp), %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     cons_Z
.1468:
   sub      $16, %r13
   cmp      %rdx, %r13
   jz       .1469
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1468
   mov      -8(%r13), %r10
   mov      %r10, (%r15)
   jmp      doReplace_10
.1469:
   mov      (%r14), %r10
   mov      %r10, (%r15)
doReplace_10:
   movq     $Nil, 8(%r15)
   mov      (%rsp), %rbp
   movq     %r15, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1471:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1472
   mov      (%rbp), %r13
.1473:
   sub      $16, %r13
   cmp      %rdx, %r13
   jz       .1474
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1473
   call     cons_E
   mov      -8(%r13), %r10
   mov      %r10, (%rbx)
   jmp      doReplace_20
.1474:
   call     cons_E
   mov      (%r14), %r10
   mov      %r10, (%rbx)
doReplace_20:
   movq     $Nil, 8(%rbx)
   mov      %rbx, 8(%r15)
   mov      %rbx, %r15
   jmp      .1471
.1472:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
.1465:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doStrip
doStrip:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1476:
   testb    $0x0E, %bl
   jnz      .1477
   cmpq     $Quote, (%rbx)
   jnz      .1477
   mov      8(%rbx), %rax
   cmp      %rbx, %rax
   jz       .1477
   mov      %rax, %rbx
   jmp      .1476
.1477:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doSplit
doSplit:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1478
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.1479:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1480
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1479
.1480:
   lea      -8(%rbp), %rdx
   mov      $Nil, %r14
   push     %r14
   mov      %r14, %r15
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
.1481:
   lea      24(%rbp), %r13
.1482:
   cmp      %rdx, %r13
   jz       .1483
   mov      (%r13), %rax
   mov      (%rdx), %r10
   mov      (%r10), %rbx
   call     equalAE_F
   jnz      .1484
   testb    $0x0E, %r14b
   jz       .1485
   call     cons_Y
   mov      8(%rbp), %r10
   mov      %r10, (%r14)
   movq     $Nil, 8(%r14)
   mov      %r14, 16(%rbp)
   jmp      .1486
.1485:
   call     cons_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
.1486:
   mov      $Nil, %r15
   mov      %r15, 8(%rbp)
   jmp      doSplit_10
.1484:
   add      $8, %r13
   jmp      .1482
.1483:
   testb    $0x0E, %r15b
   jz       .1487
   call     cons_Z
   mov      (%rdx), %r10
   mov      (%r10), %r10
   mov      %r10, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
   jmp      doSplit_10
.1487:
   call     cons_A
   mov      (%rdx), %r10
   mov      (%r10), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
doSplit_10:
   mov      (%rdx), %r10
   mov      8(%r10), %rax
   mov      %rax, (%rdx)
   testb    $0x0E, %al
   jz       .1481
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   movq     $Nil, 8(%rbx)
   testb    $0x0E, %r14b
   jnz      .1489
   mov      %rbx, 8(%r14)
   mov      16(%rbp), %rbx
.1489:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
.1478:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doReverse
doReverse:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rax
.1490:
   testb    $0x0E, %bl
   jnz      .1491
   call     consA_C
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   mov      %rax, 8(%rdx)
   mov      %rdx, %rax
   mov      8(%rbx), %rbx
   jmp      .1490
.1491:
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .global  doFlip
doFlip:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      doFlip_90
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1493
   mov      8(%rbx), %rdx
   testb    $0x0E, %dl
   jnz      .1493
   movq     $Nil, 8(%rbx)
.1495:
   mov      8(%rdx), %rax
   mov      %rbx, 8(%rdx)
   mov      %rdx, %rbx
   testb    $0x0E, %al
   jnz      doFlip_90
   mov      %rax, %rdx
   jmp      .1495
.1493:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     evCntXY_FE
   mov      8(%rbp), %rdx
   mov      (%rbp), %rsp
   pop      %rbp
   mov      8(%rdx), %r13
   testb    $0x0E, %r13b
   jnz      .1496
   sub      $1, %rbx
   jle      .1496
   mov      8(%r13), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%r13)
.1498:
   sub      $1, %rbx
   jz       .1499
   mov      8(%rdx), %rax
   testb    $0x0E, %al
   jnz      .1499
   mov      8(%rax), %r10
   mov      %r10, 8(%rdx)
   mov      %r13, 8(%rax)
   mov      %rax, %r13
   jmp      .1498
.1499:
   mov      %r13, %rdx
.1496:
   mov      %rdx, %rbx
doFlip_90:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doTrim
doTrim:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     trimE_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .global  trimE_E
trimE_E:
   testb    $0x0E, %bl
   jnz      .1500
   pushq    (%rbx)
   mov      8(%rbx), %rbx
   call     trimE_E
   cmp      $Nil, %rbx
   jnz      .1501
   mov      (%rsp), %rbx
   call     isBlankE_F
   jnz      .1502
   pop      %rax
   mov      $Nil, %rbx
   ret
.1502:
   call     cons_E
   popq     (%rbx)
   movq     $Nil, 8(%rbx)
   ret
.1501:
   mov      %rbx, %rax
   call     consE_E
   popq     (%rbx)
   mov      %rax, 8(%rbx)
.1500:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doClip
doClip:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1503:
   testb    $0x0E, %bl
   jnz      ret
   push     %rbx
   mov      (%rbx), %rbx
   call     isBlankE_F
   pop      %rbx
   jnz      .1504
   mov      8(%rbx), %rbx
   jmp      .1503
.1504:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     trimE_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .global  doHead
doHead:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1505
   testb    $0x0E, %bl
   jnz      .1506
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1507
   mov      %rbx, %r13
   mov      8(%rbp), %r14
.1508:
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1507
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1510
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.1510:
   mov      8(%r13), %r13
   jmp      .1508
.1507:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      doHead_10
.1506:
   call     xCntEX_FE
   jz       doHead_10
   mov      %rbx, %r13
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1505
   cmp      %r12, %r13
   jns      .1513
   mov      %rbx, %r14
.1514:
   add      $1, %r13
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1514
   cmp      %r12, %r13
   jle      doHead_10
.1513:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     cons_Y
   mov      (%rbx), %r10
   mov      %r10, (%r14)
   movq     $Nil, 8(%r14)
   mov      (%rsp), %rbp
   movq     %r14, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1515:
   sub      $1, %r13
   jz       .1516
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1516
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   jmp      .1515
.1516:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .1505
doHead_10:
   mov      $Nil, %rbx
.1505:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doTail
doTail:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1518
   testb    $0x0E, %bl
   jnz      .1519
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1520
   mov      %rbx, %r13
   mov      8(%rbp), %r14
.1521:
   mov      %r13, %rax
   mov      %r14, %rbx
   call     equalAE_F
   jnz      .1522
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.1522:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1521
.1520:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      doTail_10
.1519:
   call     xCntEX_FE
   jz       doTail_10
   mov      %rbx, %r13
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1518
   cmp      %r12, %r13
   jns      .1525
.1526:
   mov      8(%rbx), %rbx
   add      $1, %r13
   jnz      .1526
   jmp      .1518
.1525:
   mov      8(%rbx), %r14
.1528:
   sub      $1, %r13
   jz       .1530
   testb    $0x0E, %r14b
   jnz      .1530
   mov      8(%r14), %r14
   jmp      .1528
.1530:
   testb    $0x0E, %r14b
   jnz      .1518
   mov      8(%rbx), %rbx
   mov      8(%r14), %r14
   jmp      .1530
doTail_10:
   mov      $Nil, %rbx
.1518:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doStem
doStem:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.1533:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1534
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1533
.1534:
   lea      -8(%rbp), %rdx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%rdx), %r14
.1535:
   testb    $0x0E, %r14b
   jnz      .1536
   lea      8(%rbp), %r13
.1537:
   cmp      %rdx, %r13
   jz       .1538
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1539
   mov      8(%r14), %r10
   mov      %r10, (%rdx)
   jmp      .1538
.1539:
   add      $8, %r13
   jmp      .1537
.1538:
   mov      8(%r14), %r14
   jmp      .1535
.1536:
   mov      (%rdx), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFin
doFin:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1540:
   testb    $0x0E, %bl
   jnz      .1541
   mov      8(%rbx), %rbx
   jmp      .1540
.1541:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doLast
doLast:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1542
.1543:
   testb    $0x0E, 8(%rbx)
   jnz      .1544
   mov      8(%rbx), %rbx
   jmp      .1543
.1544:
   mov      (%rbx), %rbx
.1542:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doEq
doEq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1545:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1546
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      8(%rbp), %rbx
   jz       .1545
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1546:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doNEq
doNEq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1548:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1549
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      8(%rbp), %rbx
   jz       .1548
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret
.1549:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doEqual
doEqual:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1551:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1552
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   call     equalAE_F
   jz       .1551
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1552:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doNEqual
doNEqual:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1554:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1555
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   call     equalAE_F
   jz       .1554
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret
.1555:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doEq0
doEq0:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $2, %rbx
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doEqT
doEqT:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doNEq0
doNEq0:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $2, %rbx
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doNEqT
doNEqT:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doLt
doLt:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1557:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1558
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   jc       .1557
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1558:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLe
doLe:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1560:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1561
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   jbe      .1560
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1561:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doGt
doGt:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1563:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1564
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   ja       .1563
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1564:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doGe
doGe:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1566:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1567
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   jnc      .1566
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1567:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMax
doMax:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1569:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1570
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, %r14
   call     compareAE_F
   jnc      .1569
   mov      %r14, 8(%rbp)
   jmp      .1569
.1570:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMin
doMin:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1572:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1573
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, %r14
   call     compareAE_F
   jbe      .1572
   mov      %r14, 8(%rbp)
   jmp      .1572
.1573:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doAtom
doAtom:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doPair
doPair:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doLstQ
doLstQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       retT
   cmp      $Nil, %rbx
   jz       retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doNumQ
doNumQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doSymQ
doSymQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doFlgQ
doFlgQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       retT
   cmp      $TSym, %rbx
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doMember
doMember:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   mov      %rbx, %r14
   call     memberXY_FY
   mov      %r14, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMemq
doMemq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   mov      %rbx, %rdx
.1575:
   testb    $0x0E, %bl
   jnz      .1576
   cmp      (%rbx), %rax
   jz       ret
   mov      8(%rbx), %rbx
   cmp      %rbx, %rdx
   jz       retNil
   jmp      .1575
.1576:
   cmp      %rbx, %rax
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doMmeq
doMmeq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   mov      %rbx, %rdx
.1577:
   testb    $0x0E, %r13b
   jnz      doMmeq_10
   mov      (%r13), %rax
.1579:
   testb    $0x0E, %bl
   jnz      .1580
   cmp      (%rbx), %rax
   jz       doMmeq_20
   mov      8(%rbx), %rbx
   cmp      %rbx, %rdx
   jz       doMmeq_10
   jmp      .1579
.1580:
   cmp      %rbx, %rax
   jz       doMmeq_20
   mov      8(%r13), %r13
   mov      %rdx, %rbx
   jmp      .1577
doMmeq_10:
   mov      $Nil, %rbx
doMmeq_20:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSect
doSect:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      %r12, %r15
   mov      24(%rbp), %r13
.1581:
   testb    $0x0E, %r13b
   jnz      .1582
   mov      (%r13), %r13
   mov      16(%rbp), %r14
   call     memberXY_FY
   jnz      .1583
   cmp      %r12, %r15
   jnz      .1584
   call     cons_Z
   mov      %r13, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
   jmp      .1583
.1584:
   call     cons_A
   mov      %r13, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
.1583:
   mov      24(%rbp), %r10
   mov      8(%r10), %r13
   mov      %r13, 24(%rbp)
   jmp      .1581
.1582:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDiff
doDiff:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      %r12, %r15
   mov      24(%rbp), %r13
.1586:
   testb    $0x0E, %r13b
   jnz      .1587
   mov      (%r13), %r13
   mov      16(%rbp), %r14
   call     memberXY_FY
   jz       .1588
   cmp      %r12, %r15
   jnz      .1589
   call     cons_Z
   mov      %r13, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
   jmp      .1588
.1589:
   call     cons_A
   mov      %r13, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
.1588:
   mov      24(%rbp), %r10
   mov      8(%r10), %r13
   mov      %r13, 24(%rbp)
   jmp      .1586
.1587:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doIndex
doIndex:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   mov      %rbx, %r14
   mov      %r14, %r15
   mov      $1, %rdx
.1591:
   testb    $0x0E, %r14b
   jnz      .1592
   mov      %r13, %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1593
   mov      %rdx, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      doIndex_90
.1593:
   add      $1, %rdx
   mov      8(%r14), %r14
   cmp      %r14, %r15
   jnz      .1591
.1592:
   mov      $Nil, %rbx
doIndex_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOffset
doOffset:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %r12, %rdx
   mov      8(%rbp), %r13
.1594:
   testb    $0x0E, %bl
   jnz      .1595
   add      $1, %rdx
   mov      %r13, %rax
   push     %rbx
   call     equalAE_F
   jnz      .1596
   mov      %rdx, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1596:
   pop      %rbx
   mov      8(%rbx), %rbx
   jmp      .1594
.1595:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLength
doLength:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .1597
   mov      $-2, %rax
   jmp      fmtNum0AE_E
.1597:
   testb    $0x08, %bl
   jnz      .1598
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      $18, %rbx
.1599:
   cmp      $Quote, %r13
   jnz      .1600
   mov      8(%r13), %r14
   cmp      %r13, %r14
   jz       lengthT
   mov      %r14, %r13
   testb    $0x0E, %r13b
   jnz      doLength_10
   add      $16, %rbx
   jmp      .1599
.1600:
   mov      %r13, %r14
.1601:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      doLength_10
   cmp      %r14, %r13
   jz       lengthT
   add      $16, %rbx
   jmp      .1601
doLength_10:
   pop      %r14
   pop      %r13
   ret
.1598:
   cmp      $Nil, %rbx
   jnz      .1603
   mov      $2, %rbx
   ret
.1603:
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
   mov      $2, %rbx
.1604:
   call     symCharCX_FACX
   jz       .1605
   add      $16, %rbx
   jmp      .1604
.1605:
   pop      %r13
   ret
lengthT:
   mov      $TSym, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSize
doSize:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .1606
   testb    $0x02, %bl
   jz       .1607
   mov      $18, %rdx
   shr      $3, %rbx
.1608:
   shr      $8, %rbx
   jz       .1615
   add      $16, %rdx
   jmp      .1608
.1607:
   mov      $130, %rdx
.1611:
   mov      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .1612
   add      $128, %rdx
   jmp      .1611
.1612:
   shr      $4, %rbx
   shl      $1, %rax
   adc      %rbx, %rbx
   jz       .1615
.1614:
   add      $16, %rdx
   shr      $8, %rbx
   jnz      .1614
   jmp      .1615
.1606:
   testb    $0x08, %bl
   jnz      .1616
   mov      $2, %rdx
   call     sizeCE_C
   jmp      .1615
.1616:
   cmp      $Nil, %rbx
   jnz      .1618
   mov      $2, %rdx
   jmp      .1615
.1618:
   testb    $0x08, -8(%rbx)
   jz       .1620
   push     %r15
   call     dbFetchEX
   mov      (%rbx), %r13
   call     dbSizeX_A
   add      $7, %rax
   mov      %rax, %r15
   mov      -8(%rbx), %rbx
   andb     $~8, %bl
.1621:
   testb    $0x0E, %bl
   jnz      .1622
   mov      (%rbx), %r13
   mov      8(%rbx), %rbx
   testb    $0x0E, %r13b
   jz       .1623
   call     dbSizeX_A
   add      %rax, %r15
   add      $2, %r15
   jmp      .1621
.1623:
   pushq    (%r13)
   mov      8(%r13), %r13
   call     dbSizeX_A
   add      %rax, %r15
   pop      %r13
   call     dbSizeX_A
   add      %rax, %r15
   jmp      .1621
.1622:
   mov      %r15, %rdx
   shl      $4, %rdx
   orb      $2, %dl
   pop      %r15
   jmp      .1615
.1620:
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jnz      .1626
   mov      $2, %rdx
   jmp      .1615
.1626:
   testb    $0x02, %bl
   jz       .1628
   mov      $18, %rdx
   shr      $4, %rbx
.1629:
   shr      $8, %rbx
   jz       .1615
   add      $16, %rdx
   jmp      .1629
.1628:
   mov      $130, %rdx
.1632:
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .1633
   add      $128, %rdx
   jmp      .1632
.1633:
   shr      $4, %rbx
   jz       .1615
.1635:
   add      $16, %rdx
   shr      $8, %rbx
   jnz      .1635
.1615:
   mov      %rdx, %rbx
   pop      %r13
   ret

   .balign  16
   .global  sizeCE_C
sizeCE_C:
   add      $16, %rdx
.1636:
   cmpq     $Quote, (%rbx)
   jnz      .1637
   cmp      8(%rbx), %rbx
   jz       ret
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      ret
   add      $16, %rdx
   jmp      .1636
.1637:
   push     %r13
   mov      %rbx, %r13
.1638:
   testb    $0x0E, (%rbx)
   jnz      .1639
   push     %rbx
   mov      (%rbx), %rbx
   call     sizeCE_C
   pop      %rbx
.1639:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1640
   cmp      %r13, %rbx
   jz       .1640
   add      $16, %rdx
   jmp      .1638
.1640:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doAssoc
doAssoc:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r13
.1641:
   testb    $0x0E, %r13b
   jnz      .1642
   testb    $0x0E, (%r13)
   jnz      .1643
   mov      8(%rbp), %rax
   mov      (%r13), %r10
   mov      (%r10), %rbx
   call     equalAE_F
   jz       .1644
.1643:
   mov      8(%r13), %r13
   jmp      .1641
.1642:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1644:
   mov      (%r13), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doAsoq
doAsoq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
.1646:
   testb    $0x0E, %bl
   jnz      retNil
   mov      (%rbx), %rdx
   testb    $0x0E, %dl
   jnz      .1647
   cmp      (%rdx), %rax
   jz       .1648
.1647:
   mov      8(%rbx), %rbx
   jmp      .1646
.1648:
   mov      %rdx, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doRank
doRank:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   testb    $0x0E, %r13b
   jnz      doRank_10
   mov      %r12, %r15
   mov      %r13, %r14
.1650:
   add      $1, %r15
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1650
   mov      (%r13), %r10
   mov      (%r10), %rax
   cmp      $Nil, %rbx
   jnz      .1651
   mov      16(%rbp), %rbx
   call     compareAE_F
   ja       doRank_10
.1652:
   mov      %r15, %rdx
   shr      $1, %rdx
   jz       .1657
   mov      %r13, %r14
.1654:
   mov      8(%r14), %r14
   sub      $1, %rdx
   jnz      .1654
   mov      (%r14), %r10
   mov      (%r10), %rax
   mov      16(%rbp), %rbx
   call     compareAE_F
   jbe      .1655
   mov      %r13, %r14
   shr      $1, %r15
   jmp      .1652
.1655:
   mov      %r14, %r13
   mov      %r15, %rdx
   shr      $1, %rdx
   sub      %rdx, %r15
   jmp      .1652
.1651:
   mov      16(%rbp), %rbx
   call     compareAE_F
   jc       doRank_10
.1658:
   mov      %r15, %rdx
   shr      $1, %rdx
   jz       .1657
   mov      %r13, %r14
.1660:
   mov      8(%r14), %r14
   sub      $1, %rdx
   jnz      .1660
   mov      (%r14), %r10
   mov      (%r10), %rax
   mov      16(%rbp), %rbx
   call     compareAE_F
   jnc      .1661
   mov      %r13, %r14
   shr      $1, %r15
   jmp      .1658
.1661:
   mov      %r14, %r13
   mov      %r15, %rdx
   shr      $1, %rdx
   sub      %rdx, %r15
   jmp      .1658
.1657:
   mov      (%r13), %rbx
   jmp      .1663
doRank_10:
   mov      $Nil, %rbx
.1663:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMatch
doMatch:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %rdx
   call     matchCE_F
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
matchCE_F:
   testb    $0x0E, %dl
   jz       .1665
   testb    $0x06, %dl
   jnz      .1666
   mov      -8(%rdx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1666
   mov      %rbx, (%rdx)
   ret
.1666:
   mov      %rdx, %rax
   jmp      equalAE_F
.1665:
   mov      (%rdx), %r13
   testb    $0x06, %r13b
   jnz      .1668
   testb    $0x08, %r13b
   jz       .1668
   mov      -8(%r13), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1668
   testb    $0x0E, %bl
   jz       .1671
   mov      8(%rdx), %rax
   call     equalAE_F
   jnz      ret
   movq     $Nil, (%r13)
   ret
.1671:
   push     %rdx
   push     %rbx
   mov      8(%rdx), %rdx
   mov      8(%rbx), %rbx
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      .1672
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      (%rdx), %r11
   mov      %rax, (%r11)
   jmp      retz
.1672:
   push     %rdx
   push     %rbx
   mov      8(%rdx), %rdx
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      .1673
   mov      (%rdx), %r11
   movq     $Nil, (%r11)
   ret
.1673:
   push     %rdx
   push     %rbx
   mov      8(%rbx), %rbx
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      .1668
   mov      (%rdx), %r13
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      (%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r13)
   jmp      retz
.1668:
   testb    $0x0E, %bl
   jnz      ret
   pushq    8(%rdx)
   pushq    8(%rbx)
   mov      (%rdx), %rdx
   mov      (%rbx), %rbx
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      ret
   jmp      matchCE_F

   .balign  16
   nop
   nop
   .global  doFill
doFill:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %r13
   mov      16(%rbp), %rbx
   call     fillE_FE
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
fillE_FE:
   testb    $0x06, %bl
   jnz      ret
   testb    $0x08, %bl
   jz       .1675
   cmp      $Nil, %r13
   jnz      .1676
   cmp      $At, %rbx
   jz       retnz
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1677
   mov      (%rbx), %rbx
.1677:
   rep
   ret
.1676:
   mov      %r13, %rdx
.1678:
   testb    $0x0E, %dl
   jnz      .1679
   cmp      (%rdx), %rbx
   jnz      .1680
   mov      (%rbx), %rbx
   ret
.1680:
   mov      8(%rdx), %rdx
   jmp      .1678
.1679:
   cmp      %rdx, %rbx
   jnz      .1681
   mov      (%rbx), %rbx
.1681:
   rep
   ret
.1675:
   push     %rbx
   mov      (%rbx), %rbx
   call     fillE_FE
   jnz      .1682
   pop      %rdx
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%rdx), %rbx
   call     fillE_FE
   call     consE_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   or       %r12, %r12
   ret
.1682:
   mov      (%rsp), %r10
   mov      8(%r10), %rbx
   call     fillE_FE
   jnz      .1683
   call     consE_A
   pop      %rdx
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   or       %r12, %r12
   ret
.1683:
   pop      %rbx
   ret

   .balign  16
   .global  unifyCEYZ_F
unifyCEYZ_F:
unifyCEYZ_F_10:
   testb    $0x06, %r14b
   jnz      unifyCEYZ_F_20
   testb    $0x08, %r14b
   jz       unifyCEYZ_F_20
   mov      -8(%r14), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      unifyCEYZ_F_20
   mov      Penv, %r10
   mov      (%r10), %r13
.1687:
   mov      (%r13), %rax
   testb    $0x0E, %al
   jnz      unifyCEYZ_F_20
   mov      (%rax), %rax
   cmp      (%rax), %rdx
   jnz      .1689
   cmp      8(%rax), %r14
   jnz      .1689
   mov      (%r13), %r10
   mov      8(%r10), %rax
   mov      (%rax), %rdx
   mov      8(%rax), %r14
   jmp      unifyCEYZ_F_10
.1689:
   mov      8(%r13), %r13
   jmp      .1687
unifyCEYZ_F_20:
   testb    $0x06, %r15b
   jnz      .1691
   testb    $0x08, %r15b
   jz       .1691
   mov      -8(%r15), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1691
   mov      Penv, %r10
   mov      (%r10), %r13
.1694:
   mov      (%r13), %rax
   testb    $0x0E, %al
   jnz      .1691
   mov      (%rax), %rax
   cmp      (%rax), %rbx
   jnz      .1696
   cmp      8(%rax), %r15
   jnz      .1696
   mov      (%r13), %r10
   mov      8(%r10), %rax
   mov      (%rax), %rbx
   mov      8(%rax), %r15
   jmp      unifyCEYZ_F_20
.1696:
   mov      8(%r13), %r13
   jmp      .1694
.1691:
   cmp      %rbx, %rdx
   jnz      .1698
   mov      %r14, %rax
   push     %rbx
   mov      %r15, %rbx
   call     equalAE_F
   pop      %rbx
   jz       ret
.1698:
   testb    $0x06, %r14b
   jnz      .1699
   testb    $0x08, %r14b
   jz       .1699
   mov      -8(%r14), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1699
   cmp      $At, %r14
   jz       .1702
   call     cons_A
   mov      %rdx, (%rax)
   mov      %r14, 8(%rax)
   call     consA_C
   mov      %rbx, (%rdx)
   mov      %r15, 8(%rdx)
   call     consAC_E
   mov      %rax, (%rbx)
   mov      %rdx, 8(%rbx)
   mov      Penv, %r13
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r13)
.1702:
   or       %r12, %r12
   ret
.1699:
   testb    $0x06, %r15b
   jnz      .1703
   testb    $0x08, %r15b
   jz       .1703
   mov      -8(%r15), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1703
   cmp      $At, %r15
   jz       .1706
   call     cons_A
   mov      %rdx, (%rax)
   mov      %r14, 8(%rax)
   call     consA_C
   mov      %rbx, (%rdx)
   mov      %r15, 8(%rdx)
   call     consAC_E
   mov      %rax, 8(%rbx)
   mov      %rdx, (%rbx)
   mov      Penv, %r13
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r13)
.1706:
   or       %r12, %r12
   ret
.1703:
   testb    $0x0E, %r14b
   jnz      .1707
   testb    $0x0E, %r15b
   jnz      .1707
   mov      Penv, %r10
   pushq    (%r10)
   push     %rdx
   push     %rbx
   push     %r14
   push     %r15
   mov      (%r14), %r14
   mov      (%r15), %r15
   call     unifyCEYZ_F
   pop      %r15
   pop      %r14
   pop      %rbx
   pop      %rdx
   jnz      .1709
   mov      8(%r14), %r14
   mov      8(%r15), %r15
   call     unifyCEYZ_F
   jnz      .1709
   pop      %rax
   ret
.1709:
   mov      Penv, %r11
   popq     (%r11)
   ret
.1707:
   mov      %r14, %rax
   mov      %r15, %rbx
   jmp      equalAE_F

   .balign  16
   nop
   nop
   .global  doProve
doProve:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       .1711
   pop      %r13
   mov      $Nil, %rbx
   ret
.1711:
   push     %r14
   push     %r15
   pushq    Penv
   pushq    Pnl
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   push     %rbx
   mov      %rbx, %r15
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      (%r15), %r10
   mov      (%r10), %r14
   push     %r14
   mov      %rsp, Penv
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      %rsp, Pnl
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      %r14, 56(%rbp)
.1712:
   testb    $0x0E, 24(%rbp)
   jz       doProve_10
   testb    $0x0E, 16(%rbp)
   jnz      .1713
doProve_10:
   testb    $0x0E, 32(%rbp)
   jnz      .1714
   mov      56(%rbp), %r10
   mov      %r10, 8(%rbp)
   mov      40(%rbp), %r10
   mov      (%r10), %rdx
   mov      24(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r14
   mov      48(%rbp), %rbx
   mov      32(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r15
   call     unifyCEYZ_F
   jz       .1715
   mov      32(%rbp), %r10
   mov      8(%r10), %r13
   mov      %r13, 32(%rbp)
   testb    $0x0E, %r13b
   jz       .1712
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r13
   mov      72(%rbp), %r11
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r11)
   mov      (%r13), %r10
   mov      %r10, 48(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 40(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 32(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 24(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 16(%rbp)
   mov      8(%r13), %r13
   mov      %r13, 56(%rbp)
   jmp      .1712
.1715:
   testb    $0x0E, 64(%rbp)
   jnz      .1718
   mov      24(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %rax
   mov      64(%rbp), %rbx
.1719:
   cmp      (%rbx), %rax
   jnz      .1720
   mov      $TSym, %rdx
   mov      24(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %rbx
   call     getEC_E
   mov      %rbx, %r13
   mov      %r12, %rdx
.1721:
   add      $1, %rdx
   mov      32(%rbp), %r10
   mov      (%r10), %rax
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   call     equalAE_F
   jnz      .1721
   mov      %rdx, %rax
   call     outWordA
   call     space
   mov      24(%rbp), %r10
   mov      (%r10), %rbx
   call     uniFillE_E
   call     printE
   call     newline
   jmp      .1718
.1720:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .1719
.1718:
   mov      32(%rbp), %r10
   testb    $0x0E, 8(%r10)
   jnz      .1723
   call     cons_A
   mov      16(%rbp), %r10
   mov      %r10, (%rax)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rax)
   call     consA_C
   mov      24(%rbp), %r10
   mov      %r10, (%rdx)
   mov      %rax, 8(%rdx)
   call     consC_A
   mov      32(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, (%rax)
   mov      %rdx, 8(%rax)
   call     consA_C
   mov      40(%rbp), %r10
   mov      %r10, (%rdx)
   mov      %rax, 8(%rdx)
   call     consC_A
   mov      48(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rdx, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rdx)
   mov      72(%rbp), %r11
   mov      %rdx, (%r11)
.1723:
   mov      48(%rbp), %rdx
   call     cons_A
   mov      %rdx, (%rax)
   mov      40(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 40(%rbp)
   add      $16, %rdx
   mov      %rdx, 48(%rbp)
   call     cons_A
   mov      24(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, (%rax)
   mov      16(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 16(%rbp)
   mov      32(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, 24(%rbp)
   movq     $Nil, 32(%rbp)
   jmp      .1712
.1714:
   mov      24(%rbp), %r13
   testb    $0x0E, %r13b
   jz       .1724
   mov      16(%rbp), %rdx
   mov      (%rdx), %r10
   mov      %r10, 24(%rbp)
   mov      8(%rdx), %r10
   mov      %r10, 16(%rbp)
   mov      40(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, 40(%rbp)
   jmp      .1712
.1724:
   cmpq     $TSym, (%r13)
   jnz      .1725
.1726:
   mov      72(%rbp), %r10
   mov      (%r10), %rdx
   testb    $0x0E, %dl
   jnz      .1727
   mov      (%rdx), %r11
   mov      40(%rbp), %r10
   mov      (%r10), %r10
   cmp      %r10, (%r11)
   jc       .1727
   mov      72(%rbp), %r11
   mov      8(%rdx), %r10
   mov      %r10, (%r11)
   jmp      .1726
.1727:
   mov      8(%r13), %r10
   mov      %r10, 24(%rbp)
   jmp      .1712
.1725:
   mov      (%r13), %r10
   testb    $0x06, (%r10)
   jz       .1728
   mov      (%r13), %r10
   mov      8(%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   mov      (%r13), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   mov      40(%rbp), %rax
.1729:
   sub      $1, %rdx
   jle      .1730
   mov      8(%rax), %rax
   jmp      .1729
.1730:
   call     cons_C
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      40(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 40(%rbp)
   call     cons_C
   mov      8(%r13), %r10
   mov      %r10, (%rdx)
   mov      16(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 16(%rbp)
   mov      8(%rbp), %r10
   mov      %r10, 24(%rbp)
   jmp      .1712
.1728:
   mov      (%r13), %r10
   mov      (%r10), %rbx
   testb    $0x08, %bl
   jz       .1731
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1731
   mov      (%r13), %r10
   mov      8(%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   cmp      $Nil, %rbx
   jz       .1733
   mov      40(%rbp), %r10
   mov      (%r10), %rdx
   mov      (%r13), %r10
   mov      (%r10), %r14
   mov      %rdx, %rbx
   mov      8(%rbp), %r15
   call     unifyCEYZ_F
   jnz      .1733
   mov      24(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, 24(%rbp)
   jmp      .1712
.1733:
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r13
   mov      72(%rbp), %r11
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r11)
   mov      (%r13), %r10
   mov      %r10, 48(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 40(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 32(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 24(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 16(%rbp)
   mov      8(%r13), %r13
   mov      %r13, 56(%rbp)
   jmp      .1712
.1731:
   mov      $TSym, %rdx
   call     getEC_E
   mov      %rbx, 32(%rbp)
   testb    $0x0E, %bl
   jz       .1712
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r13
   mov      72(%rbp), %r11
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r11)
   mov      (%r13), %r10
   mov      %r10, 48(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 40(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 32(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 24(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 16(%rbp)
   mov      8(%r13), %r13
   mov      %r13, 56(%rbp)
   jmp      .1712
.1713:
   movq     $Nil, 8(%rbp)
   mov      56(%rbp), %r13
.1736:
   testb    $0x0E, 8(%r13)
   jnz      .1737
   mov      (%r13), %r10
   mov      (%r10), %r14
   cmpq     $2, (%r14)
   jnz      .1738
   mov      $2, %rdx
   mov      8(%r14), %rbx
   call     lookupCE_E
   call     consE_A
   mov      8(%r14), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      %rbx, 8(%rbp)
.1738:
   mov      8(%r13), %r13
   jmp      .1736
.1737:
   mov      80(%rbp), %r10
   mov      %r10, At
   mov      8(%rbp), %rbx
   testb    $0x0E, %bl
   jz       .1739
   testb    $0x0E, 56(%rbp)
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
.1739:
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Pnl
   popq     Penv
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  lupCE_E
lupCE_E:
   testb    $0x06, %bl
   jnz      .1740
   testb    $0x08, %bl
   jz       .1740
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1740
   mov      Penv, %r10
   mov      (%r10), %r15
.1743:
   mov      (%r15), %rax
   testb    $0x0E, %al
   jnz      .1740
   mov      (%rax), %rax
   cmp      (%rax), %rdx
   jnz      .1745
   cmp      8(%rax), %rbx
   jnz      .1745
   mov      (%r15), %r10
   mov      8(%r10), %rax
   mov      (%rax), %rdx
   mov      8(%rax), %rbx
   jmp      lupCE_E
.1745:
   mov      8(%r15), %r15
   jmp      .1743
.1740:
   testb    $0x0E, %bl
   jnz      .1747
   push     %rdx
   push     %rbx
   mov      (%rbx), %rbx
   call     lupCE_E
   pop      %rax
   pop      %rdx
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%rax), %rbx
   call     lupCE_E
   call     consE_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1747:
   rep
   ret

   .balign  16
   .global  lookupCE_E
lookupCE_E:
   call     lupCE_E
   testb    $0x06, %bl
   jnz      .1748
   testb    $0x08, %bl
   jz       .1748
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jz       retNil
.1748:
   rep
   ret

   .balign  16
   .global  uniFillE_E
uniFillE_E:
   testb    $0x06, %bl
   jnz      .1750
   testb    $0x08, %bl
   jz       .1751
   mov      Pnl, %r10
   mov      (%r10), %r10
   mov      (%r10), %rdx
   jmp      lupCE_E
.1751:
   push     %rbx
   mov      (%rbx), %rbx
   call     uniFillE_E
   pop      %rax
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%rax), %rbx
   call     uniFillE_E
   call     consE_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1750:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doArrow
doArrow:
   push     %r15
   mov      8(%rbx), %rbx
   mov      Pnl, %r10
   mov      (%r10), %rdx
   mov      8(%rbx), %rax
   testb    $0x06, (%rax)
   jz       .1752
   mov      (%rax), %rax
   shr      $4, %rax
.1753:
   sub      $1, %rax
   jle      .1752
   mov      8(%rdx), %rdx
   jmp      .1753
.1752:
   mov      (%rdx), %rdx
   mov      (%rbx), %rbx
   call     lookupCE_E
   pop      %r15
   ret

   .balign  16
   nop
   nop
   .global  doUnify
doUnify:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      Pnl, %r10
   mov      (%r10), %rax
   mov      8(%rax), %r10
   mov      (%r10), %rdx
   mov      (%rax), %rbx
   mov      8(%rbp), %r14
   mov      %r14, %r15
   call     unifyCEYZ_F
   mov      $Nil, %rbx
   jnz      .1755
   mov      Penv, %r10
   mov      (%r10), %rbx
.1755:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSort
doSort:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1756
   push     %r15
   pushq    EnvSort
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   mov      $Nil, %rax
   cmp      $Nil, %rbx
   jnz      .1757
   movq     $cmpDfltA_F, EnvSort
   xchg     (%rsp), %rbx
   jmp      .1758
.1757:
   movq     $cmpUserAX_F, EnvSort
   xchg     (%rsp), %rbx
   push     %rax
   push     %rax
   push     %rax
.1758:
   push     %rbx
   push     %rax
   push     %rax
   push     %rax
   push     %rax
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rax
.1759:
   mov      48(%rbp), %r10
   mov      %r10, 32(%rbp)
   mov      56(%rbp), %r10
   mov      %r10, 40(%rbp)
   lea      32(%rbp), %r14
   testb    $0x0E, 40(%rbp)
   jnz      .1760
   mov      %r14, %rax
   mov      EnvSort, %r10
   call     *%r10
   jc       .1760
   lea      40(%rbp), %r14
.1760:
   mov      (%r14), %rax
   mov      %rax, 8(%rbp)
   testb    $0x0E, %al
   jnz      .1762
   mov      8(%rax), %r10
   mov      %r10, (%r14)
.1762:
   mov      %rax, 48(%rbp)
   lea      8(%rax), %r11
   mov      %r11, -16(%rbp)
   mov      48(%rbp), %r10
   mov      %r10, 24(%rbp)
   movq     $Nil, 8(%rax)
   movq     $Nil, 56(%rbp)
   lea      56(%rbp), %r11
   mov      %r11, -8(%rbp)
.1763:
   testb    $0x0E, 40(%rbp)
   jz       .1764
   testb    $0x0E, 32(%rbp)
   jnz      .1765
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   testb    $0x0E, %r14b
   jnz      .1766
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
.1766:
   mov      %r14, 16(%rbp)
   lea      16(%rbp), %rax
   mov      EnvSort, %r10
   call     *%r10
   jnc      .1768
   mov      -8(%rbp), %r10
   xchg     %r10, -16(%rbp)
   mov      %r10, -8(%rbp)
   jmp      .1768
.1764:
   testb    $0x0E, 32(%rbp)
   jz       .1769
   testb    $0x0E, 40(%rbp)
   jnz      .1765
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      %r14, 16(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
   lea      16(%rbp), %rax
   mov      EnvSort, %r10
   call     *%r10
   jnc      .1768
   mov      -8(%rbp), %r10
   xchg     %r10, -16(%rbp)
   mov      %r10, -8(%rbp)
   jmp      .1768
.1769:
   lea      16(%rbp), %rax
   mov      32(%rbp), %r10
   mov      %r10, (%rax)
   mov      EnvSort, %r10
   call     *%r10
   jnc      .1772
   lea      16(%rbp), %rax
   mov      40(%rbp), %r10
   mov      %r10, (%rax)
   mov      EnvSort, %r10
   call     *%r10
   jc       .1773
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
   jmp      .1768
.1773:
   lea      32(%rbp), %rax
   mov      EnvSort, %r10
   call     *%r10
   jnc      .1775
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
   jmp      .1776
.1775:
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
.1776:
   mov      -8(%rbp), %r10
   xchg     %r10, -16(%rbp)
   mov      %r10, -8(%rbp)
   jmp      .1768
.1772:
   lea      16(%rbp), %rax
   mov      40(%rbp), %r10
   mov      %r10, (%rax)
   mov      EnvSort, %r10
   call     *%r10
   jnc      .1778
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
   jmp      .1768
.1778:
   lea      32(%rbp), %rax
   mov      EnvSort, %r10
   call     *%r10
   jnc      .1780
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
   jmp      .1768
.1780:
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
.1768:
   mov      -16(%rbp), %r11
   mov      %r14, (%r11)
   lea      8(%r14), %r11
   mov      %r11, -16(%rbp)
   movq     $Nil, 8(%r14)
   mov      %r14, 24(%rbp)
   jmp      .1763
.1765:
   testb    $0x0E, 56(%rbp)
   jz       .1759
   mov      48(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvSort
   pop      %r15
.1756:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  cmpDfltA_F
cmpDfltA_F:
   mov      8(%rax), %r10
   mov      (%r10), %rbx
   mov      (%rax), %r10
   mov      (%r10), %rax
   jmp      compareAE_F

   .balign  16
   .global  cmpUserAX_F
cmpUserAX_F:
   push     %r14
   lea      64(%rbp), %r15
   mov      8(%rax), %r10
   mov      (%r10), %r10
   mov      %r10, (%r15)
   mov      (%rax), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%r15)
   lea      16(%r15), %r14
   call     applyXYZ_E
   cmp      $Nil, %rbx
   jz       .1782
   stc
.1782:
   pop      %r14
   ret

   .balign  16
   .global  zapZeroA_A
zapZeroA_A:
   push     %rax
   mov      %rsp, %rdx
   mov      %rdx, %rbx
.1783:
   testb    $0x02, 4(%rax)
   jnz      .1784
   cmp      %r12, -4(%rax)
   jz       .1785
   mov      %rdx, %rbx
.1785:
   lea      4(%rax), %rdx
   mov      (%rdx), %rax
   jmp      .1783
.1784:
   cmpq     $2, 4(%rax)
   jnz      .1786
   mov      -4(%rax), %rax
   cmp      %r12, %rax
   jz       .1787
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1786
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rdx)
   jmp      .1786
.1787:
   mov      (%rbx), %r10
   mov      -4(%r10), %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jz       .1790
   movq     $2, (%rdx)
   jmp      .1786
.1790:
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rbx)
.1786:
   pop      %rax
   ret

   .balign  16
   .global  twiceA_A
twiceA_A:
   testb    $0x02, %al
   jz       .1792
   xorb     $3, %al
   shl      $1, %rax
   jnc      Ret
   rcr      $1, %rax
   shr      $3, %rax
   jmp      boxNumA_A
.1792:
   push     %rax
   mov      -4(%rax), %rdx
   shl      $1, %rdx
.1793:
   pushf
   mov      %rdx, -4(%rax)
   mov      4(%rax), %rbx
   testb    $0x02, %bl
   jnz      .1794
   mov      %rbx, %rax
   mov      -4(%rax), %rdx
   popf
   rcl      $1, %rdx
   jmp      .1793
.1794:
   shr      $4, %rbx
   popf
   rcl      $1, %rbx
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .1795
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .1796
.1795:
   call     boxNumE_E
.1796:
   mov      %rbx, 4(%rax)
   pop      %rax
   ret

   .balign  16
   .global  halfA_A
halfA_A:
   testb    $0x02, %al
   jz       .1797
   shr      $1, %rax
   andb     $~9, %al
   orb      $2, %al
   ret
.1797:
   mov      -4(%rax), %rdx
   mov      4(%rax), %rbx
   testb    $0x02, %bl
   jz       .1798
   shr      $5, %rbx
   jz       .1799
   rcr      $1, %rdx
   jmp      .1800
.1799:
   rcr      $1, %rdx
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      .1800
   shl      $4, %rdx
   orb      $2, %dl
   mov      %rdx, %rax
   ret
.1800:
   mov      %rdx, -4(%rax)
   shl      $4, %rbx
   orb      $2, %bl
   mov      %rbx, 4(%rax)
   ret
.1798:
   push     %rax
.1802:
   testb    $1, -4(%rbx)
   jz       .1803
   stc
.1803:
   rcr      $1, %rdx
   mov      %rdx, -4(%rax)
   mov      4(%rbx), %rdx
   testb    $0x02, %dl
   jnz      .1804
   mov      %rbx, %rax
   mov      %rdx, %rbx
   mov      -4(%rax), %rdx
   jmp      .1802
.1804:
   shr      $5, %rdx
   jz       .1805
   rcrq     $1, -4(%rbx)
   shl      $4, %rdx
   orb      $2, %dl
   jmp      .1806
.1805:
   mov      -4(%rbx), %rdx
   rcr      $1, %rdx
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      .1807
   shl      $4, %rdx
   orb      $2, %dl
   mov      %rdx, 4(%rax)
   pop      %rax
   ret
.1807:
   mov      %rdx, -4(%rbx)
   mov      $2, %rdx
.1806:
   mov      %rdx, 4(%rbx)
   pop      %rax
   ret

   .balign  16
   .global  tenfoldA_A
tenfoldA_A:
   testb    $0x02, %al
   jz       .1808
   shr      $4, %rax
   mov      $10, %r10
   mul      %r10
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      boxNumA_A
   shl      $4, %rax
   orb      $2, %al
   ret
.1808:
   push     %r13
   push     %rax
   mov      %rax, %r13
   mov      -4(%r13), %rax
   mov      $10, %r10
   mul      %r10
.1809:
   mov      %rax, -4(%r13)
   mov      %rdx, %rbx
   mov      4(%r13), %rax
   testb    $0x02, %al
   jnz      .1810
   mov      %rax, %r13
   mov      -4(%r13), %rax
   mov      $10, %r10
   mul      %r10
   add      %rbx, %rax
   adc      %r12, %rdx
   jmp      .1809
.1810:
   shr      $4, %rax
   mov      $10, %r10
   mul      %r10
   add      %rbx, %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1811
   shl      $4, %rax
   orb      $2, %al
   jmp      .1812
.1811:
   call     boxNumA_A
.1812:
   mov      %rax, 4(%r13)
   pop      %rax
   pop      %r13
   ret

   .balign  16
   .global  shluA_A
shluA_A:
   testb    $0x02, %al
   jz       .1813
   xorb     $3, %al
   shl      $1, %rax
   jnc      Ret
   rcr      $1, %rax
   shr      $3, %rax
   jmp      boxNumA_A
.1813:
   call     boxNum_E
   mov      -4(%rax), %r10
   mov      %r10, -4(%rbx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   shlq     $1, -4(%rbx)
   pushf
.1814:
   mov      4(%rax), %rax
   testb    $0x02, %al
   jnz      .1815
   call     boxNum_C
   mov      %rdx, 4(%rbx)
   mov      -4(%rax), %rbx
   popf
   rcl      $1, %rbx
   pushf
   mov      %rbx, -4(%rdx)
   mov      %rdx, %rbx
   jmp      .1814
.1815:
   shr      $4, %rax
   popf
   rcl      $1, %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1816
   shl      $4, %rax
   orb      $2, %al
   jmp      .1817
.1816:
   call     boxNumA_A
.1817:
   mov      %rax, 4(%rbx)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .global  shruA_A
shruA_A:
   testb    $0x02, %al
   jz       .1818
   shr      $1, %rax
   andb     $~9, %al
   orb      $2, %al
   ret
.1818:
   mov      4(%rax), %rbx
   testb    $0x02, %bl
   jz       .1819
   mov      -4(%rax), %rdx
   shr      $5, %rbx
   jz       .1820
   rcr      $1, %rdx
   jmp      .1821
.1820:
   rcr      $1, %rdx
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      .1821
   shl      $4, %rdx
   orb      $2, %dl
   mov      %rdx, %rax
   ret
.1821:
   shl      $4, %rbx
   orb      $2, %bl
   jmp      consNumCE_A
.1819:
   call     boxNum_C
   mov      -4(%rax), %r10
   mov      %r10, -4(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1823:
   testb    $1, -4(%rbx)
   jz       .1824
   stc
.1824:
   rcrq     $1, -4(%rdx)
   testb    $0x02, 4(%rbx)
   jnz      .1825
   call     boxNum_A
   mov      -4(%rbx), %r10
   mov      %r10, -4(%rax)
   mov      %rax, 4(%rdx)
   mov      4(%rbx), %rbx
   mov      %rax, %rdx
   jmp      .1823
.1825:
   mov      4(%rbx), %rax
   shr      $5, %rax
   jz       .1826
   mov      -4(%rbx), %rbx
   rcr      $1, %rbx
   shl      $4, %rax
   orb      $2, %al
   call     consNumEA_E
   mov      %rbx, 4(%rdx)
   jmp      .1827
.1826:
   mov      -4(%rbx), %rbx
   rcr      $1, %rbx
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .1828
   shl      $4, %rbx
   orb      $2, %bl
   mov      %rbx, 4(%rdx)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1828:
   call     boxNum_A
   mov      %rbx, -4(%rax)
   mov      %rax, 4(%rdx)
.1827:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .global  anduAE_A
anduAE_A:
   testb    $0x02, %al
   jz       .1829
   testb    $0x02, %bl
   jnz      .1830
   mov      -4(%rbx), %rbx
   shl      $4, %rbx
   orb      $2, %bl
.1830:
   and      %rbx, %rax
   ret
.1829:
   testb    $0x02, %bl
   jz       .1831
   mov      -4(%rax), %rax
   shl      $4, %rax
   orb      $2, %al
   and      %rbx, %rax
   ret
.1831:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   and      -4(%rbx), %rdx
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1832:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1833
   testb    $0x02, %bl
   jnz      .1834
   mov      -4(%rbx), %rbx
   shl      $4, %rbx
   orb      $2, %bl
.1834:
   and      %rbx, %rax
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1833:
   testb    $0x02, %bl
   jz       .1835
   mov      -4(%rax), %rax
   shl      $4, %rax
   orb      $2, %al
   and      %rbx, %rax
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1835:
   mov      -4(%rax), %rdx
   and      -4(%rbx), %rdx
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1832

   .balign  16
   .global  oruAE_A
oruAE_A:
   testb    $0x02, %al
   jz       .1836
   testb    $0x02, %bl
   jz       .1837
   or       %rbx, %rax
   ret
.1837:
   shr      $4, %rax
   or       -4(%rbx), %rax
   mov      4(%rbx), %rbx
   jmp      consNumAE_A
.1836:
   testb    $0x02, %bl
   jz       .1838
   shr      $4, %rbx
   or       -4(%rax), %rbx
   mov      4(%rax), %rax
   jmp      consNumEA_A
.1838:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   or       -4(%rbx), %rdx
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1839:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1840
   testb    $0x02, %bl
   jz       .1841
   or       %rbx, %rax
   jmp      .1842
.1841:
   shr      $4, %rax
   or       -4(%rbx), %rax
   mov      4(%rbx), %rbx
   call     consNumAE_A
.1842:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1840:
   testb    $0x02, %bl
   jz       .1843
   shr      $4, %rbx
   or       -4(%rax), %rbx
   mov      4(%rax), %rax
   call     consNumEA_A
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1843:
   mov      -4(%rax), %rdx
   or       -4(%rbx), %rdx
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1839

   .balign  16
   .global  xoruAE_A
xoruAE_A:
   testb    $0x02, %al
   jz       .1844
   testb    $0x02, %bl
   jz       .1845
   xor      %rbx, %rax
   orb      $2, %al
   ret
.1845:
   shr      $4, %rax
   xor      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   call     consNumAE_A
   jmp      zapZeroA_A
.1844:
   testb    $0x02, %bl
   jz       .1846
   shr      $4, %rbx
   xor      -4(%rax), %rbx
   mov      4(%rax), %rax
   call     consNumEA_A
   jmp      zapZeroA_A
.1846:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   xor      -4(%rbx), %rdx
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1847:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1848
   testb    $0x02, %bl
   jz       .1849
   xor      %rbx, %rax
   orb      $2, %al
   jmp      .1850
.1849:
   shr      $4, %rax
   xor      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   call     consNumAE_A
.1850:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1848:
   testb    $0x02, %bl
   jz       .1851
   shr      $4, %rbx
   xor      -4(%rax), %rbx
   mov      4(%rax), %rax
   call     consNumEA_A
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1851:
   mov      -4(%rax), %rdx
   xor      -4(%rbx), %rdx
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1847

   .balign  16
   .global  adduAE_A
adduAE_A:
   testb    $0x02, %al
   jz       .1852
   testb    $0x02, %bl
   jz       adduAE_A_10
   andb     $~2, %bl
   add      %rbx, %rax
   jnc      Ret
   rcr      $1, %rax
   shr      $3, %rax
   jmp      boxNumA_A
.1852:
   testb    $0x02, %bl
   jz       .1853
   xchg     %rbx, %rax
adduAE_A_10:
   shr      $4, %rax
   add      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   jnc      consNumAE_A
   call     consNumAE_A
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
.1854:
   testb    $0x02, %bl
   jz       .1855
   add      $16, %rbx
   jc       .1856
   mov      %rbx, 4(%rax)
   jmp      .1857
.1856:
   rcr      $1, %rbx
   shr      $3, %rbx
   call     boxNum_C
   mov      %rbx, -4(%rdx)
   mov      %rdx, 4(%rax)
.1857:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1855:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   add      $1, %rdx
   jc       .1858
   call     consNumCE_E
   mov      %rbx, 4(%rax)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1858:
   call     consNumCE_C
   mov      %rdx, 4(%rax)
   mov      %rdx, %rax
   jmp      .1854
.1853:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   add      -4(%rbx), %rdx
   pushf
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1859:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1860
   testb    $0x02, %bl
   jz       adduAE_A_20
   shr      $4, %rax
   shr      $4, %rbx
   popf
   adc      %rbx, %rax
   shl      $4, %rax
   jc       .1861
   orb      $2, %al
   jmp      .1862
.1861:
   rcr      $1, %rax
   shr      $3, %rax
   call     boxNumA_A
.1862:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1860:
   testb    $0x02, %bl
   jz       .1863
   xchg     %rbx, %rax
adduAE_A_20:
   shr      $4, %rax
   popf
   adc      -4(%rbx), %rax
.1864:
   mov      4(%rbx), %rbx
   jc       .1865
   call     consNumAE_A
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1865:
   call     consNumAE_A
   mov      %rax, 4(%r13)
   mov      %rax, %r13
   testb    $0x02, %bl
   jz       .1866
   add      $16, %rbx
   jc       .1867
   mov      %rbx, 4(%r13)
   jmp      .1868
.1867:
   rcr      $1, %rbx
   shr      $3, %rbx
   call     boxNum_C
   mov      %rbx, -4(%rdx)
   mov      %rdx, 4(%r13)
.1868:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1866:
   mov      -4(%rbx), %rax
   add      $1, %rax
   jmp      .1864
.1863:
   mov      -4(%rax), %rdx
   popf
   adc      -4(%rbx), %rdx
   pushf
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1859

   .balign  16
   .global  subuAE_A
subuAE_A:
   testb    $0x02, %al
   jz       .1869
   testb    $0x02, %bl
   jz       .1870
   andb     $~2, %bl
   sub      %rbx, %rax
   jnc      Ret
   xor      $-16, %rax
   add      $24, %rax
   ret
.1870:
   xchg     %rbx, %rax
   call     subuAE_A_10
   cmpq     $2, %rax
   jz       .1871
   orb      $8, %al
.1871:
   rep
   ret
.1869:
   testb    $0x02, %bl
   jz       .1872
subuAE_A_10:
   shr      $4, %rbx
   mov      -4(%rax), %rdx
   sub      %rbx, %rdx
   mov      4(%rax), %rbx
   jc       .1873
   cmpq     $2, %rbx
   jnz      consNumCE_A
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      consNumCE_A
   mov      %rdx, %rax
   shl      $4, %rax
   orb      $2, %al
   ret
.1873:
   call     consNumCE_A
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
.1874:
   testb    $0x02, %bl
   jz       .1875
   sub      $16, %rbx
   jnc      .1876
   mov      %rdx, %rax
   neg      %rax
   shl      $4, %rax
   orb      $10, %al
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1876:
   mov      %rbx, 4(%rax)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      zapZeroA_A
.1875:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   sub      $1, %rdx
   jc       .1877
   call     consNumCE_E
   mov      %rbx, 4(%rax)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      zapZeroA_A
.1877:
   call     consNumCE_C
   mov      %rdx, 4(%rax)
   mov      %rdx, %rax
   jmp      .1874
.1872:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   sub      -4(%rbx), %rdx
   pushf
   mov      4(%rax), %rax
   call     consNumCA_C
   mov      %rdx, 8(%rbp)
.1878:
   mov      %rdx, %r13
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jz       .1879
   shr      $4, %rbx
.1880:
   testb    $0x02, %al
   jnz      .1881
   mov      -4(%rax), %rdx
   mov      4(%rax), %rax
   popf
   sbb      %rbx, %rdx
   jc       .1882
   call     consNumCA_C
   mov      %rdx, 4(%r13)
subuAE_A_20:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1882:
   pushf
   call     consNumCA_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   mov      %r12, %rbx
   jmp      .1880
.1881:
   shr      $4, %rax
   jmp      .1883
.1879:
   testb    $0x02, %al
   jz       .1884
   shr      $4, %rax
.1885:
   popf
   sbb      -4(%rbx), %rax
   pushf
   call     boxNum_C
   mov      %rax, -4(%rdx)
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   mov      4(%rbx), %rbx
   mov      %r12, %rax
   testb    $0x02, %bl
   jz       .1885
   shr      $4, %rbx
   jmp      .1883
.1884:
   mov      -4(%rax), %rdx
   popf
   sbb      -4(%rbx), %rdx
   pushf
   mov      4(%rax), %rax
   call     consNumCA_C
   mov      %rdx, 4(%r13)
   jmp      .1878
.1883:
   popf
   sbb      %rbx, %rax
   pushf
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 4(%r13)
   popf
   jnc      subuAE_A_20
   mov      8(%rbp), %rax
   mov      %rax, %rbx
.1886:
   notq     -4(%rbx)
   mov      4(%rbx), %rdx
   testb    $0x02, %dl
   jnz      .1887
   mov      %rdx, %rbx
   jmp      .1886
.1887:
   xor      $-16, %rdx
   mov      %rdx, 4(%rbx)
   mov      %rax, %rbx
.1888:
   addq     $1, -4(%rbx)
   jnc      subuAE_A_90
   mov      4(%rbx), %rdx
   testb    $0x02, %dl
   jnz      .1889
   mov      %rdx, %rbx
   jmp      .1888
.1889:
   add      $16, %rdx
   mov      %rdx, 4(%rbx)
subuAE_A_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   call     zapZeroA_A
   orb      $8, %al
   ret

   .balign  16
   .global  muluAE_A
muluAE_A:
   testb    $0x02, %al
   jz       .1890
   cmpq     $2, %rax
   jz       ret
   shr      $4, %rax
   testb    $0x02, %bl
   jz       muluAE_A_10
   xchg     %rbx, %rax
   shr      $4, %rax
   mulq     %rbx
   jc       .1892
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1892
   shl      $4, %rax
   orb      $2, %al
   ret
.1892:
   shl      $4, %rdx
   orb      $2, %dl
   jmp      consNumAC_A
muluAE_A_10:
   push     %r13
   push     %r14
   push     %r15
   mov      %rax, %r14
   mulq     -4(%rbx)
   call     boxNum_X
   mov      %rax, -4(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      %rdx, %r15
.1894:
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .1895
   mov      -4(%rbx), %rax
   mulq     %r14
   add      %r15, %rax
   adc      %r12, %rdx
   mov      %rdx, %r15
   call     boxNum_C
   mov      %rax, -4(%rdx)
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1894
.1895:
   mov      %r14, %rax
   shr      $4, %rbx
   mulq     %rbx
   add      %r15, %rax
   adc      %r12, %rdx
   jnz      .1896
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1896
   shl      $4, %rax
   orb      $2, %al
muluAE_A_20:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.1896:
   shl      $4, %rdx
   orb      $2, %dl
   call     consNumAC_A
   jmp      muluAE_A_20
.1890:
   testb    $0x02, %bl
   jz       .1898
   cmpq     $2, %rbx
   jz       ret
   xchg     %rbx, %rax
   shr      $4, %rax
   jmp      muluAE_A_10
.1898:
   push     %r13
   push     %r14
   push     %r15
   mov      %rax, %r14
   mov      %rbx, %r15
   call     boxNum_X
   mov      %r12, -4(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %r14
.1899:
   mov      -4(%r14), %rax
   mulq     -4(%r15)
   add      -4(%r13), %rax
   adc      %r12, %rdx
.1900:
   mov      %rax, -4(%r13)
   mov      %rdx, %rbx
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1901
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1901:
   mov      %rax, %r13
   mov      4(%r14), %r14
   testb    $0x02, %r14b
   jnz      .1902
   mov      -4(%r14), %rax
   mulq     -4(%r15)
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   jmp      .1900
.1902:
   mov      %r14, %rax
   shr      $4, %rax
   mulq     -4(%r15)
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   mov      %rax, -4(%r13)
   jz       .1903
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1904
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1904:
   mov      %rdx, -4(%rax)
.1903:
   mov      -16(%rbp), %r14
   mov      -8(%rbp), %r10
   mov      4(%r10), %r13
   mov      %r13, -8(%rbp)
   mov      4(%r15), %r15
   testb    $0x02, %r15b
   jz       .1899
   mov      %r15, %rax
   shr      $4, %rax
   mov      %rax, %r15
   mulq     -4(%r14)
   add      -4(%r13), %rax
   adc      %r12, %rdx
.1905:
   mov      %rax, -4(%r13)
   mov      %rdx, %rbx
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1906
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1906:
   mov      %rax, %r13
   mov      4(%r14), %r14
   testb    $0x02, %r14b
   jnz      .1907
   mov      -4(%r14), %rax
   mulq     %r15
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   jmp      .1905
.1907:
   mov      %r14, %rax
   shr      $4, %rax
   mulq     %r15
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   mov      %rax, -4(%r13)
   jz       .1908
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1909
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1909:
   mov      %rdx, -4(%rax)
.1908:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   jmp      zapZeroA_A

   .balign  16
   .global  divuAE_AC
divuAE_AC:
   testb    $0x02, %al
   jz       .1910
   testb    $0x02, %bl
   jz       .1911
   shr      $4, %rax
   mov      %r12, %rdx
   shr      $4, %rbx
   divq     %rbx
   shl      $4, %rax
   orb      $2, %al
   shl      $4, %rdx
   orb      $2, %dl
   ret
.1911:
   mov      %rax, %rdx
   mov      $2, %rax
   ret
.1910:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rax
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %r12, %rdx
.1912:
   testb    $0x02, 4(%rax)
   jnz      .1913
   add      $64, %rdx
   mov      4(%rax), %rax
   jmp      .1912
.1913:
   cmpq     $2, 4(%rax)
   jnz      .1914
   mov      -4(%rax), %rax
   jmp      .1916
.1914:
   add      $64, %rdx
   mov      4(%rax), %rax
   shr      $4, %rax
.1916:
   add      $1, %rdx
   shr      $1, %rax
   jnz      .1916
   testb    $0x02, %bl
   jz       .1920
   shr      $4, %rbx
.1918:
   sub      $1, %rdx
   shr      $1, %rbx
   jnz      .1918
   jmp      .1919
.1920:
   testb    $0x02, 4(%rbx)
   jnz      .1921
   sub      $64, %rdx
   mov      4(%rbx), %rbx
   jmp      .1920
.1921:
   cmpq     $2, 4(%rbx)
   jnz      .1922
   mov      -4(%rbx), %rbx
   jmp      .1924
.1922:
   sub      $64, %rdx
   mov      4(%rbx), %rbx
   shr      $4, %rbx
.1924:
   sub      $1, %rdx
   shr      $1, %rbx
   jnz      .1924
.1919:
   push     %rdx
   add      $1, %rdx
   push     %rdx
   subq     $1, -8(%rbp)
   js       .1930
   mov      8(%rbp), %rax
   call     shluA_A
   mov      %rax, 8(%rbp)
   mov      -8(%rbp), %rdx
.1926:
   cmp      $64, %rdx
   jc       .1927
   sub      $64, %rdx
   mov      %r12, %rbx
   call     consNumEA_A
   jmp      .1926
.1927:
   mov      %rax, 8(%rbp)
   mov      %rdx, -8(%rbp)
.1928:
   subq     $1, -8(%rbp)
   js       .1930
   call     twiceA_A
   mov      %rax, 8(%rbp)
   jmp      .1928
.1930:
   subq     $1, -16(%rbp)
   js       .1931
   mov      24(%rbp), %rax
   call     twiceA_A
   mov      %rax, 24(%rbp)
   mov      16(%rbp), %rbx
   mov      8(%rbp), %rax
   call     cmpuAE_F
   ja       .1932
   mov      16(%rbp), %rax
   mov      8(%rbp), %rbx
   call     subuAE_A
   mov      %rax, 16(%rbp)
   mov      24(%rbp), %rax
   testb    $0x02, %al
   jz       .1933
   add      $16, %al
   mov      %rax, 24(%rbp)
   jmp      .1932
.1933:
   addq     $1, -4(%rax)
.1932:
   mov      8(%rbp), %rax
   call     shruA_A
   mov      %rax, 8(%rbp)
   jmp      .1930
.1931:
   mov      24(%rbp), %rax
   mov      16(%rbp), %rdx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .global  incE_A
incE_A:
   mov      $18, %rax
   testb    $8, %bl
   jz       adduAE_A
   andb     $~8, %bl
   call     subuAE_A
   cmpq     $2, %rax
   jz       .1935
   orb      $8, %al
.1935:
   rep
   ret

   .balign  16
   .global  decE_A
decE_A:
   mov      $18, %rax
   testb    $8, %bl
   jnz      .1936
   xchg     %rbx, %rax
   jmp      subuAE_A
.1936:
   andb     $~8, %bl
   call     adduAE_A
   orb      $8, %al
   ret

   .balign  16
   .global  addAE_A
addAE_A:
   testb    $8, %al
   jnz      .1937
   testb    $8, %bl
   jz       adduAE_A
   andb     $~8, %bl
   jmp      subuAE_A
.1937:
   testb    $8, %bl
   jnz      .1938
   andb     $~8, %al
   call     subuAE_A
   jmp      .1939
.1938:
   andb     $~8, %al
   andb     $~8, %bl
   call     adduAE_A
.1939:
   cmpq     $2, %rax
   jz       .1940
   xorb     $8, %al
.1940:
   rep
   ret

   .balign  16
   .global  subAE_A
subAE_A:
   testb    $8, %al
   jnz      .1941
   testb    $8, %bl
   jz       subuAE_A
   andb     $~8, %bl
   jmp      adduAE_A
.1941:
   testb    $8, %bl
   jnz      .1942
   andb     $~8, %al
   call     adduAE_A
   jmp      .1943
.1942:
   andb     $~8, %al
   andb     $~8, %bl
   call     subuAE_A
.1943:
   cmpq     $2, %rax
   jz       .1944
   xorb     $8, %al
.1944:
   rep
   ret

   .balign  16
   .global  cmpNumAE_F
cmpNumAE_F:
   testb    $8, %al
   jnz      .1945
   testb    $8, %bl
   jz       cmpuAE_F
   clc
   ret
.1945:
   testb    $8, %bl
   jnz      .1946
   or       %al, %al
   stc
   ret
.1946:
   xchg     %rbx, %rax
   andb     $~8, %al
   andb     $~8, %bl

   .balign  16
   .global  cmpuAE_F
cmpuAE_F:
   testb    $0x02, %al
   jz       .1947
   testb    $0x02, %bl
   jz       .1948
   cmp      %rbx, %rax
   ret
.1948:
   or       %al, %al
   stc
   ret
.1947:
   testb    $0x02, %bl
   jz       .1949
   clc
   ret
.1949:
   push     %r13
   push     %r14
   mov      %r12, %r13
   mov      %r12, %r14
.1950:
   mov      4(%rax), %rdx
   cmp      4(%rbx), %rdx
   jnz      .1951
.1952:
   mov      -4(%rax), %rdx
   cmp      -4(%rbx), %rdx
   jnz      .1953
   cmp      %r12, %r13
   jnz      .1954
   pop      %r14
   pop      %r13
   ret
.1954:
   mov      4(%r13), %rdx
   mov      %rax, 4(%r13)
   mov      %r13, %rax
   mov      %rdx, %r13
   mov      4(%r14), %rdx
   mov      %rbx, 4(%r14)
   mov      %r14, %rbx
   mov      %rdx, %r14
   jmp      .1952
.1953:
   pushf
   jmp      .1960
.1951:
   testb    $0x02, %dl
   jz       .1956
   testb    $0x02, 4(%rbx)
   jz       .1957
   cmp      4(%rbx), %rdx
   jmp      .1958
.1957:
   or       %al, %al
   stc
.1958:
   pushf
   jmp      .1960
.1956:
   testb    $0x02, 4(%rbx)
   jz       .1959
   clc
   pushf
   jmp      .1960
.1959:
   mov      %r13, 4(%rax)
   mov      %rax, %r13
   mov      %rdx, %rax
   mov      4(%rbx), %rdx
   mov      %r14, 4(%rbx)
   mov      %rbx, %r14
   mov      %rdx, %rbx
   jmp      .1950
.1960:
   cmp      %r12, %r13
   jz       .1961
   mov      4(%r13), %rdx
   mov      %rax, 4(%r13)
   mov      %r13, %rax
   mov      %rdx, %r13
   mov      4(%r14), %rdx
   mov      %rbx, 4(%r14)
   mov      %r14, %rbx
   mov      %rdx, %r14
   jmp      .1960
.1961:
   popf
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  symToNumXA_FE
symToNumXA_FE:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %r12
   push     %r12
   mov      %r12, %rdx
   call     symByteCX_FACX
   jz       symToNumXA_FE_99
.1962:
   cmp      $32, %al
   ja       .1963
   call     symByteCX_FACX
   jz       symToNumXA_FE_99
   jmp      .1962
.1963:
   cmp      $43, %al
   jz       symToNumXA_FE_10
   cmp      $45, %al
   jnz      .1964
   orb      $1, -16(%rbp)
symToNumXA_FE_10:
   call     symByteCX_FACX
   jz       symToNumXA_FE_99
.1964:
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 8(%rbp)
.1965:
   call     symCharCX_FACX
   jz       .1966
   testb    $1, -24(%rbp)
   jz       .1967
   cmp      %r12, -8(%rbp)
   jnz      .1967
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   cmp      $5, %rax
   jc       .1970
   mov      $18, %rax
   mov      8(%rbp), %rbx
   push     %rdx
   call     adduAE_A
   pop      %rdx
   mov      %rax, 8(%rbp)
.1970:
   call     symByteCX_FACX
   jz       .1966
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   jmp      .1970
.1967:
   cmp      Sep0, %rax
   jnz      .1972
   testb    $1, -24(%rbp)
   jnz      symToNumXA_FE_99
   orb      $1, -24(%rbp)
   jmp      .1965
.1972:
   cmp      Sep3, %rax
   jz       .1965
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   push     %rdx
   push     %r13
   push     %rax
   mov      8(%rbp), %rax
   call     tenfoldA_A
   mov      %rax, 8(%rbp)
   pop      %rbx
   shl      $4, %rbx
   orb      $2, %bl
   call     adduAE_A
   mov      %rax, 8(%rbp)
   pop      %r13
   pop      %rdx
   testb    $1, -24(%rbp)
   jz       .1965
   subq     $1, -8(%rbp)
   jmp      .1965
.1966:
   testb    $1, -24(%rbp)
   jz       .1976
.1977:
   subq     $1, -8(%rbp)
   jc       .1976
   mov      8(%rbp), %rax
   call     tenfoldA_A
   mov      %rax, 8(%rbp)
   jmp      .1977
.1976:
   mov      8(%rbp), %rbx
   testb    $1, -16(%rbp)
   jz       .1979
   cmpq     $2, %rbx
   jz       .1979
   xorb     $8, %bl
.1979:
   stc
symToNumXA_FE_99:
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .global  fmtNum0AE_E
fmtNum0AE_E:
   mov      %r12, Sep3
   mov      %r12, Sep0

   .global  fmtNumAE_E
fmtNumAE_E:
   push     %rdx
   push     %r13
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   mov      %rbx, %rax
   testb    $0x02, %al
   jz       .1981
   pushq    $16
   jmp      .1982
.1981:
   pushq    $1
.1982:
   shr      $3, %al
   push     %rax
   andb     $~8, %bl
   mov      $19, %rdx
   mov      %rbx, %r13
.1983:
   testb    $0x02, %r13b
   jnz      .1984
   add      $20, %rdx
   mov      4(%r13), %r13
   jmp      .1983
.1984:
   add      $7, %rdx
   andb     $~7, %dl
   sub      %rdx, %rsp
   movb     $1, (%rsp)
   mov      %rsp, %r13
   sub      %rdx, %rsp
   mov      %r12b, (%rsp)
   push     %rsp
   push     %r13
   push     %r13
.1986:
   testb    $0x02, %bl
   jz       .1987
   mov      %rbx, %rax
   jmp      .1988
.1987:
   mov      -4(%rbx), %rax
.1988:
   test     -16(%rbp), %rax
   jz       .1989
   mov      %r12, %rdx
   lea      24(%rsp), %r13
   mov      8(%rsp), %r14
.1990:
   cmp      16(%rsp), %r13
   jbe      .1991
   addq     $1, 16(%rsp)
   mov      %r12b, (%r13)
.1991:
   mov      (%r13), %al
   add      (%r14), %al
   add      %rdx, %rax
   mov      %r12, %rdx
   cmp      $10, %al
   jc       .1992
   sub      $10, %al
   mov      $1, %rdx
.1992:
   mov      %al, (%r13)
   add      $1, %r13
   add      $1, %r14
   cmp      (%rsp), %r14
   jbe      .1990
   cmp      %r12, %rdx
   jz       .1989
   addq     $1, 16(%rsp)
   movb     $1, (%r13)
.1989:
   mov      %r12, %rdx
   mov      8(%rsp), %r14
.1994:
   mov      (%r14), %al
   add      %al, %al
   add      %rdx, %rax
   mov      %r12, %rdx
   cmp      $10, %al
   jc       .1995
   sub      $10, %al
   mov      $1, %rdx
.1995:
   mov      %al, (%r14)
   add      $1, %r14
   cmp      (%rsp), %r14
   jbe      .1994
   cmp      %r12, %rdx
   jz       .1996
   addq     $1, (%rsp)
   movb     $1, (%r14)
.1996:
   shlq     $1, -16(%rbp)
   jnz      .1986
   testb    $0x02, %bl
   jnz      .1997
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jz       .1998
   mov      $16, %rax
   jmp      .1999
.1998:
   mov      $1, %rax
.1999:
   mov      %rax, -16(%rbp)
   jmp      .1986
.1997:
   cmp      %r12, -8(%rbp)
   jns      .2000
   cmpq     $-1, -8(%rbp)
   jnz      .2001
   testb    $1, -24(%rbp)
   jz       .2002
   mov      $45, %al
   mov      EnvPutB, %r10
   call     *%r10
.2002:
   mov      16(%rsp), %r14
   lea      24(%rsp), %rbx
.2003:
   mov      (%r14), %al
   add      $48, %al
   mov      EnvPutB, %r10
   call     *%r10
   sub      $1, %r14
   cmp      %rbx, %r14
   jnc      .2003
   jmp      .2004
.2001:
   mov      16(%rsp), %r10
   lea      1(%r10), %rbx
   lea      24(%rsp), %rax
   sub      %rax, %rbx
   testb    $1, -24(%rbp)
   jz       .2005
   add      $1, %rbx
.2005:
   shl      $4, %rbx
   orb      $2, %bl
.2004:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   pop      %rdx
   ret
.2000:
   mov      $4, %rdx
   lea      8(%rbp), %r13
   testb    $1, -24(%rbp)
   jz       .2006
   mov      $45, %al
   call     byteSymBCX_CX
.2006:
   mov      16(%rsp), %rax
   lea      24(%rsp), %r14
   sub      %r14, %rax
   sub      -8(%rbp), %rax
   mov      %rax, -8(%rbp)
   jnc      .2007
   mov      $48, %al
   call     byteSymBCX_CX
   mov      Sep0, %rax
   call     charSymACX_CX
.2008:
   cmpq     $-1, -8(%rbp)
   jnc      .2007
   addq     $1, -8(%rbp)
   mov      $48, %al
   call     byteSymBCX_CX
   jmp      .2008
.2007:
   mov      16(%rsp), %r14
   lea      24(%rsp), %rbx
.2010:
   mov      (%r14), %al
   add      $48, %al
   call     byteSymBCX_CX
   sub      $1, %r14
   cmp      %rbx, %r14
   jc       .2011
   cmp      %r12, -8(%rbp)
   jnz      .2012
   mov      Sep0, %rax
   call     charSymACX_CX
   jmp      .2013
.2012:
   cmp      %r12, Sep3
   jz       .2013
   mov      -8(%rbp), %rax
   cmp      %r12, %rax
   jle      .2013
   push     %rdx
   mov      %r12, %rdx
   mov      $3, %r10
   div      %r10
   cmp      %r12, %rdx
   pop      %rdx
   jnz      .2013
   mov      Sep3, %rax
   call     charSymACX_CX
.2013:
   subq     $1, -8(%rbp)
   jmp      .2010
.2011:
   mov      8(%rbp), %r13
   mov      (%rbp), %rsp
   pop      %rbp
   call     consSymX_E
   pop      %r14
   pop      %r13
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .global  doFormat
doFormat:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %bl
   jz       atomErrEX
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2017
   mov      %r12, %rbx
   jmp      .2018
.2017:
   call     xCntEX_FE
.2018:
   push     %rbx
   pushq    $46
   push     %r12
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2019
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   call     firstCharE_A
   mov      %rax, -16(%rbp)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2019
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   call     firstCharE_A
   mov      %rax, (%rsp)
.2019:
   popq     Sep3
   popq     Sep0
   pop      %rax
   mov      8(%rbp), %rbx
   testb    $0x06, %bl
   jz       .2021
   call     fmtNumAE_E
   jmp      .2022
.2021:
   mov      -8(%rbx), %r13
   call     nameX_X
   call     symToNumXA_FE
   jc       .2022
   mov      $Nil, %rbx
.2022:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doAdd
doAdd:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2024
   testb    $0x06, %bl
   jz       numErrEX
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2025:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2026
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doAdd_10
   testb    $0x06, %bl
   jz       numErrEX
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     addAE_A
   mov      %rax, 8(%rbp)
   jmp      .2025
.2026:
   mov      8(%rbp), %rbx
doAdd_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2024:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSub
doSub:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2027
   testb    $0x06, %bl
   jz       numErrEX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2028
   cmpq     $2, %rbx
   jz       .2027
   xorb     $8, %bl
   jmp      .2027
.2028:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2031:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doSub_10
   testb    $0x06, %bl
   jz       numErrEX
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     subAE_A
   mov      %rax, 8(%rbp)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2031
   mov      8(%rbp), %rbx
doSub_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2027:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doInc
doInc:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2032
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jz       .2033
   call     incE_A
   jmp      .2034
.2033:
   call     checkVarEX
   testb    $0x08, %bl
   jz       .2035
   testb    $0x08, -8(%rbx)
   jz       .2035
   call     dbTouchEX
.2035:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2037
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2034
   testb    $0x06, %bl
   jz       numErrEX
   call     incE_A
   mov      8(%rbp), %r11
   mov      %rax, (%r11)
   jmp      .2034
.2037:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %r10
   mov      (%r10), %rax
   cmp      $Nil, %rax
   jz       .2034
   testb    $0x06, %al
   jz       numErrAX
   mov      8(%rbp), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2034
   testb    $0x06, %bl
   jz       numErrEX
   call     addAE_A
   mov      16(%rbp), %r11
   mov      %rax, (%r11)
.2034:
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2032:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDec
doDec:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2042
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jz       .2043
   call     decE_A
   jmp      .2044
.2043:
   call     checkVarEX
   testb    $0x08, %bl
   jz       .2045
   testb    $0x08, -8(%rbx)
   jz       .2045
   call     dbTouchEX
.2045:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2047
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2044
   testb    $0x06, %bl
   jz       numErrEX
   call     decE_A
   mov      8(%rbp), %r11
   mov      %rax, (%r11)
   jmp      .2044
.2047:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %r10
   mov      (%r10), %rax
   cmp      $Nil, %rax
   jz       .2044
   testb    $0x06, %al
   jz       numErrAX
   mov      8(%rbp), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2044
   testb    $0x06, %bl
   jz       numErrEX
   call     subAE_A
   mov      16(%rbp), %r11
   mov      %rax, (%r11)
.2044:
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2042:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMul
doMul:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2052
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2053
   andb     $~8, %bl
   add      $1, %al
.2053:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2054:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2055
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doMul_10
   testb    $0x06, %bl
   jz       numErrEX
   testb    $8, %bl
   jz       .2056
   andb     $~8, %bl
   xorb     $1, -8(%rbp)
.2056:
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     muluAE_A
   mov      %rax, 8(%rbp)
   jmp      .2054
.2055:
   mov      8(%rbp), %rbx
   testb    $1, -8(%rbp)
   jz       doMul_10
   cmpq     $2, %rbx
   jz       doMul_10
   orb      $8, %bl
doMul_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2052:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doMulDiv
doMulDiv:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2059
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2060
   andb     $~8, %bl
   add      $1, %al
.2060:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2061:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doMulDiv_10
   testb    $0x06, %bl
   jz       numErrEX
   testb    $8, %bl
   jz       .2062
   andb     $~8, %bl
   xorb     $1, -8(%rbp)
.2062:
   mov      %rbx, 16(%rbp)
   testb    $0x0E, 8(%r14)
   jnz      .2063
   mov      8(%rbp), %rax
   call     muluAE_A
   mov      %rax, 8(%rbp)
   jmp      .2061
.2063:
   cmpq     $2, %rbx
   jz       divErrX
   mov      %rbx, %rax
   call     shruA_A
   mov      8(%rbp), %rbx
   call     adduAE_A
   mov      16(%rbp), %rbx
   call     divuAE_AC
   mov      %rax, %rbx
   testb    $1, -8(%rbp)
   jz       doMulDiv_10
   cmpq     $2, %rbx
   jz       doMulDiv_10
   orb      $8, %bl
doMulDiv_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2059:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDiv
doDiv:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2066
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2067
   andb     $~8, %bl
   add      $1, %al
.2067:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2068:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2069
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doDiv_10
   testb    $0x06, %bl
   jz       numErrEX
   cmpq     $2, %rbx
   jz       divErrX
   testb    $8, %bl
   jz       .2070
   andb     $~8, %bl
   xorb     $1, -8(%rbp)
.2070:
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     divuAE_AC
   mov      %rax, 8(%rbp)
   jmp      .2068
.2069:
   mov      8(%rbp), %rbx
   testb    $1, -8(%rbp)
   jz       doDiv_10
   cmpq     $2, %rbx
   jz       doDiv_10
   orb      $8, %bl
doDiv_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2066:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doRem
doRem:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2073
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2074
   andb     $~8, %bl
   mov      $1, %al
.2074:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2075:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2076
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doRem_10
   testb    $0x06, %bl
   jz       numErrEX
   cmpq     $2, %rbx
   jz       divErrX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     divuAE_AC
   mov      %rdx, 8(%rbp)
   jmp      .2075
.2076:
   mov      8(%rbp), %rbx
   testb    $1, -8(%rbp)
   jz       doRem_10
   cmpq     $2, %rbx
   jz       doRem_10
   orb      $8, %bl
doRem_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2073:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doShift
doShift:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2079
   testb    $0x06, %bl
   jz       numErrEX
   mov      %rbx, %rax
   andb     $~8, %al
   and      $8, %rbx
   push     %rbx
   cmp      %r12, -8(%rbp)
   jz       .2080
   js       .2081
   call     shruA_A
   mov      %rax, 8(%rbp)
.2082:
   subq     $1, -8(%rbp)
   jz       .2080
   call     halfA_A
   mov      %rax, 8(%rbp)
   jmp      .2082
.2081:
   call     shluA_A
   mov      %rax, 8(%rbp)
.2085:
   addq     $1, -8(%rbp)
   jz       .2080
   call     twiceA_A
   mov      %rax, 8(%rbp)
   jmp      .2085
.2080:
   cmpq     $2, %rax
   jz       .2087
   or       -16(%rbp), %rax
.2087:
   mov      %rax, %rbx
.2079:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLt0
doLt0:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   testb    $8, %bl
   jz       retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doGe0
doGe0:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   testb    $8, %bl
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doGt0
doGt0:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   cmpq     $2, %rbx
   jz       retNil
   testb    $8, %bl
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .global  doAbs
doAbs:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2088
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
.2088:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doBitQ
doBitQ:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2089:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2090
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2090
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      8(%rbp), %rdx
.2091:
   testb    $0x02, %dl
   jnz      .2092
   testb    $0x02, %bl
   jnz      doBitQ_10
   mov      -4(%rbx), %rax
   and      -4(%rdx), %rax
   cmp      -4(%rdx), %rax
   jnz      doBitQ_10
   mov      4(%rdx), %rdx
   mov      4(%rbx), %rbx
   jmp      .2091
.2092:
   testb    $0x02, %bl
   jnz      .2093
   shr      $4, %rdx
   mov      -4(%rbx), %rbx
.2093:
   and      %rdx, %rbx
   cmp      %rdx, %rbx
   jz       .2089
doBitQ_10:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.2090:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doBitAnd
doBitAnd:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2095
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2096:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2097
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doBitAnd_10
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     anduAE_A
   mov      %rax, 8(%rbp)
   jmp      .2096
.2097:
   mov      8(%rbp), %rbx
doBitAnd_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2095:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doBitOr
doBitOr:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2098
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2099:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2100
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doBitOr_10
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     oruAE_A
   mov      %rax, 8(%rbp)
   jmp      .2099
.2100:
   mov      8(%rbp), %rbx
doBitOr_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2098:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doBitXor
doBitXor:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2101
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2102:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2103
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doBitXor_10
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     xoruAE_A
   mov      %rax, 8(%rbp)
   jmp      .2102
.2103:
   mov      8(%rbp), %rbx
doBitXor_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2101:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  initSeedE_E
initSeedE_E:
   push     %rdx
   mov      %r12, %rdx
.2104:
   testb    $0x0E, %bl
   jnz      .2105
   push     %rbx
   mov      (%rbx), %rbx
   call     initSeedE_E
   add      %rbx, %rdx
   pop      %rbx
   mov      8(%rbx), %rbx
   jmp      .2104
.2105:
   cmp      $Nil, %rbx
   jz       .2106
   testb    $0x06, %bl
   jnz      .2108
   mov      -8(%rbx), %rbx
   call     nameE_E
.2108:
   testb    $0x02, %bl
   jnz      .2109
   add      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   jmp      .2108
.2109:
   add      %rbx, %rdx
.2106:
   mov      %rdx, %rbx
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .global  doSeed
doSeed:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     initSeedE_E
   mov      $6364136223846793005, %rax
   mulq     %rbx
   add      $1, %rax
   adc      %r12, %rdx
   mov      %rax, Seed
   mov      %rdx, Seed+8
   mov      Seed+4, %rbx
   andb     $~7, %bl
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .global  doRand
doRand:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      $6364136223846793005, %rax
   mulq     Seed
   add      $1, %rax
   adc      %r12, %rdx
   mov      %rax, Seed
   mov      %rdx, Seed+8
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2110
   mov      Seed+4, %rbx
   andb     $~7, %bl
   orb      $2, %bl
   pop      %r14
   pop      %r13
   ret
.2110:
   cmp      $TSym, %rbx
   jnz      .2111
   mov      Seed, %rax
   rcl      $1, %rax
   jc       .2112
   mov      $Nil, %rbx
.2112:
   pop      %r14
   pop      %r13
   ret
.2111:
   call     xCntEX_FE
   push     %rbx
   mov      8(%r14), %r14
   call     evCntXY_FE
   add      $1, %rbx
   sub      (%rsp), %rbx
   mov      Seed+4, %rax
   mov      %r12, %rdx
   divq     %rbx
   pop      %rbx
   add      %rdx, %rbx
   pop      %r14
   pop      %r13
   jmp      boxCntE_E

   .global  closeAX
closeAX:
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       Ret
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      closeErrEX

   .global  unLockFileAC
unLockFileAC:
   movw     %ax, Flock
   mov      %r12, Flock+8
   shr      $16, %rax
   mov      %rax, Flock+16
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $6, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .global  wrLockFileC
wrLockFileC:
   mov      $1, %rax
   jmp      lockFileAC

   .global  rdLockFileC
rdLockFileC:
   mov      %r12, %rax

   .global  lockFileAC
lockFileAC:
   movw     %ax, Flock
   mov      %r12, Flock+8
   shr      $16, %rax
   mov      %rax, Flock+16
.2113:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $7, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      Ret
   call     errno_A
   cmp      $4, %rax
   jnz      lockErr
   jmp      .2113

   .global  closeOnExecAX
closeOnExecAX:
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      Ret
   mov      $SetFD, %r14
   jmp      errnoEXY
SetFD:
   .string  "SETFD %s"

   .global  nonblockingA_A
nonblockingA_A:
   push     %rdx
   mov      %rax, %rdx
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $3, %rsi
   xor      %rdx, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   push     %rax
   or       $2048, %rax
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %rax
   pop      %rdx
   ret

   .global  initInFileA_A
initInFileA_A:
   mov      %r12, %rdx
initInFileAC_A:
   xchg     %rdx, %rax
initInFileCA_A:
   push     %rax
   push     %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jc       .2114
   push     %r13
   mov      InFDs, %r13
   mov      %rdx, %rbx
   add      $8, %rbx
   mov      %rbx, InFDs
   mov      InFiles, %rax
   call     allocAE_A
   mov      %rax, InFiles
   add      %rax, %r13
   add      %rbx, %rax
.2115:
   mov      %r12, (%r13)
   add      $8, %r13
   cmp      %rax, %r13
   jnz      .2115
   pop      %r13
.2114:
   add      InFiles, %rdx
   mov      (%rdx), %rax
   mov      $8248, %rbx
   call     allocAE_A
   mov      %rax, (%rdx)
   popq     (%rax)
   mov      %r12, 8(%rax)
   mov      %r12, 16(%rax)
   mov      %r12, 24(%rax)
   mov      $1, %rdx
   mov      %rdx, 32(%rax)
   mov      %rdx, 40(%rax)
   popq     48(%rax)
   ret

   .global  initOutFileA_A
initOutFileA_A:
   mov      %rax, %rdx
   push     %rax
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   push     %rax
   shl      $3, %rdx
   cmp      OutFDs, %rdx
   jc       .2116
   push     %r13
   mov      OutFDs, %r13
   mov      %rdx, %rbx
   add      $8, %rbx
   mov      %rbx, OutFDs
   mov      OutFiles, %rax
   call     allocAE_A
   mov      %rax, OutFiles
   add      %rax, %r13
   add      %rbx, %rax
.2117:
   mov      %r12, (%r13)
   add      $8, %r13
   cmp      %rax, %r13
   jnz      .2117
   pop      %r13
.2116:
   add      OutFiles, %rdx
   mov      (%rdx), %rax
   mov      $8216, %rbx
   call     allocAE_A
   mov      %rax, (%rdx)
   popq     16(%rax)
   mov      %r12, 8(%rax)
   popq     (%rax)
   ret

   .global  closeInFileA
closeInFileA:
   shl      $3, %rax
   cmp      InFDs, %rax
   jnc      .2118
   push     %r13
   add      InFiles, %rax
   mov      (%rax), %r13
   cmp      %r12, %r13
   jz       .2119
   cmp      InFile, %r13
   jnz      .2120
   mov      %r12, InFile
.2120:
   mov      %r12, (%rax)
   mov      %rdx, %r12
   mov      48(%r13), %rdi
   call     free
   mov      %r13, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.2119:
   pop      %r13
.2118:
   rep
   ret

   .global  closeOutFileA
closeOutFileA:
   shl      $3, %rax
   cmp      OutFDs, %rax
   jnc      .2121
   push     %r13
   add      OutFiles, %rax
   mov      (%rax), %r13
   cmp      %r12, %r13
   jz       .2122
   cmp      OutFile, %rax
   jnz      .2123
   mov      %r12, OutFile
.2123:
   mov      %r12, (%rax)
   mov      %rdx, %r12
   mov      %r13, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.2122:
   pop      %r13
.2121:
   rep
   ret

   .global  slowZ_F
slowZ_F:
   mov      %r12, 8(%r15)
   mov      %r12, 16(%r15)
.2124:
   mov      %rdx, %r12
   mov      (%r15), %rdi
   lea      56(%r15), %rsi
   mov      $8192, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       .2125
   mov      %rax, 16(%r15)
   ret
.2125:
   call     errno_A
   cmp      $4, %rax
   jz       .2126
   or       %r12, %r12
   ret
.2126:
   cmp      %r12b, Signal
   jz       .2124
   call     sighandler0
   jmp      .2124

   .global  slowNbC_FA
slowNbC_FA:
   mov      %r12, 8(%rdx)
   mov      %r12, 16(%rdx)
.2128:
   mov      (%rdx), %rax
   call     nonblockingA_A
   push     %rax
   mov      %rdx, %r12
   mov      (%r12), %rdi
   lea      56(%r12), %rsi
   mov      $8192, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   xchg     (%rsp), %rax
   mov      %rdx, %r12
   mov      (%r12), %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %rax
   cmp      %r12, %rax
   js       .2129
   mov      %rax, 16(%rdx)
   ret
.2129:
   call     errno_A
   cmp      $11, %rax
   jnz      .2130
   stc
   ret
.2130:
   cmp      $4, %rax
   jz       .2131
   or       %r12, %r12
   ret
.2131:
   cmp      %r12b, Signal
   jz       .2128
   call     sighandler0
   jmp      .2128

   .global  rdBytesCEX_F
rdBytesCEX_F:
.2134:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jg       .2135
   jz       Ret
   call     errno_A
   cmp      $4, %rax
   jnz      Retz
   cmp      %r12b, Signal
   jz       .2134
   call     sighandler0
   jmp      .2134
.2135:
   add      %rax, %r13
   sub      %rax, %rbx
   jnz      .2134
   cmp      %r12, %rax
   ret

   .global  rdBytesNbCEX_F
rdBytesNbCEX_F:
.2137:
   mov      %rdx, %rax
   call     nonblockingA_A
   push     %rax
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   xchg     (%rsp), %rax
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %rax
   cmp      %r12, %rax
   jle      .2138
.2139:
   add      %rax, %r13
   sub      %rax, %rbx
   jnz      .2141
   cmp      %r12, %rax
   ret
.2141:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jg       .2139
   jz       Ret
   call     errno_A
   cmp      $4, %rax
   jnz      Retz
   cmp      %r12b, Signal
   jz       .2141
   call     sighandler0
   jmp      .2141
.2138:
   jz       Ret
   call     errno_A
   cmp      $11, %rax
   jnz      .2144
   stc
   ret
.2144:
   cmp      $4, %rax
   jnz      Retz
   cmp      %r12b, Signal
   jz       .2137
   call     sighandler0
   jmp      .2137

   .global  wrBytesCEX_F
wrBytesCEX_F:
.2146:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     write
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       .2147
   sub      %rax, %rbx
   jz       Ret
   add      %rax, %r13
   jmp      .2148
.2147:
   call     errno_A
   cmp      $9, %rax
   jz       retnz
   cmp      $32, %rax
   jz       retnz
   cmp      $104, %rax
   jz       retnz
   cmp      $4, %rax
   jnz      wrBytesErr
.2148:
   cmp      %r12b, Signal
   jz       .2146
   call     sighandler0
   jmp      .2146

   .balign  16
   .global  clsChildY
clsChildY:
   mov      %r12, (%r14)
   mov      %rdx, %r12
   mov      8(%r14), %rdi
   call     close
   mov      16(%r14), %rdi
   call     close
   mov      40(%r14), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .global  wrChildCXY
wrChildCXY:
   mov      32(%r14), %rbx
   cmp      %r12, %rbx
   jnz      .2150
.2151:
   mov      %rdx, %r12
   mov      16(%r14), %rdi
   mov      %r13, %rsi
   mov      %r12, %rdx
   call     write
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       .2152
   sub      %rax, %rdx
   jz       Ret
   add      %rax, %r13
   jmp      .2151
.2152:
   call     errno_A
   cmp      $11, %rax
   jz       .2150
   cmp      $32, %rax
   jz       clsChildY
   cmp      $104, %rax
   jz       clsChildY
   cmp      $4, %rax
   jnz      wrChildErr
   jmp      .2151
.2150:
   mov      40(%r14), %rax
   add      %rdx, %rbx
   add      $2, %rbx
   call     allocAE_A
   mov      %rax, 40(%r14)
   mov      32(%r14), %rbx
   add      32(%r14), %rbx
   mov      %rdx, %rax
   movw     %ax, (%rbx)
   add      $2, %rbx
   lea      (%rbx), %rdi
   lea      (%r13), %rsi
   mov      %rdx, %rcx
   cld
   rep movsb
   add      $2, %rdx
   addq     $ret, 32(%r14)

   .balign  16
   .global  flushA_F
flushA_F:
   cmp      %r12, %rax
   jz       .2155
   push     %rbx
   mov      8(%rax), %rbx
   cmp      %r12, %rbx
   jz       .2156
   push     %rdx
   push     %r13
   mov      %r12, 8(%rax)
   mov      (%rax), %rdx
   lea      24(%rax), %r13
   call     wrBytesCEX_F
   pop      %r13
   pop      %rdx
.2156:
   pop      %rbx
.2155:
   rep
   ret

   .global  flushAll
flushAll:
   mov      %r12, %rdx
.2157:
   cmp      OutFDs, %rdx
   jnc      .2158
   mov      %rdx, %rax
   add      OutFiles, %rax
   mov      (%rax), %rax
   call     flushA_F
   add      $8, %rdx
   jmp      .2157
.2158:
   rep
   ret

   .global  stdinByte_FA
stdinByte_FA:
   push     %r15
   mov      InFiles, %r10
   mov      (%r10), %r15
   cmp      %r12, %r15
   jz       .2159
   call     getBinaryZ_FB
   movzx    %al, %rax
   pop      %r15
   ret
.2159:
   stc
   pop      %r15
   ret

   .balign  16
   .global  getBinaryZ_FB
getBinaryZ_FB:
   mov      8(%r15), %rax
   cmp      16(%r15), %rax
   jnz      .2160
   call     slowZ_F
   jz       retc
   mov      %r12, %rax
.2160:
   addq     $1, 8(%r15)
   add      %r15, %rax
   mov      56(%rax), %al
   ret

   .balign  16
   .global  byteNumBCX_CX
byteNumBCX_CX:
   movzx    %al, %rax
   testb    $0x04, %r13b
   jnz      .2161
   cmp      $59, %rdx
   jz       .2162
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, (%r13)
   add      $8, %rdx
   ret
.2162:
   mov      (%r13), %rdx
   shr      $3, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, (%r13)
   mov      %rax, %r13
   mov      %r12, %rdx
   ret
.2161:
   cmp      %r12, %rdx
   jnz      .2163
   mov      -4(%r13), %rdx
   shr      $1, %rax
   rcr      $1, %rdx
   mov      %rdx, -4(%r13)
   rcl      $1, %rax
   shl      $3, %rax
   orb      $2, %al
   mov      %rax, 4(%r13)
   mov      $11, %rdx
   ret
.2163:
   cmp      $59, %rdx
   jz       .2164
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, 4(%r13)
   add      $8, %rdx
   ret
.2164:
   mov      4(%r13), %rdx
   shr      $3, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, 4(%r13)
   mov      %rax, %r13
   mov      %r12, %rdx
   ret

   .global  binReadZ_FE
binReadZ_FE:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       ret
   cmp      %r12b, %al
   jz       retNil
   movzx    %al, %rax
   testb    $252, %al
   jnz      .2165
   mov      %rax, %rbx
   cmp      $1, %al
   jnz      retnc
   call     binReadZ_FE
   jc       ret
   push     %r13
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.2166:
   call     binReadZ_FE
   jc       binReadZ_FE_10
   cmp      $3, %rbx
   jz       .2167
   cmp      $2, %rbx
   jnz      .2168
   call     binReadZ_FE
   jnc      .2169
binReadZ_FE_10:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.2169:
   cmp      $3, %rbx
   cmovzq   8(%rbp), %rbx
   mov      %rbx, 8(%r13)
   jmp      .2167
.2168:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      %rdx, %r13
   jmp      .2166
.2167:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.2165:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      %rax, %rbx
   shr      $2, %rbx
   and      $3, %rax
   jnz      .2170
   mov      $3, %rdx
   cmp      $63, %rbx
   jnz      .2174
.2173:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteNumBCX_CX
   sub      $1, %rbx
   jnz      .2173
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   movzx    %al, %rax
   mov      %rax, %rbx
   cmp      $255, %al
   jz       .2173
   or       %al, %al
   jz       binReadZ_FE_20
.2174:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteNumBCX_CX
   sub      $1, %rbx
   jnz      .2174
binReadZ_FE_20:
   mov      8(%rbp), %rbx
   testb    $0x04, %r13b
   jz       .2176
   mov      4(%r13), %rax
   and      $8, %rax
   andb     $~8, 4(%r13)
   or       %rax, %rbx
   jmp      .2176
.2170:
   push     %rax
   mov      $4, %rdx
   cmp      $63, %rbx
   jnz      .2180
.2179:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteSymBCX_CX
   sub      $1, %rbx
   jnz      .2179
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   movzx    %al, %rax
   mov      %rax, %rbx
   cmp      $255, %al
   jz       .2179
   or       %al, %al
   jz       binReadZ_FE_30
.2180:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteSymBCX_CX
   sub      $1, %rbx
   jnz      .2180
binReadZ_FE_30:
   mov      8(%rbp), %r13
   pop      %rax
   cmp      $2, %rax
   jnz      .2181
   call     consSymX_E
   jmp      .2176
.2181:
   cmp      $1, %rax
   jnz      .2183
   push     %r14
   mov      $Intern, %r14
   mov      %r12, %rbx
   call     internEXY_FE
   jnc      .2184
   movq     $Nil, (%rbx)
.2184:
   pop      %r14
   jmp      .2176
.2183:
   cmp      %r12, Extn
   jz       .2186
   mov      %r13, %rax
   shr      $24, %rax
   mov      %rax, %rdx
   and      $255, %rdx
   shr      $12, %rax
   and      $65280, %rax
   or       %rdx, %rax
   add      Extn, %rax
   shl      $24, %rax
   mov      %rax, %rdx
   shl      $12, %rax
   or       %rdx, %rax
   mov      $4486011719516160, %r10
   and      %r10, %rax
   mov      $18442258061990035455, %r10
   and      %r10, %r13
   or       %rax, %r13
.2186:
   call     externX_E
.2176:
   clc
binReadZ_FE_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .global  prByteCEXY
prByteCEXY:
   cmp      %r12, %rdx
   jnz      .2187
   testb    $0x02, %r13b
   jnz      .2188
   mov      -4(%r13), %rbx
   mov      4(%r13), %r13
   jmp      .2189
.2188:
   mov      %r13, %rbx
   shr      $4, %rbx
.2189:
   shr      $1, %r14
   rcl      $1, %rbx
   rcl      $1, %r14
   mov      $8, %rdx
.2187:
   mov      %rbx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   shr      $8, %rbx
   sub      $1, %rdx
   ret

   .balign  16
   .global  prCntCE
prCntCE:
   mov      %rbx, %rax
.2190:
   shr      $8, %rax
   jz       .2191
   add      $4, %rdx
   jmp      .2190
.2191:
   mov      %rdx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   shr      $2, %rdx
.2192:
   mov      %rbx, %rax
   shr      $8, %rbx
   mov      PutBinBZ, %r10
   call     *%r10
   sub      $1, %rdx
   jnz      .2192
   rep
   ret

   .balign  16
   .global  prTellEZ
prTellEZ:
   movq     $putTellBZ, PutBinBZ
   mov      %r12, Extn
   call     binPrintEZ
   ret

   .global  prE
prE:
   movq     $putStdoutB, PutBinBZ

   .global  binPrintEZ
binPrintEZ:
   testb    $0x02, %bl
   jz       .2193
   mov      $4, %rdx
   shr      $3, %rbx
   jmp      prCntCE
.2193:
   testb    $0x04, %bl
   jz       .2194
   push     %r13
   push     %r14
   push     %rbx
   andb     $~8, %bl
   mov      %rbx, %r13
   mov      $8, %rax
.2195:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .2196
   add      $8, %rax
   jmp      .2195
.2196:
   shr      $4, %rbx
   shl      $1, %rdx
   adc      %rbx, %rbx
   jz       .2197
.2198:
   add      $1, %rax
   shr      $8, %rbx
   jnz      .2198
.2197:
   pop      %r14
   shr      $3, %r14
   mov      %r12, %rdx
   cmp      $63, %rax
   jnc      .2199
   push     %rax
   shl      $2, %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2200:
   call     prByteCEXY
   subq     $1, (%rsp)
   jnz      .2200
   jmp      .2201
.2199:
   sub      $63, %rax
   push     %rax
   mov      $252, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   pushq    $63
.2202:
   call     prByteCEXY
   subq     $1, (%rsp)
   jnz      .2202
.2203:
   cmpq     $255, 8(%rsp)
   jc       .2204
   mov      $255, %rax
   mov      %rax, (%rsp)
   mov      PutBinBZ, %r10
   call     *%r10
.2205:
   call     prByteCEXY
   subq     $1, (%rsp)
   jnz      .2205
   subq     $255, 8(%rsp)
   jmp      .2203
.2204:
   pop      %rax
   mov      (%rsp), %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2206:
   subq     $1, (%rsp)
   jc       .2201
   call     prByteCEXY
   jmp      .2206
.2201:
   pop      %rax
   pop      %r14
   pop      %r13
   ret
.2194:
   testb    $0x08, %bl
   jz       .2208
   cmp      $Nil, %rbx
   jnz      .2209
   mov      %r12, %rax
   mov      PutBinBZ, %r10
   jmp      *%r10
.2209:
   testb    $0x08, -8(%rbx)
   jz       .2210
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmp      %r12, Extn
   jz       .2211
   mov      %rbx, %rax
   shr      $24, %rax
   mov      %rax, %rdx
   and      $255, %rdx
   shr      $12, %rax
   and      $65280, %rax
   or       %rdx, %rax
   sub      Extn, %rax
   shl      $24, %rax
   mov      %rax, %rdx
   shl      $12, %rax
   or       %rdx, %rax
   mov      $4486011719516160, %r10
   and      %r10, %rax
   mov      $18442258061990035455, %r10
   and      %r10, %rbx
   or       %rax, %rbx
.2211:
   shl      $2, %rbx
   shr      $6, %rbx
   mov      $7, %rdx
   jmp      prCntCE
.2210:
   push     %r13
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jnz      .2212
   mov      %r12, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   jmp      .2213
.2212:
   mov      $Intern, %r14
   call     isInternEXY_F
   mov      $1, %rdx
   mov      $2, %r10
   cmovnzq  %r10, %rdx
   testb    $0x02, %r13b
   jz       .2214
   add      $4, %rdx
   mov      %r13, %rbx
   shr      $4, %rbx
   call     prCntCE
   jmp      .2213
.2214:
   mov      %r13, %rbx
   mov      $8, %rax
.2216:
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .2217
   add      $8, %rax
   jmp      .2216
.2217:
   shr      $4, %rbx
   jz       .2218
.2219:
   add      $1, %rax
   shr      $8, %rbx
   jnz      .2219
.2218:
   mov      %rax, %rbx
   cmp      $63, %rax
   jnc      .2220
   shl      $2, %rax
   or       %rdx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   mov      %r12, %rdx
.2221:
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   sub      $1, %rbx
   jnz      .2221
   jmp      .2213
.2220:
   mov      $252, %rax
   or       %rdx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   sub      $63, %rbx
   push     %rbx
   mov      $63, %rbx
   mov      %r12, %rdx
.2223:
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   sub      $1, %rbx
   jnz      .2223
.2224:
   cmpq     $255, (%rsp)
   jc       .2225
   mov      $255, %rax
   mov      %rax, %rbx
   mov      PutBinBZ, %r10
   call     *%r10
.2226:
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   sub      $1, %rbx
   jnz      .2226
   subq     $255, (%rsp)
   jmp      .2224
.2225:
   pop      %rbx
   mov      %rbx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2227:
   sub      $1, %rbx
   jc       .2213
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   jmp      .2227
.2213:
   pop      %r14
   pop      %r13
   ret
.2208:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      %rbx, %r14
   mov      $1, %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2229:
   mov      (%r13), %rbx
   call     binPrintEZ
   mov      8(%r13), %r13
   cmp      $Nil, %r13
   jz       .2230
   cmp      %r14, %r13
   jnz      .2231
   mov      $2, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   jmp      .2230
.2231:
   testb    $0x0E, %r13b
   jz       .2229
   mov      $2, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   mov      %r13, %rbx
   call     binPrintEZ
   pop      %r14
   pop      %r13
   ret
.2230:
   pop      %r14
   pop      %r13
   mov      $3, %rax
   mov      PutBinBZ, %r10
   jmp      *%r10

   .balign  16
   .global  putTellBZ
putTellBZ:
   mov      %al, (%r15)
   add      $1, %r15
   mov      TellBuf, %r10
   lea      4095(%r10), %rax
   cmp      %rax, %r15
   jz       tellErr
   rep
   ret

   .balign  16
   .global  tellBegZ_Z
tellBegZ_Z:
   mov      %r15, TellBuf
   add      $2, %r15
   movb     $1, (%r15)
   add      $1, %r15
   ret

   .global  tellEndZ
tellEndZ:
   push     %r13
   push     %r14
   movb     $3, (%r15)
   add      $1, %r15
   mov      TellBuf, %r13
   mov      %r15, %rbx
   sub      %r13, %rbx
   mov      %rbx, %rax
   sub      $2, %rax
   movw     %ax, (%r13)
   push     %rax
   mov      Tell, %rdx
   cmp      %r12, %rdx
   jz       .2233
   call     wrBytesCEX_F
   jz       .2233
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Tell
.2233:
   mov      Child, %r14
   mov      Children, %r15
.2235:
   sub      $48, %r15
   jc       .2236
   cmp      %r12, (%r14)
   jz       .2237
   mov      (%rsp), %rdx
   mov      TellBuf, %r10
   lea      2(%r10), %r13
   call     wrChildCXY
.2237:
   add      $48, %r14
   jmp      .2235
.2236:
   pop      %rax
   pop      %r14
   pop      %r13
   ret

   .global  rdHear_FE
rdHear_FE:
   push     %r15
   mov      Hear, %rax
   shl      $3, %rax
   add      InFiles, %rax
   mov      (%rax), %r15
   movq     $getBinaryZ_FB, GetBinZ_FB
   mov      %r12, Extn
   call     binReadZ_FE
   pop      %r15
   ret

   .balign  16
   .global  symByteCX_FACX
symByteCX_FACX:
   cmp      %r12, %rdx
   jnz      .2238
   cmpq     $2, %r13
   jz       ret
   testb    $0x02, %r13b
   jz       .2239
   mov      %r13, %rdx
   shr      $4, %rdx
   mov      $2, %r13
   jmp      .2238
.2239:
   mov      -4(%r13), %rdx
   mov      4(%r13), %r13
.2238:
   mov      %rdx, %rax
   shr      $8, %rdx
   or       %al, %al
   movzx    %al, %rax
   ret

   .balign  16
   .global  symCharCX_FACX
symCharCX_FACX:
   call     symByteCX_FACX
   jz       ret
   cmp      $255, %al
   jz       .2241
   cmp      $128, %al
   jc       .2242
   testb    $32, %al
   jnz      .2243
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .2244
.2243:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   call     symByteCX_FACX
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.2244:
   call     symByteCX_FACX
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
.2242:
   rep
   ret
.2241:
   mov      $65536, %rax
   or       %rax, %rax
   ret

   .balign  16
   .global  bufStringE_SZ
bufStringE_SZ:
   mov      %rsp, %r15
   pushq    (%r15)
   push     %r13
   cmp      $Nil, %rbx
   jz       .2245
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
.2246:
   call     symByteCX_FACX
   jz       .2245
   mov      %al, (%r15)
   add      $1, %r15
   testb    $7, %r15b
   jnz      .2246
   sub      $8, %rsp
   lea      (%rsp), %rdi
   lea      8(%rsp), %rsi
   lea      (%r15), %rcx
   sub      %rsi, %rcx
   cld
   rep movsb
   sub      $8, %r15
   jmp      .2246
.2245:
   mov      %r12b, (%r15)
   add      $8, %r15
   andb     $~7, %r15b
   pop      %r13
   ret

   .balign  16
   .global  pathStringE_SZ
pathStringE_SZ:
   mov      %rsp, %r15
   pushq    (%r15)
   push     %r13
   cmp      $Nil, %rbx
   jz       .2249
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
   call     symByteCX_FACX
   jz       .2249
   cmp      $43, %al
   jnz      .2251
   mov      %al, (%r15)
   add      $1, %r15
   call     symByteCX_FACX
.2251:
   cmp      $64, %al
   jz       .2252
.2253:
   mov      %al, (%r15)
   add      $1, %r15
   testb    $7, %r15b
   jnz      .2254
   sub      $8, %rsp
   lea      (%rsp), %rdi
   lea      8(%rsp), %rsi
   lea      (%r15), %rcx
   sub      %rsi, %rcx
   cld
   rep movsb
   sub      $8, %r15
.2254:
   call     symByteCX_FACX
   jnz      .2253
   jmp      .2249
.2252:
   push     %rbx
   mov      Home, %rbx
   cmp      %r12, %rbx
   jz       .2256
.2257:
   mov      (%rbx), %al
   mov      %al, (%r15)
   add      $1, %r15
   testb    $7, %r15b
   jnz      .2258
   sub      $8, %rsp
   lea      (%rsp), %rdi
   lea      8(%rsp), %rsi
   lea      (%r15), %rcx
   sub      %rsi, %rcx
   cld
   rep movsb
   sub      $8, %r15
.2258:
   add      $1, %rbx
   cmp      %r12b, (%rbx)
   jnz      .2257
.2256:
   pop      %rbx
.2259:
   call     symByteCX_FACX
   jz       .2249
   mov      %al, (%r15)
   add      $1, %r15
   testb    $7, %r15b
   jnz      .2259
   sub      $8, %rsp
   lea      (%rsp), %rdi
   lea      8(%rsp), %rsi
   lea      (%r15), %rcx
   sub      %rsi, %rcx
   cld
   rep movsb
   sub      $8, %r15
   jmp      .2259
.2249:
   mov      %r12b, (%r15)
   add      $8, %r15
   andb     $~7, %r15b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPath
doPath:
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
   mov      %rsp, %rbx
   call     mkStrE_E
   mov      %r15, %rsp
   pop      %r15
   ret

   .balign  16
   .global  charSymACX_CX
charSymACX_CX:
   cmp      $128, %rax
   jc       byteSymBCX_CX
   cmp      $2048, %rax
   jnc      .2262
   push     %rax
   shr      $6, %rax
   and      $31, %al
   orb      $192, %al
   call     byteSymBCX_CX
   pop      %rax
   and      $63, %al
   orb      $128, %al
   jmp      byteSymBCX_CX
.2262:
   cmp      $65536, %rax
   jnz      .2263
   mov      $255, %al
   jmp      byteSymBCX_CX
.2263:
   push     %rax
   shr      $12, %rax
   and      $15, %al
   orb      $224, %al
   call     byteSymBCX_CX
   mov      (%rsp), %rax
   shr      $6, %rax
   and      $63, %al
   orb      $128, %al
   call     byteSymBCX_CX
   pop      %rax
   and      $63, %al
   orb      $128, %al

   .balign  16
   .global  byteSymBCX_CX
byteSymBCX_CX:
   movzx    %al, %rax
   testb    $0x04, %r13b
   jnz      .2264
   cmp      $60, %rdx
   jz       .2265
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, (%r13)
   add      $8, %rdx
   ret
.2265:
   mov      (%r13), %rdx
   shr      $4, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, (%r13)
   mov      %rax, %r13
   mov      $4, %rdx
   ret
.2264:
   cmp      $60, %rdx
   jz       .2266
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, 4(%r13)
   add      $8, %rdx
   ret
.2266:
   mov      4(%r13), %rdx
   shr      $4, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, 4(%r13)
   mov      %rax, %r13
   mov      $4, %rdx
   ret

   .balign  16
   .global  currFdX_C
currFdX_C:
   mov      EnvInFrames, %rdx
   or       EnvOutFrames, %rdx
   jz       noFdErrX

   .global  currFd_C
currFd_C:
   mov      EnvOutFrames, %rdx
   cmp      %r12, %rdx
   jnz      .2267
   mov      EnvInFrames, %rdx
   jmp      .2268
.2267:
   cmp      %r12, EnvInFrames
   jz       .2268
   cmp      EnvInFrames, %rdx
   jbe      .2268
   mov      EnvInFrames, %rdx
.2268:
   mov      8(%rdx), %rdx
   ret

   .global  rdOpenEXY
rdOpenEXY:
   cmp      $Nil, %rbx
   jnz      .2271
   mov      %r12, 8(%r14)
   mov      %r12, 16(%r14)
   jmp      .2272
.2271:
   testb    $0x06, %bl
   jz       .2273
   testb    $0x02, %bl
   jz       cntErrEX
   mov      %r12, 16(%r14)
   mov      %rbx, %rax
   shr      $4, %rax
   jnc      .2274
   mov      EnvInFrames, %rdx
.2275:
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       badFdErrEX
   sub      $1, %rax
   jnz      .2275
   mov      8(%rdx), %rax
.2274:
   mov      %rax, 8(%r14)
   shl      $3, %rax
   cmp      InFDs, %rax
   jnc      badFdErrEX
   add      InFiles, %rax
   mov      (%rax), %rax
   cmp      %r12, %rax
   jz       badFdErrEX
   jmp      .2272
.2273:
   push     %r15
   testb    $0x08, %bl
   jz       .2277
   movq     $1, 16(%r14)
   call     pathStringE_SZ
.2278:
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2279
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   mov      $1090, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2280
.2279:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   xor      %rsi, %rsi
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
.2280:
   cmp      %r12d, %eax
   jns      .2281
   call     errno_A
   cmp      $4, %rax
   jnz      openErrEX
   cmp      %r12b, Signal
   jz       .2278
   call     sighandlerX
   jmp      .2278
.2281:
   mov      %rax, 8(%r14)
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2283
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2284
.2283:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
.2284:
   mov      8(%r14), %rdx
   call     initInFileCA_A
   mov      8(%r14), %rax
   call     closeOnExecAX
   mov      %r15, %rsp
   jmp      .2285
.2277:
   push     %r13
   push     %r12
   mov      %rbx, %r13
   mov      (%r13), %rbx
   call     xSymE_E
   call     pathStringE_SZ
.2286:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2287
   push     %r15
   mov      (%r13), %rbx
   call     xSymE_E
   call     bufStringE_SZ
   jmp      .2286
.2287:
   push     %r15
   mov      %rsp, %r15
   mov      %r15, %r13
   push     %r12
.2288:
   lea      8(%r13), %rax
   push     %rax
   mov      (%r13), %r13
   cmp      %r12, (%r13)
   jnz      .2288
   mov      8(%r13), %r13
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movslq   (%rsp), %rax
   call     closeOnExecAX
   movslq   4(%rsp), %rax
   call     closeOnExecAX
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, 16(%r14)
   cmp      %r12d, %eax
   js       forkErrX
   jnz      .2289
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   (%rsp), %rax
   call     closeAX
   movslq   4(%rsp), %rax
   cmp      $1, %rax
   jz       .2290
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      $1, %rsi
   call     dup2
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   4(%rsp), %rax
   call     closeAX
.2290:
   mov      %rdx, %r12
   mov      8(%rsp), %rdi
   lea      8(%rsp), %rsi
   call     execvp
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      execErrS
.2289:
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   4(%rsp), %rax
   call     closeAX
   movslq   (%rsp), %rax
   mov      %rax, 8(%r14)
   call     initInFileA_A
   pop      %rax
.2291:
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2291
   pop      %r13
.2285:
   pop      %r15
.2272:
   rep
   ret

   .global  wrOpenEXY
wrOpenEXY:
   cmp      $Nil, %rbx
   jnz      .2292
   movq     $1, 8(%r14)
   mov      %r12, 16(%r14)
   jmp      .2293
.2292:
   testb    $0x06, %bl
   jz       .2294
   testb    $0x02, %bl
   jz       cntErrEX
   mov      %r12, 16(%r14)
   mov      %rbx, %rax
   shr      $4, %rax
   jnc      .2295
   mov      EnvOutFrames, %rdx
.2296:
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       badFdErrEX
   sub      $1, %rax
   jnz      .2296
   mov      8(%rdx), %rax
.2295:
   mov      %rax, 8(%r14)
   shl      $3, %rax
   cmp      OutFDs, %rax
   jnc      badFdErrEX
   add      OutFiles, %rax
   mov      (%rax), %rax
   cmp      %r12, %rax
   jz       badFdErrEX
   jmp      .2293
.2294:
   push     %r15
   testb    $0x08, %bl
   jz       .2298
   movq     $1, 16(%r14)
   call     pathStringE_SZ
.2299:
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2300
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   mov      $1089, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2301
.2300:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $577, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
.2301:
   cmp      %r12d, %eax
   jns      .2302
   call     errno_A
   cmp      $4, %rax
   jnz      openErrEX
   cmp      %r12b, Signal
   jz       .2299
   call     sighandlerX
   jmp      .2299
.2302:
   mov      %rax, 8(%r14)
   call     initOutFileA_A
   mov      8(%r14), %rax
   call     closeOnExecAX
   mov      %r15, %rsp
   jmp      .2304
.2298:
   push     %r13
   push     %r12
   mov      %rbx, %r13
   mov      (%r13), %rbx
   call     xSymE_E
   call     pathStringE_SZ
.2305:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2306
   push     %r15
   mov      (%r13), %rbx
   call     xSymE_E
   call     bufStringE_SZ
   jmp      .2305
.2306:
   push     %r15
   mov      %rsp, %r15
   mov      %r15, %r13
   push     %r12
.2307:
   lea      8(%r13), %rax
   push     %rax
   mov      (%r13), %r13
   cmp      %r12, (%r13)
   jnz      .2307
   mov      8(%r13), %r13
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movslq   (%rsp), %rax
   call     closeOnExecAX
   movslq   4(%rsp), %rax
   call     closeOnExecAX
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, 16(%r14)
   cmp      %r12d, %eax
   js       forkErrX
   jnz      .2308
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   4(%rsp), %rax
   call     closeAX
   movslq   (%rsp), %rax
   cmp      %r12, %rax
   jz       .2309
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     dup2
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   (%rsp), %rax
   call     closeAX
.2309:
   mov      %rdx, %r12
   mov      8(%rsp), %rdi
   lea      8(%rsp), %rsi
   call     execvp
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      execErrS
.2308:
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   (%rsp), %rax
   call     closeAX
   movslq   4(%rsp), %rax
   mov      %rax, 8(%r14)
   call     initOutFileA_A
   pop      %rdx
.2310:
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2310
   pop      %r13
.2304:
   pop      %r15
.2293:
   rep
   ret

   .global  ctOpenEXY
ctOpenEXY:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jnz      .2311
   movq     $-1, 8(%r14)
   call     currFdX_C
   call     rdLockFileC
   jmp      .2312
.2311:
   cmp      $TSym, %rbx
   jnz      .2313
   movq     $-1, 8(%r14)
   call     currFdX_C
   call     wrLockFileC
   jmp      .2312
.2313:
   push     %r15
   call     pathStringE_SZ
.2315:
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2316
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   mov      $66, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2317
.2316:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $66, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
.2317:
   cmp      %r12d, %eax
   jns      .2318
   call     errno_A
   cmp      $4, %rax
   jnz      openErrEX
   cmp      %r12b, Signal
   jz       .2315
   call     sighandlerX
   jmp      .2315
.2318:
   mov      %r15, %rsp
   pop      %r15
   mov      %rax, 8(%r14)
   mov      %rax, %rdx
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2320
   call     rdLockFileC
   jmp      .2321
.2320:
   call     wrLockFileC
.2321:
   mov      8(%r14), %rax
   call     closeOnExecAX
.2312:
   rep
   ret

   .balign  16
   .global  getStdin_A
getStdin_A:
   push     %r15
   mov      InFile, %r15
   cmp      %r12, %r15
   jz       getStdin_A_90
   mov      InFiles, %r10
   cmp      (%r10), %r15
   jz       .2323
   mov      8(%r15), %rax
   cmp      16(%r15), %rax
   jnz      .2324
   call     slowZ_F
   jz       getStdin_A_90
   mov      %r12, %rax
.2324:
   addq     $1, 8(%r15)
   add      %r15, %rax
   mov      56(%rax), %al
   cmp      $10, %al
   jnz      .2325
   addq     $1, 32(%r15)
.2325:
   movzx    %al, %rax
   jmp      .2335
.2323:
   push     %rdx
   push     %rbx
   push     %r13
   testb    $0x0E, Led
   jz       .2327
   mov      %r12, %rdx
   mov      $-1, %rbx
   mov      %r12, %r13
   call     waitFdCEX_A
   call     stdinByte_FA
   jnc      .2329
   mov      $-1, %rax
   jmp      .2329
.2327:
   mov      LineC, %rdx
   cmp      %r12, %rdx
   js       .2330
   mov      LineX, %r13
   jmp      .2331
.2330:
   mov      Led, %rbx
   call     runE_E
   cmp      $Nil, %rbx
   jnz      .2332
   mov      $2, %r13
   jmp      .2333
.2332:
   mov      -8(%rbx), %r13
   call     nameX_X
.2333:
   mov      %r12, %rdx
.2331:
   call     symByteCX_FACX
   jnz      .2334
   mov      $10, %rax
   mov      $-1, %rdx
.2334:
   mov      %r13, LineX
   mov      %rdx, LineC
.2329:
   pop      %r13
   pop      %rbx
   pop      %rdx
   jmp      .2335
getStdin_A_90:
   mov      $-1, %rax
.2335:
   mov      %rax, Chr
   pop      %r15
   ret

   .balign  16
   .global  getParse_A
getParse_A:
   push     %rdx
   push     %r13
   mov      EnvParseX, %r13
   mov      EnvParseC, %rdx
   call     symByteCX_FACX
   jnz      .2336
   mov      EnvParseEOF, %rax
   mov      $255, %al
   ror      $8, %rax
   mov      %rax, EnvParseEOF
   movsx    %al, %rax
.2336:
   mov      %rax, Chr
   mov      %r13, EnvParseX
   mov      %rdx, EnvParseC
   pop      %r13
   pop      %rdx
   ret

   .global  pushInFilesY
pushInFilesY:
   mov      InFile, %rax
   cmp      %r12, %rax
   jz       .2337
   mov      Chr, %r10
   mov      %r10, 24(%rax)
.2337:
   mov      8(%r14), %rax
   shl      $3, %rax
   add      InFiles, %rax
   mov      (%rax), %rax
   mov      %rax, InFile
   cmp      %r12, %rax
   jz       .2338
   mov      24(%rax), %rax
   jmp      .2339
.2338:
   mov      $-1, %rax
.2339:
   mov      %rax, Chr
   mov      EnvGet_A, %r10
   mov      %r10, 24(%r14)
   movq     $getStdin_A, EnvGet_A
   mov      EnvInFrames, %r10
   mov      %r10, (%r14)
   mov      %r14, EnvInFrames
   ret

   .global  pushOutFilesY
pushOutFilesY:
   mov      8(%r14), %rax
   shl      $3, %rax
   add      OutFiles, %rax
   mov      (%rax), %r10
   mov      %r10, OutFile
   mov      EnvPutB, %r10
   mov      %r10, 24(%r14)
   movq     $putStdoutB, EnvPutB
   mov      EnvOutFrames, %r10
   mov      %r10, (%r14)
   mov      %r14, EnvOutFrames
   ret

   .global  pushCtlFilesY
pushCtlFilesY:
   mov      EnvCtlFrames, %r10
   mov      %r10, (%r14)
   mov      %r14, EnvCtlFrames
   ret

   .global  popInFiles
popInFiles:
   mov      EnvInFrames, %rdx
   cmp      %r12, 16(%rdx)
   jz       .2340
   mov      %rdx, %r12
   mov      8(%r12), %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%rdx), %rax
   call     closeInFileA
   cmpq     $1, 16(%rdx)
   jbe      .2340
.2342:
   mov      %rdx, %r12
   mov      16(%r12), %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2340
   call     errno_A
   cmp      $4, %rax
   jnz      closeErrX
   cmp      %r12b, Signal
   jz       .2342
   call     sighandler0
   jmp      .2342
.2340:
   mov      24(%rdx), %r10
   mov      %r10, EnvGet_A
   mov      (%rdx), %rdx
   mov      %rdx, EnvInFrames
   cmp      %r12, %rdx
   jnz      .2345
   mov      InFiles, %r10
   mov      (%r10), %rax
   jmp      .2346
.2345:
   mov      8(%rdx), %rax
   shl      $3, %rax
   add      InFiles, %rax
   mov      (%rax), %rax
.2346:
   mov      %rax, InFile
   cmp      %r12, %rax
   jz       .2347
   mov      24(%rax), %rax
   jmp      .2348
.2347:
   mov      $-1, %rax
.2348:
   mov      %rax, Chr
   ret

   .global  popOutFiles
popOutFiles:
   mov      OutFile, %rax
   call     flushA_F
   mov      EnvOutFrames, %rdx
   cmp      %r12, 16(%rdx)
   jz       .2349
   mov      %rdx, %r12
   mov      8(%r12), %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%rdx), %rax
   call     closeOutFileA
   cmpq     $1, 16(%rdx)
   jbe      .2349
.2351:
   mov      %rdx, %r12
   mov      16(%r12), %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2349
   call     errno_A
   cmp      $4, %rax
   jnz      closeErrX
   cmp      %r12b, Signal
   jz       .2351
   call     sighandler0
   jmp      .2351
.2349:
   mov      24(%rdx), %r10
   mov      %r10, EnvPutB
   mov      (%rdx), %rdx
   mov      %rdx, EnvOutFrames
   cmp      %r12, %rdx
   jnz      .2354
   mov      OutFiles, %r10
   mov      8(%r10), %rax
   jmp      .2355
.2354:
   mov      8(%rdx), %rax
   shl      $3, %rax
   add      OutFiles, %rax
   mov      (%rax), %rax
.2355:
   mov      %rax, OutFile
   ret

   .global  popCtlFiles
popCtlFiles:
   mov      EnvCtlFrames, %rdx
   cmp      %r12, 8(%rdx)
   js       .2356
   mov      %rdx, %r12
   mov      8(%r12), %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2357
.2356:
   call     currFd_C
   mov      $2, %rax
   call     unLockFileAC
.2357:
   mov      EnvCtlFrames, %r10
   mov      (%r10), %r10
   mov      %r10, EnvCtlFrames
   ret

   .balign  16
   .global  getChar_A
getChar_A:
   mov      Chr, %rax
   cmp      $255, %al
   jz       .2358
   cmp      $128, %al
   jc       .2359
   testb    $32, %al
   jnz      .2360
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .2361
.2360:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   mov      EnvGet_A, %r10
   call     *%r10
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.2361:
   mov      EnvGet_A, %r10
   call     *%r10
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
.2359:
   rep
   ret
.2358:
   mov      $65536, %rax
   ret

   .balign  16
   .global  skipC_A
skipC_A:
   mov      Chr, %rax
.2362:
   cmp      %r12, %rax
   js       .2363
.2364:
   cmp      $32, %al
   ja       .2365
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      %r12, %rax
   js       ret
   jmp      .2364
.2365:
   cmp      %rdx, %rax
   jnz      .2363
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $35, %rdx
   jnz      skipC_A_10
   cmp      $123, %al
   jz       .2370
skipC_A_10:
   cmp      $10, %al
   jz       .2369
   cmp      %r12, %rax
   js       ret
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      skipC_A_10
.2370:
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      %r12, %rax
   js       ret
   cmp      $125, %al
   jnz      .2370
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $35, %al
   jnz      .2370
.2369:
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2362
.2363:
   rep
   ret

   .balign  16
   .global  testEscA_F
testEscA_F:
.2373:
   cmp      %r12, %rax
   jns      .2374
   clc
   ret
.2374:
   cmp      $94, %al
   jnz      .2375
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $63, %al
   jnz      .2376
   mov      $127, %al
   jmp      testEscA_F_10
.2376:
   and      $31, %al
testEscA_F_10:
   stc
   ret
.2375:
   cmp      $92, %al
   jnz      testEscA_F_10
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $10, %al
   jnz      testEscA_F_10
.2378:
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $32, %al
   jz       .2378
   cmp      $9, %al
   jz       .2378
   jmp      .2373

   .balign  16
   .global  anonymousX_FE
anonymousX_FE:
   mov      %r12, %rdx
   call     symByteCX_FACX
   cmp      $36, %al
   jnz      Ret
   call     symByteCX_FACX
   cmp      $49, %al
   jc       .2379
   cmp      $55, %al
   ja       .2379
   sub      $48, %al
   mov      %rax, %rbx
   call     symByteCX_FACX
.2381:
   cmp      $48, %al
   jc       .2379
   cmp      $55, %al
   ja       .2379
   shl      $3, %rbx
   sub      $48, %al
   add      %rax, %rbx
   call     symByteCX_FACX
   jnz      .2381
   shl      $4, %rbx
   orb      $8, %bl
   or       %r12, %r12
   ret
.2379:
   rep
   ret

   .global  rdAtomBYL_E
rdAtomBYL_E:
   mov      $4, %rdx
   lea      8(%rbp), %r13
   call     byteSymBCX_CX
   mov      %r14, %rax
.2384:
   cmp      %r12, %rax
   js       rdAtomBYL_E_10
   cld
   mov      $Delim, %rdi
   mov      $(DelimEnd-Delim), %rcx
   repnz scasb
   jz       rdAtomBYL_E_10
   cmp      $92, %al
   jnz      .2386
   mov      EnvGet_A, %r10
   call     *%r10
.2386:
   call     byteSymBCX_CX
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2384
rdAtomBYL_E_10:
   mov      8(%rbp), %r13
   mov      %r12, %rax
   testb    $0x02, Scl
   jz       .2387
   mov      Scl, %rax
   shr      $4, %rax
.2387:
   mov      %r12, Sep3
   movq     $46, Sep0
   call     symToNumXA_FE
   jc       .2388
   mov      8(%rbp), %r13
   call     anonymousX_FE
   jz       .2388
   mov      8(%rbp), %r13
   mov      $Intern, %r14
   mov      %r12, %rbx
   call     internEXY_FE
   jnc      .2388
   movq     $Nil, (%rbx)
.2388:
   rep
   ret
Delim:
   .ascii   " \t\n\r\"'(),[]`~{}"
DelimEnd:

   .global  rdList_E
rdList_E:
   mov      EnvGet_A, %r10
   call     *%r10
.2391:
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jnz      .2392
   mov      EnvGet_A, %r10
   call     *%r10
   mov      $Nil, %rbx
   ret
.2392:
   cmp      $93, %al
   jz       retNil
   cmp      $126, %al
   jz       .2393
   mov      %r12, %rax
   call     readA_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   mov      %rax, %rbx
   jmp      rdList_E_10
.2393:
   mov      EnvGet_A, %r10
   call     *%r10
   mov      %r12, %rax
   call     readA_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   testb    $0x0E, %bl
   jnz      .2394
.2395:
   testb    $0x0E, 8(%rbx)
   jnz      rdList_E_10
   mov      8(%rbx), %rbx
   jmp      .2395
.2394:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2391
rdList_E_10:
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jnz      .2398
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      rdList_E_90
.2398:
   cmp      $93, %al
   jz       rdList_E_90
   cmp      $46, %al
   jnz      .2399
   mov      EnvGet_A, %r10
   call     *%r10
   cld
   mov      $Delim, %rdi
   mov      $(DelimEnd-Delim), %rcx
   repnz scasb
   jnz      .2400
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jz       rdList_E_20
   cmp      $93, %al
   jnz      .2401
rdList_E_20:
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   jmp      .2402
.2401:
   push     %rbx
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, %rax
   pop      %rbx
   mov      %rax, 8(%rbx)
.2402:
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jnz      .2403
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      rdList_E_90
.2403:
   cmp      $93, %al
   jz       rdList_E_90
   mov      8(%rbp), %rbx
   jmp      badDotErrE
.2400:
   push     %r13
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rax, %r14
   mov      $46, %al
   call     rdAtomBYL_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   pop      %rbx
   mov      %rax, 8(%rbx)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   jmp      rdList_E_10
.2399:
   cmp      $126, %al
   jz       .2405
   push     %rbx
   mov      %r12, %rax
   call     readA_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   pop      %rbx
   mov      %rax, 8(%rbx)
   mov      %rax, %rbx
   jmp      rdList_E_10
.2405:
   mov      EnvGet_A, %r10
   call     *%r10
   push     %rbx
   mov      %r12, %rax
   call     readA_E
   mov      (%rsp), %rax
   mov      %rbx, 8(%rax)
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   mov      %rbx, 8(%rax)
.2407:
   testb    $0x0E, 8(%rbx)
   jnz      rdList_E_10
   mov      8(%rbx), %rbx
   jmp      .2407
rdList_E_90:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .global  readA_E
readA_E:
   push     %r13
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   mov      $35, %rdx
   call     skipC_A
   cmp      %r12, %rax
   jns      .2409
   cmp      %r12, -8(%rbp)
   jz       eofErr
   mov      $Nil, %rbx
   jmp      readA_E_99
.2409:
   cmp      %r12, -8(%rbp)
   jz       .2410
   mov      InFile, %rdx
   cmp      %r12, %rdx
   jz       .2410
   mov      32(%rdx), %r10
   mov      %r10, 40(%rdx)
.2410:
   cmp      $40, %al
   jnz      .2412
   call     rdList_E
   cmp      %r12, -8(%rbp)
   jz       readA_E_99
   cmpq     $93, Chr
   jnz      readA_E_99
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      readA_E_99
.2412:
   cmp      $91, %al
   jnz      .2415
   call     rdList_E
   cmpq     $93, Chr
   jnz      suparErrE
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      readA_E_99
.2415:
   cmp      $39, %al
   jnz      .2416
   mov      EnvGet_A, %r10
   call     *%r10
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, %rdx
   call     consC_E
   movq     $Quote, (%rbx)
   mov      %rdx, 8(%rbx)
   jmp      readA_E_99
.2416:
   cmp      $44, %al
   jnz      .2417
   mov      EnvGet_A, %r10
   call     *%r10
   mov      $Uni, %r13
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, %r14
   mov      %rbx, 8(%rbp)
   call     idxPutXY_E
   mov      %r14, %rbx
   jmp      readA_E_99
.2417:
   cmp      $96, %al
   jnz      .2418
   mov      EnvGet_A, %r10
   call     *%r10
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, 8(%rbp)
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      readA_E_99
.2418:
   cmp      $34, %al
   jnz      .2419
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $34, %al
   jnz      .2420
   mov      EnvGet_A, %r10
   call     *%r10
   mov      $Nil, %rbx
   jmp      readA_E_99
.2420:
   call     testEscA_F
   jnc      eofErr
   mov      $4, %rdx
   lea      8(%rbp), %r13
.2421:
   call     byteSymBCX_CX
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $34, %al
   jz       .2422
   call     testEscA_F
   jnc      eofErr
   jmp      .2421
.2422:
   mov      EnvGet_A, %r10
   call     *%r10
   mov      8(%rbp), %r13
   mov      $Transient, %r14
   mov      %r12, %rbx
   call     internEXY_FE
   jmp      readA_E_99
.2419:
   cmp      $123, %al
   jnz      .2423
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $125, %al
   jnz      .2424
   mov      EnvGet_A, %r10
   call     *%r10
   call     cons_E
   movq     $2, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   jmp      readA_E_99
.2424:
   mov      %r12, %rbx
.2425:
   cmp      $64, %al
   jc       .2426
   cmp      $79, %al
   ja       badInputErrB
   sub      $64, %al
   shl      $4, %rbx
   add      %rax, %rbx
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2425
.2426:
   cmp      $48, %al
   jc       badInputErrB
   cmp      $55, %al
   ja       badInputErrB
   sub      $48, %al
   movzx    %al, %rax
   mov      %rax, %rdx
.2427:
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $125, %al
   jz       .2428
   cmp      $48, %al
   jc       badInputErrB
   cmp      $55, %al
   ja       badInputErrB
   sub      $48, %al
   shl      $3, %rdx
   add      %rax, %rdx
   jmp      .2427
.2428:
   mov      EnvGet_A, %r10
   call     *%r10
   call     extNmCE_X
   call     externX_E
   jmp      readA_E_99
.2423:
   cmp      $41, %al
   jz       badInputErrB
   cmp      $93, %al
   jz       badInputErrB
   cmp      $126, %al
   jz       badInputErrB
   cmp      $92, %al
   jnz      .2429
   mov      EnvGet_A, %r10
   call     *%r10
.2429:
   mov      %rax, %r14
   mov      EnvGet_A, %r10
   call     *%r10
   xchg     %r14, %rax
   call     rdAtomBYL_E
readA_E_99:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .global  readC_E
readC_E:
   cmp      %r12, Chr
   jnz      .2430
   mov      EnvGet_A, %r10
   call     *%r10
.2430:
   cmp      Chr, %rdx
   jnz      .2431
   mov      $Nil, %rbx
   jmp      .2432
.2431:
   mov      $1, %rax
   call     readA_E
   push     %rbx
   mov      Chr, %rax
.2433:
   cmp      %r12, %rax
   jle      .2434
   cmp      $32, %al
   jz       readC_E_10
   cmp      $9, %al
   jz       readC_E_10
   cmp      $41, %al
   jz       readC_E_10
   cmp      $93, %al
   jnz      .2434
readC_E_10:
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2433
.2434:
   pop      %rbx
.2432:
   rep
   ret

   .global  tokenCE_E
tokenCE_E:
   cmp      %r12, Chr
   jnz      .2435
   mov      EnvGet_A, %r10
   call     *%r10
.2435:
   call     skipC_A
   cmp      %r12, %rax
   js       retNull
   cmp      $34, %al
   jnz      .2436
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $34, %al
   jnz      .2437
   mov      EnvGet_A, %r10
   call     *%r10
   mov      $Nil, %rbx
   ret
.2437:
   call     testEscA_F
   jnc      retNil
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.2438:
   call     byteSymBCX_CX
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $34, %al
   jnz      .2439
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2440
.2439:
   call     testEscA_F
   jc       .2438
.2440:
   mov      8(%rbp), %r13
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      consSymX_E
.2436:
   cmp      $48, %al
   jc       .2441
   cmp      $57, %al
   ja       .2441
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.2443:
   call     byteSymBCX_CX
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $46, %al
   jz       .2443
   cmp      $48, %al
   jc       .2444
   cmp      $57, %al
   jbe      .2443
.2444:
   mov      8(%rbp), %r13
   mov      %r12, %rax
   testb    $0x02, Scl
   jz       .2445
   mov      Scl, %rax
   shr      $4, %rax
.2445:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r12, Sep3
   movq     $46, Sep0
   jmp      symToNumXA_FE
.2441:
   push     %r14
   push     %r15
   mov      %rax, %r14
   call     bufStringE_SZ
   push     %rax
   cld
   xor      %rcx, %rcx
   not      %rcx
   lea      8(%rsp), %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, (%rsp)
   mov      %r14, %rax
   cmp      $97, %al
   jc       .2446
   cmp      $122, %al
   jbe      tokenCE_E_10
.2446:
   cmp      $65, %al
   jc       .2447
   cmp      $90, %al
   jbe      tokenCE_E_10
.2447:
   cmp      $92, %al
   jnz      .2448
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      tokenCE_E_10
.2448:
   cld
   lea      8(%rsp), %rdi
   mov      (%rsp), %rcx
   repnz scasb
   jnz      .2449
tokenCE_E_10:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.2450:
   call     byteSymBCX_CX
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $97, %al
   jc       .2451
   cmp      $122, %al
   jbe      .2450
.2451:
   cmp      $65, %al
   jc       .2452
   cmp      $90, %al
   jbe      .2450
.2452:
   cmp      $48, %al
   jc       .2453
   cmp      $57, %al
   jbe      .2450
.2453:
   cmp      $92, %al
   jnz      .2454
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2450
.2454:
   cld
   lea      32(%rsp), %rdi
   mov      24(%rsp), %rcx
   repnz scasb
   jz       .2450
   mov      8(%rbp), %r13
   mov      $Intern, %r14
   mov      %r12, %rbx
   call     internEXY_FE
   jnc      .2455
   movq     $Nil, (%rbx)
.2455:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2456
.2449:
   call     getChar_A
   call     mkCharA_A
   mov      %rax, %rbx
   mov      EnvGet_A, %r10
   call     *%r10
.2456:
   mov      %r15, %rsp
   pop      %r15
   pop      %r14
   ret

   .balign  16
   nop
   nop
   .global  doRead
doRead:
   testb    $0x0E, 8(%rbx)
   jz       .2457
   mov      %r12, %rdx
   call     readC_E
   jmp      .2458
.2457:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x08, %bl
   jz       symErrEX
   call     firstCharE_A
   mov      %rax, %rdx
   mov      8(%rbp), %rbx
   call     tokenCE_E
   cmp      %r12, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
.2458:
   cmpq     $10, Chr
   jnz      .2459
   mov      InFiles, %r10
   mov      (%r10), %r10
   cmp      %r10, InFile
   jnz      .2459
   mov      %r12, Chr
.2459:
   rep
   ret

   .balign  16
   .global  inFilesA_FC
inFilesA_FC:
   mov      %rax, %rdx
   shl      $3, %rdx
   add      InFiles, %rdx
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   ret

   .balign  16
   .global  inReadyC_F
inReadyC_F:
   mov      16(%rdx), %r10
   cmp      %r10, 8(%rdx)
   ret

   .balign  16
   .global  inReadyA_FC
inReadyA_FC:
   mov      %rax, %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jnc      ret
   add      InFiles, %rdx
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       retnc
   mov      16(%rdx), %r10
   cmp      %r10, 8(%rdx)
   ret

   .balign  16
   .global  rdSetRdyASL_F
rdSetRdyASL_F:
   mov      %rax, %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jnc      rdSetASL_F
   add      InFiles, %rdx
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       rdSetASL_F
   call     inReadyC_F
   jnz      .2461
   lea      -24(%rbp), %r15
.2462:
   sub      $8, %r15
   cmp      %rsp, %r15
   jbe      retz
   cmp      (%r15), %eax
   jnz      .2462
   movswq   6(%r15), %rax
   testb    $17, %al
   jz       .2461
   call     slowNbC_FA
   jnc      retnz
   or       %r12, %r12
.2461:
   rep
   ret

   .balign  16
   .global  rdSetASL_F
rdSetASL_F:
   lea      -24(%rbp), %r15
.2464:
   sub      $8, %r15
   cmp      %rsp, %r15
   jbe      retz
   cmp      (%r15), %eax
   jnz      .2464
   movswq   6(%r15), %rax
   testb    $17, %al
   ret

   .balign  16
   .global  wrSetASL_F
wrSetASL_F:
   lea      -24(%rbp), %r15
.2465:
   sub      $8, %r15
   cmp      %rsp, %r15
   jbe      retz
   cmp      (%r15), %eax
   jnz      .2465
   movswq   6(%r15), %rax
   testb    $4, %al
   ret

   .global  waitFdCEX_A
waitFdCEX_A:
   push     %r14
   push     %r15
   pushq    EnvTask
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbx
   push     %rbx
.2466:
   mov      %r12, %r15
   mov      -8(%rbp), %rax
   cmp      %r12, %rax
   js       .2467
   call     inReadyA_FC
   jnc      .2468
   mov      %r12, -24(%rbp)
   jmp      .2467
.2468:
   sub      $8, %rsp
   movl     %eax, (%rsp)
   mov      $1, %rax
   movw     %ax, 4(%rsp)
   add      $1, %r15
.2467:
   mov      Run, %r14
   mov      %r14, 8(%rbp)
   mov      %r14, EnvTask
.2470:
   testb    $0x0E, %r14b
   jnz      .2471
   mov      (%r14), %rbx
   mov      32(%rbp), %rax
.2472:
   testb    $0x0E, %al
   jnz      .2473
   cmp      (%rax), %rbx
   jz       waitFdCEX_A_10
   mov      8(%rax), %rax
   jmp      .2472
.2473:
   mov      (%rbx), %rax
   shr      $4, %rax
   jnc      .2474
   mov      8(%rbx), %r10
   mov      (%r10), %rax
   shr      $4, %rax
   cmp      -24(%rbp), %rax
   jnc      waitFdCEX_A_10
   mov      %rax, -24(%rbp)
   jmp      waitFdCEX_A_10
.2474:
   cmp      -8(%rbp), %rax
   jz       waitFdCEX_A_10
   call     inReadyA_FC
   jnc      .2478
   mov      %r12, -24(%rbp)
   jmp      waitFdCEX_A_10
.2478:
   sub      $8, %rsp
   movl     %eax, (%rsp)
   mov      $1, %rax
   movw     %ax, 4(%rsp)
   add      $1, %r15
waitFdCEX_A_10:
   mov      8(%r14), %r14
   jmp      .2470
.2471:
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .2480
   cmp      -8(%rbp), %rax
   jz       .2480
   call     inFilesA_FC
   jz       .2480
   call     inReadyC_F
   jz       .2483
   mov      %r12, -24(%rbp)
   jmp      .2480
.2483:
   sub      $8, %rsp
   movl     %eax, (%rsp)
   mov      $1, %rax
   movw     %ax, 4(%rsp)
   add      $1, %r15
.2480:
   mov      Spkr, %rax
   cmp      %r12, %rax
   jz       .2485
   sub      $8, %rsp
   movl     %eax, (%rsp)
   mov      $1, %rax
   movw     %ax, 4(%rsp)
   add      $1, %r15
.2485:
   mov      Child, %r14
   mov      Children, %rbx
.2486:
   sub      $48, %rbx
   jc       .2487
   cmp      %r12, (%r14)
   jz       .2488
   sub      $8, %rsp
   mov      8(%r14), %rax
   movl     %eax, (%rsp)
   mov      $1, %rax
   movw     %ax, 4(%rsp)
   add      $1, %r15
   cmp      %r12, 32(%r14)
   jz       .2488
   sub      $8, %rsp
   mov      16(%r14), %rax
   movl     %eax, (%rsp)
   mov      $4, %rax
   movw     %ax, 4(%rsp)
   add      $1, %r15
.2488:
   add      $48, %r14
   jmp      .2486
.2487:
   call     msec_A
   mov      %rax, %rbx
.2490:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      %r15, %rsi
   mov      -24(%rbp), %rdx
   call     poll
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2491
   call     errno_A
   cmp      $4, %rax
   jz       .2492
   movq     $Nil, Run
   jmp      selectErrX
.2492:
   cmp      %r12b, Signal
   jz       .2490
   call     sighandlerX
   jmp      .2490
.2491:
   call     msec_A
   sub      %rbx, %rax
   mov      %rax, -24(%rbp)
   mov      %r12b, Flg
   mov      Child, %r14
   mov      Children, %r15
.2494:
   sub      $48, %r15
   jc       .2495
   cmp      %r12, (%r14)
   jz       .2496
   push     %r15
   mov      8(%r14), %rax
   call     rdSetASL_F
   jz       .2497
   mov      8(%r14), %rdx
   mov      $2, %rbx
   mov      $Buf, %r13
   call     rdBytesNbCEX_F
   js       .2497
   jnz      .2499
   call     clsChildY
   pop      %r15
   jmp      .2494
.2499:
   sub      $4096, %rsp
   push     %r14
   mov      8(%r14), %rdx
   movswq   Buf, %rax
   mov      %rax, %rbx
   lea      16(%rsp), %r13
   call     rdBytesCEX_F
   jz       .2500
   movb     $1, Flg
   mov      Child, %r14
   mov      Children, %r15
.2501:
   cmp      (%rsp), %r14
   jz       .2502
   cmp      %r12, (%r14)
   jz       .2502
   movswq   Buf, %rax
   mov      %rax, %rdx
   lea      16(%rsp), %r13
   call     wrChildCXY
.2502:
   add      $48, %r14
   sub      $48, %r15
   jnz      .2501
   jmp      .2504
.2500:
   call     clsChildY
   pop      %r14
   add      $4096, %rsp
   pop      %r15
   jmp      .2494
.2504:
   pop      %r14
   add      $4096, %rsp
.2497:
   mov      16(%r14), %rax
   call     wrSetASL_F
   jz       .2505
   mov      16(%r14), %rdx
   mov      40(%r14), %r13
   add      24(%r14), %r13
   movswq   (%r13), %rax
   mov      %rax, %rbx
   add      $2, %r13
   push     %rbx
   call     wrBytesCEX_F
   pop      %rbx
   jnz      .2506
   add      24(%r14), %rbx
   add      $2, %rbx
   mov      %rbx, 24(%r14)
   add      %rbx, %rbx
   cmp      32(%r14), %rbx
   jc       .2507
   mov      24(%r14), %r10
   sub      %r10, 32(%r14)
   jz       .2507
   mov      40(%r14), %r13
   add      24(%r14), %r13
   mov      40(%r14), %rdi
   lea      (%r13), %rsi
   mov      32(%r14), %rcx
   cld
   rep movsb
   mov      40(%r14), %rax
   mov      32(%r14), %rbx
   call     allocAE_A
   mov      %rax, 40(%r14)
.2507:
   mov      %r12, 24(%r14)
   jmp      .2505
.2506:
   call     clsChildY
.2505:
   pop      %r15
.2496:
   add      $48, %r14
   jmp      .2494
.2495:
   cmp      %r12b, Flg
   jnz      .2510
   mov      Spkr, %rax
   cmp      %r12, %rax
   jz       .2510
   call     rdSetASL_F
   jz       .2510
   mov      Spkr, %rdx
   mov      $8, %rbx
   mov      $Buf, %r13
   call     rdBytesNbCEX_F
   jle      .2510
   mov      Child, %r14
   add      Buf, %r14
   cmp      %r12, (%r14)
   jz       .2510
   mov      $2, %rdx
   mov      $TBuf, %r13
   call     wrChildCXY
.2510:
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .2515
   cmp      -8(%rbp), %rax
   jz       .2515
   call     rdSetRdyASL_F
   jz       .2515
   call     rdHear_FE
   jc       .2518
   cmp      $TSym, %rbx
   jnz      .2519
   movb     $1, Sync
   jmp      .2515
.2519:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2515
.2518:
   call     closeAX
   mov      Hear, %rax
   call     closeInFileA
   mov      Hear, %rax
   call     closeOutFileA
   mov      %r12, Hear
.2515:
   mov      8(%rbp), %r14
.2522:
   testb    $0x0E, %r14b
   jnz      .2523
   mov      (%r14), %rbx
   mov      32(%rbp), %rax
.2524:
   testb    $0x0E, %al
   jnz      .2525
   cmp      (%rax), %rbx
   jz       waitFdCEX_A_20
   mov      8(%rax), %rax
   jmp      .2524
.2525:
   mov      (%rbx), %rax
   shr      $4, %rax
   jnc      .2526
   mov      8(%rbx), %rdx
   mov      (%rdx), %rax
   shr      $4, %rax
   sub      -24(%rbp), %rax
   jc       .2527
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rdx)
   jmp      waitFdCEX_A_20
.2527:
   mov      (%rbx), %rax
   mov      %rax, (%rdx)
   mov      (%rbx), %r10
   mov      %r10, At
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   jmp      waitFdCEX_A_20
.2526:
   cmp      -8(%rbp), %rax
   jz       waitFdCEX_A_20
   call     rdSetRdyASL_F
   jz       waitFdCEX_A_20
   mov      (%rbx), %r10
   mov      %r10, At
   mov      8(%rbx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
waitFdCEX_A_20:
   mov      8(%r14), %r14
   jmp      .2522
.2523:
   cmp      %r12b, Signal
   jz       .2532
   call     sighandlerX
.2532:
   mov      -16(%rbp), %rax
   or       %rax, %rax
   jle      .2533
   sub      -24(%rbp), %rax
   jns      .2534
   xor      %rax, %rax
.2534:
   mov      %rax, -16(%rbp)
.2533:
   jz       .2535
   mov      %rax, -24(%rbp)
   mov      -8(%rbp), %rax
   cmp      %r12, %rax
   js       .2535
   call     rdSetRdyASL_F
   jnz      .2535
   lea      -24(%rbp), %rsp
   jmp      .2466
.2535:
   mov      16(%rbp), %r10
   mov      %r10, At
   mov      -16(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvTask
   pop      %r15
   pop      %r14
   ret

   .balign  16
   nop
   nop
   .global  doWait
doWait:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2536
   pushq    $-1
   jmp      .2537
.2536:
   call     xCntEX_FE
   push     %rbx
.2537:
   mov      8(%r14), %r14
.2538:
   mov      %r14, %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      $Nil, %rbx
   jnz      .2539
   mov      $-1, %rdx
   mov      (%rsp), %rbx
   call     waitFdCEX_A
   cmp      %r12, %rax
   jnz      .2540
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   jmp      .2539
.2540:
   mov      %rax, (%rsp)
   jmp      .2538
.2539:
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSync
doSync:
   cmp      %r12, Mic
   jz       retNil
   cmp      %r12, Hear
   jz       retNil
   push     %r13
   mov      %rbx, %r13
   mov      $Slot, %rbx
   mov      $8, %rdx
.2541:
   mov      %rdx, %r12
   mov      Mic, %rdi
   mov      %rbx, %rsi
   mov      %r12, %rdx
   call     write
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2542
   sub      %rax, %rdx
   jz       .2543
   add      %rax, %rbx
   jmp      .2544
.2542:
   call     errno_A
   cmp      $4, %rax
   jnz      wrSyncErrX
.2544:
   cmp      %r12b, Signal
   jz       .2541
   call     sighandlerX
   jmp      .2541
.2543:
   mov      %r12b, Sync
.2546:
   mov      $-1, %rdx
   mov      %rdx, %rbx
   call     waitFdCEX_A
   cmp      %r12b, Sync
   jz       .2546
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doHear
doHear:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       cntErrEX
   mov      %rbx, %rdx
   shr      $4, %rdx
   jc       badFdErrEX
   mov      %rdx, %rax
   shl      $3, %rax
   cmp      InFDs, %rax
   jnc      badFdErrEX
   add      InFiles, %rax
   mov      (%rax), %rax
   cmp      %r12, %rax
   jz       badFdErrEX
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .2547
   call     closeAX
   mov      Hear, %rax
   call     closeInFileA
   mov      Hear, %rax
   call     closeOutFileA
.2547:
   mov      %rdx, Hear
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doTell
doTell:
   mov      Tell, %rax
   or       Children, %rax
   jz       retNil
   push     %r13
   push     %r14
   push     %r15
   pushq    TellBuf
   sub      $4096, %rsp
   mov      %rsp, %r15
   call     tellBegZ_Z
   mov      8(%rbx), %r13
.2548:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r14
   call     prTellEZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2548
   call     tellEndZ
   mov      %r14, %rbx
   add      $4096, %rsp
   popq     TellBuf
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPoll
doPoll:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rax
   call     xCntEX_FE
   xchg     %rbx, %rax
   cmp      %r12, %rax
   js       badFdErrEX
   mov      %rax, %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jnc      badFdErrEX
   call     inFilesA_FC
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .2549
.2550:
   call     inReadyC_F
   jnz      .2549
   sub      $8, %rsp
   movl     %eax, (%rsp)
   mov      $1, %rax
   movw     %ax, 4(%rsp)
.2552:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $1, %rsi
   xor      %rdx, %rdx
   call     poll
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2553
   call     errno_A
   cmp      $4, %rax
   jz       .2552
   movq     $Nil, Run
   jmp      selectErrX
.2553:
   movswq   6(%rsp), %rax
   add      $8, %rsp
   testb    $17, %al
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .2549
   call     slowNbC_FA
   jc       .2550
.2549:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doKey
doKey:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2555
   mov      $-1, %rbx
   jmp      .2556
.2555:
   call     xCntEX_FE
.2556:
   call     flushAll
   call     setRaw
   mov      %r12, %rdx
   call     waitFdCEX_A
   cmp      %r12, %rax
   jz       .2557
   call     stdinByte_FA
   jc       .2557
   cmp      $255, %al
   jz       .2559
   cmp      $128, %al
   jc       .2563
   testb    $32, %al
   jnz      .2561
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .2562
.2561:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   call     stdinByte_FA
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.2562:
   call     stdinByte_FA
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
   jmp      .2563
.2559:
   mov      $65536, %rax
.2563:
   call     mkCharA_A
   mov      %rax, %rbx
   pop      %r13
   ret
.2557:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPeek
doPeek:
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2564
   mov      EnvGet_A, %r10
   call     *%r10
.2564:
   cmp      %r12, %rax
   js       retNil
   call     mkCharA_A
   mov      %rax, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doChar
doChar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .2565
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2566
   mov      EnvGet_A, %r10
   call     *%r10
.2566:
   cmp      %r12, %rax
   js       .2567
   call     getChar_A
   call     mkCharA_A
   mov      %rax, %rbx
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2568
.2567:
   mov      $Nil, %rbx
.2568:
   pop      %r13
   ret
.2565:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       .2569
   mov      %rbx, %rax
   shr      $4, %rax
   jz       .2570
   call     mkCharA_A
   mov      %rax, %rbx
   jmp      .2571
.2570:
   mov      $Nil, %rbx
.2571:
   pop      %r13
   ret
.2569:
   testb    $0x08, %bl
   jz       atomErrEX
   cmp      $TSym, %rbx
   jz       .2572
   call     firstCharE_A
   shl      $4, %rax
   orb      $2, %al
   jmp      .2573
.2572:
   mov      $65536, %rax
   call     mkCharA_A
.2573:
   mov      %rax, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSkip
doSkip:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     firstCharE_A
   mov      %rax, %rdx
   call     skipC_A
   cmp      %r12, %rax
   js       retNil
   mov      Chr, %rax
   call     mkCharA_A
   mov      %rax, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doEol
doEol:
   cmpq     $10, Chr
   jz       retT
   cmp      %r12, Chr
   jle      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doEof
doEof:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2574
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2575
   mov      EnvGet_A, %r10
   call     *%r10
.2575:
   cmp      %r12, %rax
   jns      RetNil
   jmp      .2576
.2574:
   movq     $-1, Chr
.2576:
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doFrom
doFrom:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   push     %r12
.2577:
   call     evSymX_E
   call     bufStringE_SZ
   push     %r12
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2577
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2579
   mov      EnvGet_A, %r10
   call     *%r10
.2579:
   cmp      %r12, %rax
   js       .2580
   mov      %rsp, %r15
.2582:
   lea      40(%r15), %rdx
   add      32(%r15), %rdx
   cmp      (%rdx), %al
   jnz      .2583
   addq     $1, 32(%r15)
   cmp      %r12b, 1(%rdx)
   jnz      .2584
   mov      EnvGet_A, %r10
   call     *%r10
   mov      16(%r15), %rbx
   jmp      doFrom_90
.2583:
   cmp      %r12, 32(%r15)
   jz       .2584
   lea      41(%r15), %rdx
.2585:
   subq     $1, 32(%r15)
   jz       .2582
   lea      40(%r15), %rsi
   lea      (%rdx), %rdi
   mov      32(%r15), %rcx
   cld
   repnz cmpsb
   jz       .2582
   add      $1, %rdx
   jmp      .2585
.2584:
   mov      (%r15), %r15
   cmp      %r12, (%r15)
   jnz      .2582
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2579
.2580:
   mov      $Nil, %rbx
doFrom_90:
   pop      %r15
.2587:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2587
   pop      %r15
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doTill
doTill:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   call     evSymX_E
   call     bufStringE_SZ
   push     %rax
   cld
   xor      %rcx, %rcx
   not      %rcx
   lea      8(%rsp), %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, (%rsp)
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2588
   mov      EnvGet_A, %r10
   call     *%r10
.2588:
   cmp      %r12, %rax
   js       .2589
   cld
   lea      8(%rsp), %rdi
   mov      (%rsp), %rcx
   repnz scasb
   jz       .2589
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2591
   call     getChar_A
   call     mkCharA_A
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.2592:
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      %r12, %rax
   jle      .2593
   cld
   lea      32(%rsp), %rdi
   mov      24(%rsp), %rcx
   repnz scasb
   jz       .2593
   call     getChar_A
   call     mkCharA_A
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      %rdx, %r13
   jmp      .2592
.2593:
   mov      8(%rbp), %rbx
   jmp      .2594
.2591:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      $4, %rdx
.2595:
   call     getChar_A
   call     charSymACX_CX
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      %r12, %rax
   jle      .2596
   cld
   lea      32(%rsp), %rdi
   mov      24(%rsp), %rcx
   repnz scasb
   jnz      .2595
.2596:
   mov      8(%rbp), %r13
   call     consSymX_E
.2594:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret
.2589:
   mov      $Nil, %rbx
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret

   .balign  16
   .global  eolA_F
eolA_F:
   cmp      %r12, %rax
   js       retz
   cmp      $10, %rax
   jz       .2597
   cmp      $13, %rax
   jnz      Ret
   mov      EnvGet_A, %r10
   call     *%r10
   cmp      $10, %rax
   jnz      retz
.2597:
   mov      %r12, Chr
   ret

   .balign  16
   nop
   nop
   .global  doLine
doLine:
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2598
   mov      EnvGet_A, %r10
   call     *%r10
.2598:
   call     eolA_F
   jz       retNil
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2599
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2600
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      $4, %rdx
.2601:
   call     getChar_A
   call     charSymACX_CX
   mov      EnvGet_A, %r10
   call     *%r10
   call     eolA_F
   jnz      .2601
   mov      8(%rbp), %r13
   call     consSymX_E
   jmp      .2607
.2600:
   call     cons_Z
   movq     $2, (%r15)
   movq     $Nil, 8(%r15)
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
.2603:
   mov      $4, %rdx
   mov      %r15, %r13
   call     getChar_A
   call     charSymACX_CX
   push     %rdx
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rdx
   shr      $4, %rbx
.2604:
   sub      $1, %rbx
   jz       .2605
   mov      EnvGet_A, %r10
   call     *%r10
   call     eolA_F
   jnz      .2606
   mov      (%r15), %r13
   call     consSymX_E
   mov      %rbx, (%r15)
   jmp      doLine_20
.2606:
   call     getChar_A
   call     charSymACX_CX
   jmp      .2604
.2605:
   mov      (%r15), %r13
   call     consSymX_E
   mov      %rbx, (%r15)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      doLine_10
   mov      EnvGet_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     cons_A
   movq     $2, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
   jmp      .2603
.2599:
   call     getChar_A
   call     mkCharA_A
   call     consA_Z
   mov      %rax, (%r15)
   movq     $Nil, 8(%r15)
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      doLine_10
   mov      %r15, %r13
   call     cons_Z
   mov      %r13, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
.2609:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   shr      $4, %rbx
.2610:
   sub      $1, %rbx
   jz       .2611
   mov      EnvGet_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     getChar_A
   call     mkCharA_A
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      %rdx, %r13
   jmp      .2610
.2611:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      doLine_10
   mov      EnvGet_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     getChar_A
   call     mkCharA_A
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   call     consX_A
   mov      %r13, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
   jmp      .2609
doLine_10:
   mov      EnvGet_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     getChar_A
   call     mkCharA_A
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r15)
   mov      %rdx, %r15
   jmp      doLine_10
doLine_20:
   mov      8(%rbp), %rbx
.2607:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLines
doLines:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      %r12, %r14
.2615:
   testb    $0x0E, %r13b
   jnz      .2616
   call     evSymX_E
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_r_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       .2617
   mov      %rax, %rbx
   cmp      %r12, %r14
   jnz      .2619
   mov      $2, %r14
.2619:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     getc_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2620
   cmp      $10, %rax
   jnz      .2619
   add      $16, %r14
   jmp      .2619
.2620:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
.2617:
   mov      8(%r13), %r13
   jmp      .2615
.2616:
   cmp      %r12, %r14
   mov      %r14, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .global  parseBCE_E
parseBCE_E:
   pushq    EnvParseX
   pushq    EnvParseC
   pushq    EnvParseEOF
   pushq    EnvGet_A
   pushq    Chr
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, EnvParseX
   mov      %r12, EnvParseC
   cmp      %r12, %rdx
   jnz      .2622
   mov      $18446744073698871808, %rbx
   jmp      .2623
.2622:
   mov      $-1, %rbx
.2623:
   mov      %rbx, EnvParseEOF
   movq     $getParse_A, EnvGet_A
   mov      %r12, Chr
   or       %al, %al
   jz       .2624
   call     getParse_A
.2624:
   cmp      %r12, %rdx
   jnz      .2625
   call     rdList_E
   jmp      .2626
.2625:
   push     %r13
   push     %rdx
   mov      %rdx, %rbx
   mov      %r12, %rdx
   call     tokenCE_E
   cmp      %r12, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .2627
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.2628:
   mov      %r12, %rdx
   mov      24(%rsp), %rbx
   push     %r13
   call     tokenCE_E
   pop      %r13
   cmp      %r12, %rbx
   jz       .2629
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   mov      %rax, %r13
   jmp      .2628
.2629:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2627:
   pop      %rax
   pop      %r13
.2626:
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Chr
   popq     EnvGet_A
   popq     EnvParseEOF
   popq     EnvParseC
   popq     EnvParseX
   ret

   .balign  16
   nop
   nop
   .global  doAny
doAny:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       .2630
   pushq    EnvParseX
   pushq    EnvParseC
   pushq    EnvParseEOF
   pushq    EnvGet_A
   pushq    Chr
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, EnvParseX
   mov      %r12, EnvParseC
   movq     $18446744073709494272, EnvParseEOF
   movq     $getParse_A, EnvGet_A
   mov      %r12, Chr
   call     getParse_A
   mov      $1, %rax
   call     readA_E
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Chr
   popq     EnvGet_A
   popq     EnvParseEOF
   popq     EnvParseC
   popq     EnvParseX
.2630:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSym
doSym:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     begString
   call     printE
   call     endString_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .global  doStr
doStr:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2631
   testb    $0x06, %bl
   jnz      argErrEX
   testb    $0x08, %bl
   jz       .2632
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r13
   testb    $0x0E, %r13b
   jz       .2633
   mov      %r12, %rdx
   jmp      .2634
.2633:
   call     evSymX_E
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
.2634:
   mov      $0, %al
   call     parseBCE_E
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2631
.2632:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     begString
   mov      %rbx, %r13
.2636:
   mov      (%r13), %rbx
   call     printE
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2637
   call     space
   jmp      .2636
.2637:
   call     endString_E
   mov      (%rbp), %rsp
   pop      %rbp
.2631:
   pop      %r14
   pop      %r13
   ret

   .global  loadBEX_E
loadBEX_E:
   mov      %rax, %rdx
   testb    $0x08, %bl
   jz       .2638
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $45, %al
   jnz      .2638
   mov      %r12, %rdx
   call     parseBCE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.2638:
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   sub      $32, %rsp
   mov      %rsp, %r14
   call     rdOpenEXY
   mov      $Nil, %rbx
   call     doHide
   call     pushInFilesY
.2640:
   mov      InFiles, %r10
   mov      (%r10), %rax
   cmp      InFile, %rax
   jz       .2641
   mov      %r12, %rdx
   call     readC_E
   jmp      .2642
.2641:
   mov      -8(%rbp), %rax
   or       %al, %al
   jz       .2643
   cmp      %r12, Chr
   jnz      .2643
   mov      EnvPutB, %r10
   call     *%r10
   call     space
   call     flushAll
.2643:
   mov      $10, %rdx
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   cmovzq   %r12, %rdx
   call     readC_E
   cmpq     $10, Chr
   jnz      .2642
   mov      %r12, Chr
.2642:
   cmp      $Nil, %rbx
   jz       .2646
   mov      %rbx, 8(%rbp)
   mov      InFiles, %r10
   mov      (%r10), %rax
   cmp      InFile, %rax
   jz       .2647
loadBEX_E_10:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .2648
.2647:
   cmp      %r12, Chr
   jnz      loadBEX_E_10
   mov      -8(%rbp), %rax
   or       %al, %al
   jz       loadBEX_E_10
   call     flushAll
   mov      At, %r10
   mov      %r10, 16(%rbp)
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
   mov      At2, %r10
   mov      %r10, At3
   mov      16(%rbp), %r10
   mov      %r10, At2
   mov      $Arrow, %rdx
   call     outStringC
   call     flushAll
   call     printE_E
   call     newline
.2648:
   mov      %rbx, 8(%rbp)
   jmp      .2640
.2646:
   call     popInFiles
   mov      $Nil, %rbx
   call     doHide
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   ret
Arrow:
   .string  "-> "

   .balign  16
   nop
   nop
   .global  doLoad
doLoad:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
.2649:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jz       .2650
   mov      $62, %al
   call     loadBEX_E
   jmp      .2651
.2650:
   call     loadAllX_E
.2651:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2649
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doIn
doIn:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   sub      $32, %rsp
   mov      %rsp, %r14
   call     rdOpenEXY
   call     pushInFilesY
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popInFiles
   add      $32, %rsp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOut
doOut:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   sub      $32, %rsp
   mov      %rsp, %r14
   call     wrOpenEXY
   call     pushOutFilesY
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popOutFiles
   add      $32, %rsp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPipe
doPipe:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   sub      $32, %rsp
   mov      %rsp, %r14
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movslq   (%rsp), %rax
   call     closeOnExecAX
   movslq   4(%rsp), %rax
   call     closeOnExecAX
   call     forkLispX_FE
   jnc      .2652
   mov      8(%r13), %r10
   testb    $0x0E, 8(%r10)
   jnz      .2653
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
.2653:
   movslq   (%rsp), %rax
   call     closeAX
   movslq   4(%rsp), %rax
   cmp      $1, %rax
   jz       .2654
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      $1, %rsi
   call     dup2
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   4(%rsp), %rax
   call     closeAX
.2654:
   mov      $Nil, %rbx
   call     wrOpenEXY
   call     pushOutFilesY
   movq     $Nil, Run
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %r12, %rbx
   jmp      byeE
.2652:
   mov      %rbx, 16(%r14)
   movslq   4(%rsp), %rax
   call     closeAX
   movslq   (%rsp), %rax
   call     initInFileA_A
   mov      (%rax), %rbx
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   testb    $0x0E, %r13b
   jz       .2655
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .2656
.2655:
   mov      %rbx, 8(%r14)
   mov      %rdx, %r12
   mov      16(%r14), %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   call     pushInFilesY
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popInFiles
.2656:
   add      $40, %rsp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doCtl
doCtl:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rax
   push     %rax
   mov      %rsp, %r14
   call     ctOpenEXY
   call     pushCtlFilesY
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popCtlFiles
   pop      %rax
   pop      %rax
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doOpen
doOpen:
   push     %r13
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
.2657:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $66, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2658
   call     errno_A
   cmp      $4, %rax
   jz       .2659
   mov      $Nil, %rbx
   jmp      doOpen_90
.2659:
   cmp      %r12b, Signal
   jz       .2657
   call     sighandlerX
   jmp      .2657
.2658:
   mov      %rax, %r13
   call     closeOnExecAX
   mov      %r13, %rdx
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
   call     initInFileCA_A
   mov      %r13, %rax
   call     initOutFileA_A
   mov      %r13, %rbx
   shl      $4, %rbx
   orb      $2, %bl
doOpen_90:
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doClose
doClose:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   call     xCntCX_FC
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   jnz      .2661
   mov      %rdx, %rax
   call     closeInFileA
   mov      %rdx, %rax
   call     closeOutFileA
.2661:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doEcho
doEcho:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2662
   mov      EnvGet_A, %r10
   call     *%r10
.2662:
   cmp      $Nil, %rbx
   jnz      .2663
   testb    $0x0E, %r14b
   jz       .2663
.2665:
   cmp      %r12, %rax
   js       .2666
   mov      EnvPutB, %r10
   call     *%r10
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2665
.2666:
   mov      $TSym, %rbx
   pop      %r14
   pop      %r13
   ret
.2663:
   testb    $0x06, %bl
   jz       .2667
   call     xCntEX_FE
   testb    $0x0E, %r14b
   jnz      .2672
   mov      (%r14), %r14
   xchg     %rbx, %r14
   call     evCntEX_FE
   mov      Chr, %rax
.2669:
   sub      $1, %r14
   js       .2672
   cmp      %r12, %rax
   jns      .2671
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret
.2671:
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2669
.2672:
   sub      $1, %rbx
   js       .2673
   cmp      %r12, %rax
   jns      .2674
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret
.2674:
   mov      EnvPutB, %r10
   call     *%r10
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2672
.2673:
   mov      $TSym, %rbx
   pop      %r14
   pop      %r13
   ret
.2667:
   testb    $0x08, %bl
   jz       argErrEX
   push     %r15
   push     %r12
.2675:
   call     bufStringE_SZ
   push     %r12
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   testb    $0x0E, %r14b
   jnz      .2676
   call     evSymY_E
   mov      8(%r14), %r14
   jmp      .2675
.2676:
   mov      %r12, %r13
   mov      Chr, %rax
.2677:
   cmp      %r12, %rax
   js       .2678
   mov      %r13, %r14
   cmp      %r12, %r14
   jz       .2679
   mov      32(%r14), %rbx
.2679:
   mov      %rsp, %r15
.2681:
   lea      40(%r15), %rdx
   add      32(%r15), %rdx
   cmp      (%rdx), %al
   jnz      .2682
   addq     $1, 32(%r15)
   cmp      %r12b, 1(%rdx)
   jz       .2683
   cmp      %r12, %r13
   jnz      .2684
   mov      %r15, %r13
   jmp      .2686
.2684:
   mov      32(%r15), %r10
   cmp      %r10, 32(%r13)
   cmovcq   %r15, %r13
   jmp      .2686
.2683:
   cmp      %r12, %r14
   jz       .2687
   lea      40(%r14), %rdx
   sub      32(%r15), %rbx
.2688:
   jc       .2687
   mov      (%rdx), %al
   mov      EnvPutB, %r10
   call     *%r10
   add      $1, %rdx
   sub      $1, %rbx
   jmp      .2688
.2687:
   mov      EnvGet_A, %r10
   call     *%r10
   mov      16(%r15), %rbx
   jmp      doEcho_90
.2682:
   cmp      %r12, 32(%r15)
   jz       .2686
   lea      41(%r15), %rdx
.2690:
   subq     $1, 32(%r15)
   jz       .2691
   lea      40(%r15), %rsi
   lea      (%rdx), %rdi
   mov      32(%r15), %rcx
   cld
   repnz cmpsb
   jz       .2691
   add      $1, %rdx
   jmp      .2690
.2691:
   cmp      %r15, %r13
   jnz      .2681
   mov      %r12, %r13
   mov      %rsp, %rdx
.2693:
   cmp      %r12, 32(%rdx)
   jz       .2694
   cmp      %r12, %r13
   jnz      .2695
   mov      %rdx, %r13
   jmp      .2694
.2695:
   mov      32(%rdx), %r10
   cmp      %r10, 32(%r13)
   cmovcq   %rdx, %r13
.2694:
   mov      (%rdx), %rdx
   cmp      %r12, (%rdx)
   jnz      .2693
   jmp      .2681
.2686:
   mov      (%r15), %r15
   cmp      %r12, (%r15)
   jnz      .2681
   cmp      %r12, %r13
   jnz      .2697
   cmp      %r12, %r14
   jz       .2698
   push     %rax
   push     %rbx
   lea      40(%r14), %rdx
.2699:
   mov      (%rdx), %al
   mov      EnvPutB, %r10
   call     *%r10
   add      $1, %rdx
   sub      $1, %rbx
   jnz      .2699
   pop      %rbx
   pop      %rax
.2698:
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2700
.2697:
   cmp      %r12, %r14
   jz       .2700
   lea      40(%r14), %rdx
   sub      32(%r13), %rbx
.2702:
   jc       .2700
   mov      (%rdx), %al
   mov      EnvPutB, %r10
   call     *%r10
   add      $1, %rdx
   sub      $1, %rbx
   jmp      .2702
.2700:
   mov      EnvGet_A, %r10
   call     *%r10
   jmp      .2677
.2678:
   mov      $Nil, %rbx
doEcho_90:
   pop      %r15
.2704:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2704
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  putStdoutB
putStdoutB:
   push     %r14
   mov      OutFile, %r14
   cmp      %r12, %r14
   jz       .2705
   push     %rbx
   push     %r13
   mov      8(%r14), %rbx
   lea      24(%r14), %r13
   cmp      $8192, %rbx
   jnz      .2706
   push     %rax
   push     %rdx
   mov      %r12, 8(%r14)
   mov      (%r14), %rdx
   call     wrBytesCEX_F
   mov      %r12, %rbx
   lea      24(%r14), %r13
   pop      %rdx
   pop      %rax
.2706:
   add      %rbx, %r13
   mov      %al, (%r13)
   add      $1, %rbx
   mov      %rbx, 8(%r14)
   cmp      $10, %al
   jnz      .2707
   cmp      %r12, 16(%r14)
   jz       .2707
   push     %rdx
   mov      %r12, 8(%r14)
   mov      (%r14), %rdx
   lea      24(%r14), %r13
   call     wrBytesCEX_F
   pop      %rdx
.2707:
   pop      %r13
   pop      %rbx
.2705:
   pop      %r14
   ret

   .global  newline
newline:
   mov      $10, %al
   mov      EnvPutB, %r10
   jmp      *%r10

   .global  space
space:
   mov      $32, %al

   .global  envPutB
envPutB:
   mov      EnvPutB, %r10
   jmp      *%r10

   .global  envGet_A
envGet_A:
   mov      EnvGet_A, %r10
   jmp      *%r10

   .global  outNumE
outNumE:
   shr      $4, %rbx
   jnc      .2709
   mov      $45, %al
   mov      EnvPutB, %r10
   call     *%r10
.2709:
   mov      %rbx, %rax

   .global  outWordA
outWordA:
   cmp      $9, %rax
   jbe      .2710
   mov      %r12, %rdx
   mov      $10, %r10
   div      %r10
   push     %rdx
   call     outWordA
   pop      %rax
.2710:
   add      $48, %al
   mov      EnvPutB, %r10
   jmp      *%r10

   .global  prExtNmX
prExtNmX:
   call     fileObjX_AC
   cmp      %r12, %rax
   jz       .2711
   call     outAoA
.2711:
   mov      %rdx, %rax

   .balign  16
   .global  outOctA
outOctA:
   cmp      $7, %rax
   jbe      .2712
   push     %rax
   shr      $3, %rax
   call     outOctA
   pop      %rax
   and      $7, %al
.2712:
   add      $48, %al
   mov      EnvPutB, %r10
   jmp      *%r10

   .balign  16
   .global  outAoA
outAoA:
   cmp      $15, %rax
   jbe      .2713
   push     %rax
   shr      $4, %rax
   call     outAoA
   pop      %rax
   and      $15, %al
.2713:
   add      $64, %al
   mov      EnvPutB, %r10
   jmp      *%r10

   .global  outStringS
outStringS:
   lea      8(%rsp), %rdx

   .global  outStringC
outStringC:
.2714:
   mov      (%rdx), %al
   add      $1, %rdx
   or       %al, %al
   jz       .2715
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2714
.2715:
   rep
   ret

   .global  outNameE
outNameE:
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   call     prNameX
   pop      %r13
   ret

   .global  prNameX
prNameX:
   mov      %r12, %rdx
.2716:
   call     symByteCX_FACX
   jz       .2717
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2716
.2717:
   rep
   ret

   .global  printE_E
printE_E:
   push     %rbx
   call     printE
   pop      %rbx
   ret

   .balign  16
   .global  printE
printE:
   cmp      %r12b, Signal
   jz       .2718
   call     sighandler0
.2718:
   testb    $0x02, %bl
   jnz      outNumE
   testb    $0x04, %bl
   jz       .2719
   mov      $-1, %rax
   jmp      fmtNum0AE_E
.2719:
   push     %r13
   testb    $0x08, %bl
   jz       .2720
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jnz      .2721
   mov      $36, %al
   mov      EnvPutB, %r10
   call     *%r10
   shr      $4, %rbx
   mov      %rbx, %rax
   call     outOctA
   pop      %r13
   ret
.2721:
   testb    $0x08, -8(%rbx)
   jz       .2722
   mov      $123, %al
   mov      EnvPutB, %r10
   call     *%r10
   call     prExtNmX
   mov      $125, %al
   mov      EnvPutB, %r10
   call     *%r10
   pop      %r13
   ret
.2722:
   push     %r14
   mov      $Intern, %r14
   call     isInternEXY_F
   jnz      .2723
   mov      %r12, %rdx
   call     symByteCX_FACX
.2724:
   cld
   mov      $Delim, %rdi
   mov      $(DelimEnd-Delim), %rcx
   repnz scasb
   jnz      .2725
   push     %rax
   mov      $92, %al
   mov      EnvPutB, %r10
   call     *%r10
   pop      %rax
   jmp      .2726
.2725:
   cmp      $46, %al
   jnz      .2726
   call     symByteCX_FACX
   jnz      .2728
   mov      $92, %al
   mov      EnvPutB, %r10
   call     *%r10
   mov      $46, %al
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2730
.2728:
   push     %rax
   mov      $46, %al
   mov      EnvPutB, %r10
   call     *%r10
   pop      %rax
.2726:
   mov      EnvPutB, %r10
   call     *%r10
   call     symByteCX_FACX
   jnz      .2724
   jmp      .2730
.2723:
   call     tsm_F
   jnz      .2731
   mov      $34, %al
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2732
.2731:
   mov      Tsm, %r10
   mov      (%r10), %rbx
   call     outNameE
.2732:
   mov      %r12, %rdx
   call     symByteCX_FACX
.2733:
   cmp      $34, %al
   jz       printE_20
   cmp      $94, %al
   jz       printE_20
   cmp      $92, %al
   jnz      .2734
printE_20:
   push     %rax
   mov      $92, %al
   mov      EnvPutB, %r10
   call     *%r10
   pop      %rax
   jmp      .2735
.2734:
   cmp      $127, %al
   jnz      .2736
   mov      $94, %al
   mov      EnvPutB, %r10
   call     *%r10
   mov      $63, %al
   jmp      .2735
.2736:
   cmp      $32, %al
   jnc      .2735
   push     %rax
   mov      $94, %al
   mov      EnvPutB, %r10
   call     *%r10
   pop      %rax
   orb      $64, %al
.2735:
   mov      EnvPutB, %r10
   call     *%r10
   call     symByteCX_FACX
   jnz      .2733
   call     tsm_F
   jnz      .2739
   mov      $34, %al
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2730
.2739:
   mov      Tsm, %r10
   mov      8(%r10), %rbx
   call     outNameE
.2730:
   pop      %r14
   pop      %r13
   ret
.2720:
   cmpq     $Quote, (%rbx)
   jnz      .2741
   cmp      8(%rbx), %rbx
   jz       .2741
   mov      $39, %al
   mov      EnvPutB, %r10
   call     *%r10
   mov      8(%rbx), %rbx
   call     printE
   pop      %r13
   ret
.2741:
   mov      %rbx, %r13
   mov      $40, %al
   mov      EnvPutB, %r10
   call     *%r10
.2743:
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   call     printE
   pop      %rbx
   cmp      $Nil, %rbx
   jz       .2744
   cmp      %r13, %rbx
   jnz      .2745
   call     space
   mov      $46, %al
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2744
.2745:
   testb    $0x0E, %bl
   jz       .2746
   call     space
   mov      $46, %al
   mov      EnvPutB, %r10
   call     *%r10
   call     space
   call     printE
   jmp      .2744
.2746:
   call     space
   jmp      .2743
.2744:
   mov      $41, %al
   mov      EnvPutB, %r10
   call     *%r10
   pop      %r13
   ret

   .balign  16
   .global  tsm_F
tsm_F:
   cmpq     $Nil, Tsm
   jz       ret
   cmpq     $putStdoutB, EnvPutB
   jnz      Retz
   mov      OutFile, %r10
   cmp      %r12, 16(%r10)
   ret

   .balign  16
   .global  prinE_E
prinE_E:
   push     %rbx
   call     prinE
   pop      %rbx
   ret

   .balign  16
   .global  prinE
prinE:
   cmp      %r12b, Signal
   jz       .2747
   call     sighandler0
.2747:
   cmp      $Nil, %rbx
   jz       .2748
   testb    $0x02, %bl
   jnz      outNumE
   testb    $0x04, %bl
   jz       .2749
   mov      $-1, %rax
   jmp      fmtNum0AE_E
.2749:
   push     %r13
   testb    $0x08, %bl
   jz       .2750
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       .2754
   testb    $0x08, -8(%rbx)
   jnz      .2752
   call     prNameX
   jmp      .2754
.2752:
   mov      $123, %al
   mov      EnvPutB, %r10
   call     *%r10
   call     prExtNmX
   mov      $125, %al
   mov      EnvPutB, %r10
   call     *%r10
   jmp      .2754
.2750:
   mov      %rbx, %r13
.2755:
   mov      (%r13), %rbx
   call     prinE
   mov      8(%r13), %r13
   cmp      $Nil, %r13
   jz       .2754
   testb    $0x0E, %r13b
   jz       .2755
   mov      %r13, %rbx
   call     prinE
.2754:
   pop      %r13
.2748:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doPrin
doPrin:
   push     %r13
   mov      8(%rbx), %r13
.2758:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     prinE_E
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2758
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPrinl
doPrinl:
   call     doPrin
   jmp      newline

   .balign  16
   nop
   nop
   .global  doSpace
doSpace:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2759
   call     space
   mov      $18, %rbx
   jmp      .2760
.2759:
   mov      %rbx, %rdx
   call     xCntCX_FC
.2761:
   sub      $1, %rdx
   js       .2760
   call     space
   jmp      .2761
.2760:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPrint
doPrint:
   push     %r13
   mov      8(%rbx), %r13
.2763:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     printE_E
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2764
   call     space
   jmp      .2763
.2764:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPrintsp
doPrintsp:
   push     %r13
   mov      8(%rbx), %r13
.2765:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     printE_E
   call     space
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2765
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPrintln
doPrintln:
   call     doPrint
   jmp      newline

   .balign  16
   nop
   nop
   .global  doFlush
doFlush:
   mov      OutFile, %rax
   call     flushA_F
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doRewind
doRewind:
   mov      $Nil, %rbx
   mov      OutFile, %rdx
   cmp      %r12, %rdx
   jz       .2766
   mov      %r12, 8(%rdx)
   mov      %rdx, %r12
   mov      (%r12), %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     lseek
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      .2766
   mov      %rdx, %r12
   mov      (%r12), %rdi
   xor      %rsi, %rsi
   call     ftruncate
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
.2766:
   rep
   ret

   .balign  16
   nop
   nop
   .global  doExt
doExt:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   pushq    ExtN
   mov      %rbx, ExtN
   mov      8(%r14), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   popq     ExtN
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doRd
doRd:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jnz      .2768
   push     %r15
   mov      InFile, %r15
   cmp      %r12, %r15
   jz       .2769
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   movq     $getBinaryZ_FB, GetBinZ_FB
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binReadZ_FE
   cmovcq   8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2769:
   pop      %r15
   ret
.2768:
   mov      InFile, %rdx
   cmp      %r12, %rdx
   jz       retNil
   push     %r13
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   shr      $4, %rbx
   jz       doRd_80
   jnc      .2770
   sub      %rbx, %rsp
   mov      %rsp, %r14
   mov      $1, %r15
   jmp      .2771
.2770:
   mov      %rsp, %r14
   mov      $-1, %r15
   add      %r15, %r14
   sub      %rbx, %rsp
.2771:
   mov      (%rdx), %rdx
   mov      %rsp, %r13
   push     %rbx
   call     rdBytesCEX_F
   jnz      .2772
doRd_80:
   mov      $Nil, %rbx
   jmp      doRd_90
.2772:
   lea      8(%rbp), %r13
   mov      $4, %rdx
.2773:
   mov      (%r14), %al
   call     byteNumBCX_CX
   add      %r15, %r14
   subq     $1, (%rsp)
   jnz      .2773
   mov      8(%rbp), %rbx
   testb    $0x04, %bl
   jz       doRd_90
   mov      %rbx, %rax
   call     zapZeroA_A
   mov      %rax, %rbx
doRd_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doPr
doPr:
   push     %r13
   mov      8(%rbx), %r13
.2775:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbx
   mov      ExtN, %r10
   mov      %r10, Extn
   call     prE
   pop      %rbx
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2775
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doWr
doWr:
   push     %r13
   mov      8(%rbx), %r13
.2776:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rax
   shr      $4, %rax
   call     putStdoutB
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2776
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doRpc
doRpc:
   push     %r13
   mov      8(%rbx), %r13
   mov      $1, %rax
   call     putCharA
.2777:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   movq     $putCharA, PutBinBZ
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binPrintEZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2777
   mov      $3, %rax
   call     putCharA
   mov      %rdx, %r12
   mov      stdout, %rdi
   call     fflush
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
   pop      %r13
   ret

   .balign  16
   .global  putCharA
putCharA:
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     putchar_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .balign  16
   .global  getAdrZ_A
getAdrZ_A:
   mov      5(%r15), %al
   movzx    %al, %rax
   shl      $8, %rax
   mov      4(%r15), %al
   shl      $8, %rax
   mov      3(%r15), %al
   shl      $8, %rax
   mov      2(%r15), %al
   shl      $8, %rax
   mov      1(%r15), %al
   shl      $8, %rax
   mov      (%r15), %al
   ret

   .balign  16
   .global  setAdrAZ
setAdrAZ:
   mov      %al, (%r15)
   shr      $8, %rax
   mov      %al, 1(%r15)
   shr      $8, %rax
   mov      %al, 2(%r15)
   shr      $8, %rax
   mov      %al, 3(%r15)
   shr      $8, %rax
   mov      %al, 4(%r15)
   shr      $8, %rax
   mov      %al, 5(%r15)
   ret

   .balign  16
   .global  setAdrAS
setAdrAS:
   mov      %al, 10(%rsp)
   shr      $8, %rax
   mov      %al, 11(%rsp)
   shr      $8, %rax
   mov      %al, 12(%rsp)
   shr      $8, %rax
   mov      %al, 13(%rsp)
   shr      $8, %rax
   mov      %al, 14(%rsp)
   shr      $8, %rax
   mov      %al, 15(%rsp)
   ret

   .balign  16
   .global  dbfBuf_AF
dbfBuf_AF:
   mov      Buf+1, %al
   movzx    %al, %rax
   shl      $8, %rax
   mov      Buf, %al
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      retc
   add      DbFiles, %rax
   mov      %rax, DbFile
   ret

   .balign  16
   .global  extNmCE_X
extNmCE_X:
   mov      %rdx, %r13
   and      $1048575, %r13
   shr      $20, %rdx
   mov      %rdx, %rax
   and      $4095, %rax
   shl      $28, %rax
   or       %rax, %r13
   shr      $12, %rdx
   shl      $48, %rdx
   or       %rdx, %r13
   mov      %rbx, %rax
   and      $255, %rax
   shl      $20, %rax
   or       %rax, %r13
   shr      $8, %rbx
   shl      $40, %rbx
   or       %rbx, %r13
   shl      $4, %r13
   orb      $2, %r13b
   ret

   .global  packExtNmX_E
packExtNmX_E:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   call     fileObjX_AC
   push     %rdx
   mov      $4, %rdx
   lea      8(%rbp), %r13
   cmp      %r12, %rax
   jz       .2778
   call     packAoACX_CX
.2778:
   pop      %rax
   call     packOctACX_CX
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .global  packAoACX_CX
packAoACX_CX:
   cmp      $15, %rax
   jbe      .2779
   push     %rax
   shr      $4, %rax
   call     packAoACX_CX
   pop      %rax
   and      $15, %al
.2779:
   add      $64, %al
   jmp      byteSymBCX_CX

   .balign  16
   .global  packOctACX_CX
packOctACX_CX:
   cmp      $7, %rax
   jbe      .2780
   push     %rax
   shr      $3, %rax
   call     packOctACX_CX
   pop      %rax
   and      $7, %al
.2780:
   add      $48, %al
   jmp      byteSymBCX_CX

   .global  chopExtNmX_E
chopExtNmX_E:
   call     fileObjX_AC
   mov      %rax, %r13
   call     oct3C_CA
   call     consA_E
   mov      %rax, (%rbx)
   movq     $Nil, 8(%rbx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2781:
   shr      $3, %rdx
   jz       .2782
   call     oct3C_CA
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      %rbx, 8(%rbp)
   jmp      .2781
.2782:
   cmp      %r12, %r13
   jz       .2783
   mov      %r12, %rbx
   mov      %r12, %rax
.2784:
   mov      %r13b, %al
   and      $15, %al
   add      $64, %al
   or       %al, %bl
   shr      $4, %r13
   jz       .2785
   shl      $8, %rbx
   jmp      .2784
.2785:
   shl      $4, %rbx
   orb      $2, %bl
   call     cons_A
   mov      %rbx, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      %rbx, 8(%rbp)
.2783:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .global  oct3C_CA
oct3C_CA:
   mov      %r12, %rax
   mov      %dl, %al
   and      $7, %al
   add      $48, %al
   mov      %rax, %rbx
   shr      $3, %rdx
   jz       .2786
   mov      %dl, %al
   and      $7, %al
   add      $48, %al
   shl      $8, %rbx
   or       %al, %bl
   shr      $3, %rdx
   jz       .2786
   mov      %dl, %al
   and      $7, %al
   add      $48, %al
   shl      $8, %rbx
   or       %al, %bl
.2786:
   shl      $4, %rbx
   orb      $2, %bl
   call     cons_A
   mov      %rbx, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   ret

   .balign  16
   .global  fileObjX_AC
fileObjX_AC:
   shl      $2, %r13
   shr      $6, %r13
   mov      %r13, %rdx
   and      $1048575, %rdx
   shr      $20, %r13
   mov      %r13, %rax
   and      $255, %rax
   shr      $8, %r13
   jz       .2788
   mov      %r13, %rbx
   and      $4095, %rbx
   shl      $20, %rbx
   or       %rbx, %rdx
   shr      $12, %r13
   mov      %r13, %rbx
   and      $255, %rbx
   shl      $8, %rbx
   or       %rbx, %rax
   shr      $8, %r13
   shl      $32, %r13
   or       %r13, %rax
.2788:
   rep
   ret

   .balign  16
   .global  fileObjE_AC
fileObjE_AC:
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   call     fileObjX_AC
   pop      %r13
   ret

   .balign  16
   .global  dbFileBlkY_AC
dbFileBlkY_AC:
   push     %r13
   mov      %r14, %r13
   call     fileObjX_AC
   shl      $6, %rax
   shl      $6, %rdx
   pop      %r13
   ret

   .global  rdLockDb
rdLockDb:
   cmpq     $TSym, Solo
   jz       .2789
   mov      $65536, %rax
   mov      DbFiles, %r10
   mov      (%r10), %rdx
   jmp      lockFileAC
.2789:
   rep
   ret

   .global  wrLockDb
wrLockDb:
   cmpq     $TSym, Solo
   jz       .2790
   mov      $65537, %rax
   mov      DbFiles, %r10
   mov      (%r10), %rdx
   jmp      lockFileAC
.2790:
   rep
   ret

   .global  rwUnlockDbA
rwUnlockDbA:
   cmpq     $TSym, Solo
   jz       .2791
   cmp      %r12, %rax
   jnz      .2792
   push     %r13
   push     %r14
   mov      DbFiles, %r13
   mov      DBs, %r14
.2793:
   sub      $64, %r14
   jz       .2794
   add      $64, %r13
   cmp      %r12b, 32(%r13)
   jz       .2793
   mov      $2, %rax
   mov      (%r13), %rdx
   call     unLockFileAC
   mov      %r12b, 32(%r13)
   jmp      .2793
.2794:
   pop      %r14
   pop      %r13
   movq     $2, Solo
   mov      %r12, %rax
.2792:
   orb      $2, %al
   mov      DbFiles, %r10
   mov      (%r10), %rdx
   call     unLockFileAC
.2791:
   rep
   ret

   .global  tryLockCE_FA
tryLockCE_FA:
.2796:
   mov      %rdx, Flock+8
   mov      %rbx, Flock+16
   mov      $1, %rax
   movw     %ax, Flock
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      $6, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2797
   mov      DbFile, %r11
   movb     $1, 32(%r11)
   cmp      %r12, %rdx
   jnz      .2798
   movq     $TSym, Solo
   jmp      .2799
.2798:
   cmpq     $TSym, Solo
   jz       .2799
   movq     $Nil, Solo
.2799:
   or       %r12, %r12
   ret
.2797:
   call     errno_A
   cmp      $4, %rax
   jz       .2801
   cmp      $13, %rax
   jz       .2801
   cmp      $11, %rax
   jnz      lockErr
.2801:
   mov      %rdx, Flock+8
   mov      %rbx, Flock+16
.2803:
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      $5, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2804
   call     errno_A
   cmp      $4, %rax
   jnz      lockErr
   jmp      .2803
.2804:
   movswq   Flock, %rax
   cmp      $2, %al
   jz       .2796
   movslq   Flock+24, %rax
   ret

   .global  jnlFileno_A
jnlFileno_A:
   mov      %rdx, %r12
   mov      DbJnl, %rdi
   call     fileno
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .global  logFileno_A
logFileno_A:
   mov      %rdx, %r12
   mov      DbLog, %rdi
   call     fileno
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .global  lockJnl
lockJnl:
   call     jnlFileno_A
   mov      %rax, %rdx
   jmp      wrLockFileC

   .global  unLockJnl
unLockJnl:
   mov      %rdx, %r12
   mov      DbJnl, %rdi
   call     fflush
   mov      %r12, %rdx
   xor      %r12, %r12
   call     jnlFileno_A
   mov      %rax, %rdx
   mov      $2, %rax
   jmp      unLockFileAC

   .balign  16
   .global  setBlockAC_Z
setBlockAC_Z:
   add      DbFiles, %rax
setBlkAC_Z:
   mov      %rax, DbFile
   mov      %rdx, BlkIndex
   mov      24(%rax), %rax
   mov      DbBlock, %r15
   add      %r15, %rax
   mov      %rax, BufEnd
   ret

   .global  rdBlockLinkZ_Z
rdBlockLinkZ_Z:
   mov      BlkLink, %rax

   .global  rdBlockIndexAZ_Z
rdBlockIndexAZ_Z:
   mov      %rax, BlkIndex
   mov      DbBlock, %r15

   .global  rdBlockZ_Z
rdBlockZ_Z:
   mov      DbFile, %rax
   mov      24(%rax), %rdx
   mov      BlkIndex, %rbx
   mov      16(%rax), %cl
   shl      %cl, %rbx
   call     blkPeekCEZ
   call     getAdrZ_A
   andb     $~63, %al
   mov      %rax, BlkLink
   add      $6, %r15
   ret

   .global  blkPeekCEZ
blkPeekCEZ:
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      %r15, %rsi
   mov      %r12, %rdx
   mov      %rbx, %rcx
   call     pread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %rdx, %rax
   jnz      dbRdErr
   rep
   ret

   .global  wrBlockZ
wrBlockZ:
   mov      DbFile, %rax
   mov      24(%rax), %rdx
   mov      BlkIndex, %rbx
   mov      16(%rax), %cl
   shl      %cl, %rbx

   .global  blkPokeCEZ
blkPokeCEZ:
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      %r15, %rsi
   mov      %r12, %rdx
   mov      %rbx, %rcx
   call     pwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %rdx, %rax
   jnz      dbWrErr
   cmp      %r12, DbJnl
   jz       Ret
   mov      DbFile, %r10
   cmp      24(%r10), %rax
   jnz      .2805
   mov      $64, %rax
.2805:
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      DbJnl, %rsi
   call     putc_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   sub      $8, %rsp
   mov      DbFile, %r10
   mov      8(%r10), %rax
   mov      %al, (%rsp)
   shr      $8, %rax
   mov      %al, 1(%rsp)
   mov      %rbx, %rax
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shr      %cl, %rax
   call     setAdrAS
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $8, %rsi
   mov      $1, %rdx
   mov      DbJnl, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrJnlErr
   mov      %rdx, %r12
   mov      %r15, %rdi
   mov      %r12, %rsi
   mov      $1, %rdx
   mov      DbJnl, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrJnlErr
   add      $8, %rsp
   ret

   .global  logBlock
logBlock:
   sub      $8, %rsp
   mov      DbFile, %r10
   mov      8(%r10), %rax
   mov      %al, (%rsp)
   shr      $8, %rax
   mov      %al, 1(%rsp)
   mov      BlkIndex, %rax
   call     setAdrAS
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $8, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrLogErr
   mov      %rdx, %r12
   mov      DbBlock, %rdi
   mov      DbFile, %r10
   mov      24(%r10), %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrLogErr
   add      $8, %rsp
   ret

   .global  newBlock_X
newBlock_X:
   push     %r15
   mov      $12, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   cmp      %r12, %rax
   jz       newBlock_X_10
   mov      DbFile, %r10
   cmp      %r12, 56(%r10)
   jz       newBlock_X_10
   mov      %rax, %r13
   mov      DbFile, %rdx
   mov      16(%rdx), %cl
   shl      %cl, %rax
   subq     $1, 56(%rdx)
   mov      %rax, %rbx
   mov      $6, %rdx
   call     blkPeekCEZ
   mov      %r12, %rbx
   mov      $12, %rdx
   jmp      .2807
newBlock_X_10:
   add      $6, %r15
   call     getAdrZ_A
   mov      $281474976710592, %r10
   cmp      %r10, %rax
   jz       dbSizErr
   mov      %rax, %r13
   add      $64, %rax
   call     setAdrAZ
   sub      $6, %r15
.2807:
   call     blkPokeCEZ
   mov      DbFile, %r10
   mov      24(%r10), %rdx
   sub      %rdx, %rsp
   mov      $0, %al
   lea      (%rsp), %rdi
   mov      %rdx, %rcx
   cld
   rep stosb
   mov      %r13, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   mov      %rsp, %r15
   call     blkPokeCEZ
   mov      DbFile, %r10
   add      24(%r10), %rsp
   pop      %r15
   ret

   .global  newIdEX_X
newIdEX_X:
   sub      $1, %rbx
   shl      $6, %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   cmp      %r12, DbLog
   jnz      .2808
   addq     $1, EnvProtect
.2808:
   call     wrLockDb
   cmp      %r12, DbJnl
   jz       .2809
   call     lockJnl
.2809:
   call     newBlock_X
   mov      %r13, %rdx
   shr      $6, %rdx
   mov      DbFile, %r10
   mov      8(%r10), %rbx
   call     extNmCE_X
   cmp      %r12, DbJnl
   jz       .2810
   call     unLockJnl
.2810:
   mov      $65536, %rax
   call     rwUnlockDbA
   cmp      %r12, DbLog
   jnz      .2811
   subq     $1, EnvProtect
.2811:
   rep
   ret

   .global  isLifeE_F
isLifeE_F:
   push     %rbx
   call     fileObjE_AC
   pop      %rbx
   shl      $6, %rdx
   jz       retnz
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      .2812
   add      DbFiles, %rax
   mov      %rax, DbFile
   mov      -8(%rbx), %rax
   call     nameA_A
   shl      $1, %rax
   jc       retz
   shl      $1, %rax
   jc       Retz
   push     %rbx
   push     %r15
   push     %rdx
   mov      $6, %rdx
   mov      $6, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   pop      %rdx
   cmp      %rax, %rdx
   jnc      retnz
   mov      %rdx, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   mov      $6, %rdx
   call     blkPeekCEZ
   mov      (%r15), %al
   and      $63, %al
   cmp      $1, %al
   pop      %r15
   pop      %rbx
   jmp      .2813
.2812:
   testb    $0x0E, Ext
.2813:
   rep
   ret

   .global  cleanUpY
cleanUpY:
   mov      $6, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   push     %rax
   mov      %r14, %rax
   call     setAdrAZ
   call     blkPokeCEZ
   mov      %r14, %rbx
.2814:
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   call     blkPeekCEZ
   andb     $~63, (%r15)
   call     getAdrZ_A
   cmp      %r12, %rax
   jz       .2815
   mov      %rax, %r14
   call     blkPokeCEZ
   mov      %r14, %rbx
   jmp      .2814
.2815:
   pop      %rax
   call     setAdrAZ
   jmp      blkPokeCEZ

   .balign  16
   .global  getBlockZ_FB
getBlockZ_FB:
   cmp      BufEnd, %r15
   jnz      .2816
   mov      BlkLink, %rax
   cmp      %r12, %rax
   jz       ret
   push     %rdx
   push     %rbx
   call     rdBlockIndexAZ_Z
   pop      %rbx
   pop      %rdx
.2816:
   mov      (%r15), %al
   add      $1, %r15
   ret

   .balign  16
   .global  putBlockBZ
putBlockBZ:
   cmp      BufEnd, %r15
   jnz      .2817
   push     %rax
   push     %rdx
   push     %rbx
   mov      DbBlock, %r15
   cmp      %r12, BlkLink
   jz       .2818
   call     wrBlockZ
   call     rdBlockLinkZ_Z
   jmp      .2819
.2818:
   push     %r13
   call     newBlock_X
   mov      (%r15), %al
   movzx    %al, %rax
   push     %rax
   or       %r13, %rax
   call     setAdrAZ
   call     wrBlockZ
   mov      %r13, BlkIndex
   pop      %rax
   cmp      $63, %rax
   jz       .2820
   add      $1, %rax
.2820:
   call     setAdrAZ
   add      $6, %r15
   pop      %r13
.2819:
   pop      %rbx
   pop      %rdx
   pop      %rax
.2817:
   mov      %al, (%r15)
   add      $1, %r15
   ret

   .balign  16
   nop
   nop
   .global  doPool
doPool:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evSymY_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   cmp      $Nil, %rbx
   jz       .2821
   testb    $0x0E, %bl
   jnz      lstErrEX
.2821:
   mov      8(%r14), %r14
   call     evSymY_E
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   call     evSymY_E
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   movq     $2, Solo
   cmp      %r12, DBs
   jz       .2822
   call     doRollback
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2823:
   mov      (%rbx), %rax
   call     closeAX
   mov      %rdx, %r12
   mov      48(%rbx), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $64, %rbx
   sub      $64, %rdx
   jnz      .2823
   mov      %r12, DBs
   cmp      %r12, DbJnl
   jz       .2824
   mov      %rdx, %r12
   mov      DbJnl, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, DbJnl
.2824:
   cmp      %r12, DbLog
   jz       .2822
   mov      %rdx, %r12
   mov      DbLog, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, DbLog
.2822:
   mov      32(%rbp), %rbx
   cmp      $Nil, %rbx
   jz       .2826
   push     %rax
   call     pathStringE_SZ
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %rsp, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   add      %rsp, %rdx
   push     %rdx
   mov      $64, %rbx
   mov      24(%rbp), %rax
   testb    $0x0E, %al
   jnz      .2827
   mov      %r12, %rbx
.2828:
   add      $64, %rbx
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .2828
.2827:
   mov      DbFiles, %rax
   call     allocAE_A
   mov      %rax, DbFiles
   mov      %rax, %r14
   add      %rbx, %rax
   push     %rax
   mov      %r12, MaxBlkSize
.2829:
   mov      8(%rsp), %rdx
   mov      %r14, %rax
   sub      DbFiles, %rax
   shr      $6, %rax
   mov      %rax, 8(%r14)
   testb    $0x0E, 24(%rbp)
   jnz      .2830
   call     bufAoAC_C
.2830:
   mov      %r12b, (%rdx)
   mov      24(%rbp), %rax
   mov      8(%rax), %r10
   mov      %r10, 24(%rbp)
   mov      (%rax), %rax
   testb    $0x02, %al
   mov      $2, %r10
   cmovzq   %r10, %rax
   jz       .2831
   shr      $4, %rax
.2831:
   mov      %al, 16(%r14)
   mov      %r14, DbFile
   mov      %rdx, %r12
   lea      16(%rsp), %rdi
   mov      $2, %rsi
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2832
   mov      %rax, (%r14)
   mov      $13, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   mov      12(%r15), %al
   mov      %al, 16(%r14)
   mov      $64, %rdx
   mov      %al, %cl
   shl      %cl, %rdx
   mov      %rdx, 24(%r14)
   jmp      .2833
.2832:
   mov      32(%rbp), %rbx
   call     errno_A
   cmp      $2, %rax
   jnz      openErrEX
   mov      %rdx, %r12
   lea      16(%rsp), %rdi
   mov      $194, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       openErrEX
   mov      %rax, (%r14)
   mov      $64, %rdx
   mov      16(%r14), %cl
   shl      %cl, %rdx
   mov      %rdx, 24(%r14)
   sub      %rdx, %rsp
   mov      $0, %al
   lea      (%rsp), %rdi
   mov      %rdx, %rcx
   cld
   rep stosb
   mov      %r12, %rbx
   lea      6(%rsp), %r15
   cmp      DbFiles, %r14
   jz       .2834
   mov      $64, %rax
   jmp      .2835
.2834:
   mov      $128, %rax
.2835:
   call     setAdrAZ
   mov      %rsp, %r15
   mov      16(%r14), %r10b
   mov      %r10b, 12(%r15)
   call     blkPokeCEZ
   cmp      DbFiles, %r14
   jnz      .2836
   mov      %r12, (%rsp)
   mov      %r12, 8(%rsp)
   mov      %rsp, %r15
   mov      $1, %rax
   call     setAdrAZ
   mov      24(%r14), %rbx
   call     blkPokeCEZ
.2836:
   add      24(%r14), %rsp
.2833:
   mov      (%r14), %rax
   call     closeOnExecAX
   mov      24(%r14), %rax
   cmp      MaxBlkSize, %rax
   jbe      .2837
   mov      %rax, MaxBlkSize
.2837:
   mov      %r12, 32(%r14)
   mov      %r12, 40(%r14)
   mov      %r12, 48(%r14)
   movq     $-1, 56(%r14)
   add      $64, %r14
   mov      %r14, %rax
   sub      DbFiles, %rax
   mov      %rax, DBs
   cmp      (%rsp), %r14
   jnz      .2829
   mov      DbBlock, %rax
   mov      MaxBlkSize, %rbx
   call     allocAE_A
   mov      %rax, DbBlock
   mov      16(%rbp), %rbx
   cmp      $Nil, %rbx
   jz       .2838
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_a_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       openErrEX
   mov      %rax, DbJnl
   call     jnlFileno_A
   call     closeOnExecAX
.2838:
   mov      8(%rbp), %rbx
   cmp      $Nil, %rbx
   jz       .2826
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_ap_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       openErrEX
   mov      %rax, DbLog
   call     logFileno_A
   call     closeOnExecAX
   call     rewindLog
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .2840
   mov      %rdx, %r12
   mov      DbLog, %rdi
   call     feof
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .2843
   call     ignLog
   jmp      .2840
.2843:
   movswq   Buf, %rax
   cmp      $-1, %rax
   jnz      .2844
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $RolbLog, %rsi
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   call     rewindLog
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2845:
   mov      %r12b, 33(%rbx)
   sub      $64, %rdx
   jnz      .2845
   sub      MaxBlkSize, %rsp
.2846:
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       jnlErrX
   movswq   Buf, %rax
   cmp      $-1, %rax
   jz       .2847
   call     dbfBuf_AF
   jc       jnlErrX
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $6, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      DbFile, %r10
   mov      24(%r10), %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   mov      $Buf, %r15
   call     getAdrZ_A
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rax
   mov      DbFile, %r10
   mov      24(%r10), %rdx
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      %rsp, %rsi
   mov      %r12, %rdx
   mov      %rax, %rcx
   call     pwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %rdx, %rax
   jnz      dbWrErr
   mov      DbFile, %r11
   movb     $1, 33(%r11)
   jmp      .2846
.2847:
   add      MaxBlkSize, %rsp
   call     fsyncDB
   jmp      .2840
.2844:
   call     dbfBuf_AF
   jc       doPool_40
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $6, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      doPool_40
   mov      %rdx, %r12
   mov      DbLog, %rdi
   mov      DbFile, %r10
   mov      24(%r10), %rsi
   mov      $1, %rdx
   call     fseek
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      doPool_40
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jz       .2843
doPool_40:
   call     ignLog
.2840:
   call     truncLog
.2826:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   mov      $TSym, %rbx
   ret
RolbLog:
   .string  "Last transaction not completed: Rollbackn"

   .global  ignLog
ignLog:
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $IgnLog, %rsi
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   ret
IgnLog:
   .string  "Discarding incomplete transaction.n"

   .global  rewindLog
rewindLog:
   mov      %rdx, %r12
   mov      DbLog, %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     fseek
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .global  fsyncDB
fsyncDB:
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2850:
   cmp      %r12b, 33(%rbx)
   jz       .2851
   mov      %rdx, %r12
   mov      (%rbx), %rdi
   call     fsync
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       dbSyncErrX
.2851:
   sub      $64, %rdx
   jnz      .2850
   rep
   ret

   .global  truncLog
truncLog:
   call     rewindLog
   call     logFileno_A
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     ftruncate
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      truncErrX
   rep
   ret

   .balign  16
   .global  bufAoAC_C
bufAoAC_C:
   cmp      $15, %rax
   jbe      .2852
   push     %rax
   shr      $4, %rax
   call     bufAoAC_C
   pop      %rax
   and      $15, %al
.2852:
   add      $64, %al
   mov      %al, (%rdx)
   add      $1, %rdx
   ret

   .balign  16
   nop
   nop
   .global  doJournal
doJournal:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   sub      MaxBlkSize, %rsp
.2853:
   testb    $0x0E, %r14b
   jnz      .2854
   call     evSymY_E
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_r_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       openErrEX
   mov      %rax, %rbx
.2855:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     getc_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2856
   mov      %rax, %rdx
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      %rbx, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   call     dbfBuf_AF
   jc       dbfErrX
   cmp      $64, %rdx
   cmovzq   24(%rax), %rdx
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $6, %rsi
   mov      $1, %rdx
   mov      %rbx, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      %r12, %rsi
   mov      $1, %rdx
   mov      %rbx, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   push     %rbx
   mov      $Buf, %r15
   call     getAdrZ_A
   mov      %rax, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   lea      8(%rsp), %r15
   call     blkPokeCEZ
   pop      %rbx
   jmp      .2855
.2856:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%r14), %r14
   jmp      .2853
.2854:
   add      MaxBlkSize, %rsp
   mov      $TSym, %rbx
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doId
doId:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .2857
   shr      $4, %rbx
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2858
   pop      %rdx
   mov      %r12, %rbx
   jmp      .2859
.2858:
   call     xCntEX_FE
   mov      %rbx, %rdx
   pop      %rbx
   sub      $1, %rbx
.2859:
   call     extNmCE_X
   call     externX_E
   pop      %r14
   pop      %r13
   ret
.2857:
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   xchg     %r14, %rbx
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   xchg     %r14, %rbx
   call     fileObjE_AC
   shl      $4, %rdx
   orb      $2, %dl
   cmp      $Nil, %r14
   cmovzq   %rdx, %rbx
   jz       .2860
   add      $1, %rax
   shl      $4, %rax
   orb      $2, %al
   call     cons_E
   mov      %rax, (%rbx)
   mov      %rdx, 8(%rbx)
.2860:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doSeq
doSeq:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .2861
   andb     $~15, %bl
   sub      $16, %rbx
   shl      $2, %rbx
   push     %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   mov      %r12, %r13
   jmp      .2862
.2861:
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   call     fileObjE_AC
   shl      $6, %rax
   push     %rax
   cmp      DBs, %rax
   jnc      dbfErrX
   add      DbFiles, %rax
   mov      %rax, DbFile
   shl      $6, %rdx
   mov      %rdx, %r13
.2862:
   call     rdLockDb
   mov      $6, %rdx
   mov      $6, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   mov      %rax, %r14
.2863:
   add      $64, %r13
   cmp      %r14, %r13
   jc       .2864
   pop      %rax
   mov      $Nil, %rbx
   jmp      .2865
.2864:
   mov      %r13, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   mov      $6, %rdx
   call     blkPeekCEZ
   mov      (%r15), %al
   and      $63, %al
   cmp      $1, %al
   jnz      .2863
   pop      %rbx
   shr      $6, %rbx
   mov      %r13, %rdx
   shr      $6, %rdx
   call     extNmCE_X
   call     externX_E
.2865:
   mov      $65536, %rax
   call     rwUnlockDbA
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doLieu
doLieu:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jz       retNil
   andb     $~8, %al
.2867:
   testb    $0x06, %al
   jz       .2868
   shl      $1, %rax
   jc       .2869
   shl      $1, %rax
   mov      $Nil, %r10
   cmovncq  %r10, %rbx
   ret
.2869:
   shl      $1, %rax
   mov      $Nil, %r10
   cmovcq   %r10, %rbx
   ret
.2868:
   mov      8(%rax), %rax
   jmp      .2867

   .balign  16
   nop
   nop
   .global  doLock
doLock:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2870
   mov      DbFiles, %r10
   mov      %r10, DbFile
   mov      %r12, %rdx
   mov      %r12, %rbx
   call     tryLockCE_FA
   jmp      .2871
.2870:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   call     fileObjE_AC
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      dbfErrX
   add      DbFiles, %rax
   mov      %rax, DbFile
   mov      24(%rax), %rax
   mulq     %rdx
   mov      %rax, %rdx
   mov      $1, %rbx
   call     tryLockCE_FA
.2871:
   mov      $Nil, %rbx
   jz       .2872
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
.2872:
   pop      %r13
   ret

   .balign  16
   .global  dbSizeX_A
dbSizeX_A:
   testb    $0x02, %r13b
   jz       .2873
   shr      $3, %r13
   jmp      dbSizeX_A_20
.2873:
   testb    $0x04, %r13b
   jz       .2874
   mov      $9, %rax
.2875:
   mov      -4(%r13), %rdx
   mov      4(%r13), %r13
   testb    $0x02, %r13b
   jnz      .2876
   add      $8, %rax
   jmp      .2875
.2876:
   shr      $4, %r13
   shl      $1, %rdx
   adc      %r13, %r13
   jmp      dbSizeX_A_40
.2874:
   mov      $1, %rax
   cmp      $Nil, %r13
   jz       .2877
   testb    $0x08, %r13b
   jz       .2878
   mov      -8(%r13), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       .2879
   testb    $0x02, %r13b
   jz       .2880
   shl      $2, %r13
   shr      $6, %r13
dbSizeX_A_20:
   mov      $2, %rax
.2881:
   shr      $8, %r13
   jz       .2882
   add      $1, %rax
   jmp      .2881
.2882:
   rep
   ret
.2880:
   mov      $9, %rax
.2883:
   mov      4(%r13), %r13
   testb    $0x02, %r13b
   jnz      .2884
   add      $8, %rax
   jmp      .2883
.2884:
   shr      $4, %r13
dbSizeX_A_40:
   jz       .2885
.2886:
   add      $1, %rax
   shr      $8, %r13
   jnz      .2886
.2885:
   cmp      $64, %rax
   jc       .2879
   mov      %rax, %r13
   sub      $64, %rax
   mov      %r12, %rdx
   mov      $255, %r10
   div      %r10
   stc
   adc      %r13, %rax
.2879:
   rep
   ret
.2878:
   push     %r13
   pushq    $2
.2888:
   pushq    8(%r13)
   mov      (%r13), %r13
   call     dbSizeX_A
   pop      %r13
   add      %rax, (%rsp)
   cmp      $Nil, %r13
   jz       .2889
   cmp      8(%rsp), %r13
   jnz      .2890
   addq     $1, (%rsp)
   jmp      .2889
.2890:
   testb    $0x0E, %r13b
   jz       .2888
   call     dbSizeX_A
   add      %rax, (%rsp)
.2889:
   pop      %rax
   pop      %rdx
.2877:
   rep
   ret

   .balign  16
   .global  dbFetchEX
dbFetchEX:
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jz       Ret
   rcl      $1, %rax
   jc       ret
   rcl      $1, %rax
   jc       ret
   stc
   rcr      $1, %rax
   shr      $1, %rax
   push     %rdx
dbAEX:
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .2892
   call     setBlockAC_Z
   call     rdLockDb
   call     rdBlockZ_Z
   mov      -6(%r15), %al
   and      $63, %al
   cmp      $1, %al
   jnz      idErrXL
   movq     $getBlockZ_FB, GetBinZ_FB
   mov      %r12, Extn
   call     binReadZ_FE
   mov      8(%rbp), %rax
   mov      %rbx, (%rax)
   mov      %r14, -8(%rax)
   call     binReadZ_FE
   cmp      $Nil, %rbx
   jz       .2893
   call     consE_A
   mov      %rbx, (%rax)
   mov      %r14, 8(%rax)
   mov      %rax, %r14
   orb      $8, %al
   mov      8(%rbp), %r11
   mov      %rax, -8(%r11)
   call     binReadZ_FE
   cmp      $TSym, %rbx
   jz       .2895
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r14), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r14)
.2895:
   call     binReadZ_FE
   cmp      $Nil, %rbx
   jz       .2893
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%r14), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   call     binReadZ_FE
   cmp      $TSym, %rbx
   jz       .2895
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r14), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r14)
   jmp      .2895
.2893:
   mov      $65536, %rax
   call     rwUnlockDbA
   jmp      .2898
.2892:
   shr      $6, %rax
   mov      Ext, %r15
   testb    $0x0E, %r15b
   jnz      dbfErrX
   mov      (%r15), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   cmp      %rdx, %rax
   jc       dbfErrX
.2899:
   mov      8(%r15), %rbx
   testb    $0x0E, %bl
   jnz      .2900
   mov      (%rbx), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   cmp      %rdx, %rax
   jc       .2900
   mov      %rbx, %r15
   jmp      .2899
.2900:
   push     %r14
   mov      (%r15), %r10
   pushq    8(%r10)
   mov      %rsp, %r14
   pushq    8(%rbp)
   mov      %rsp, %r15
   call     applyXYZ_E
   pop      %r15
   pop      %rax
   pop      %r14
   mov      (%rbx), %r10
   mov      %r10, (%r15)
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .2901
   orb      $8, %bl
   mov      %rbx, -8(%r15)
.2902:
   testb    $0x0E, 8(%rbx)
   jnz      .2903
   mov      8(%rbx), %rbx
   jmp      .2902
.2903:
   mov      %r14, 8(%rbx)
   jmp      .2898
.2901:
   orb      $8, %r14b
   mov      %r14, -8(%r15)
.2898:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %rdx
   ret

   .balign  16
   .global  dbTouchEX
dbTouchEX:
   push     %rdx
   lea      -8(%rbx), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jnz      .2905
   andb     $~8, %al
.2906:
   lea      8(%rax), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jz       .2906
.2905:
   rcl      $1, %rax
   jc       .2907
   rcl      $1, %rax
   jnc      .2908
   shr      $1, %rax
   stc
   rcr      $1, %rax
   mov      %rax, (%rdx)
   pop      %rdx
   ret
.2908:
   shr      $1, %rax
   stc
   rcr      $1, %rax
   jmp      dbAEX
.2907:
   pop      %rdx
   ret

   .balign  16
   .global  dbZapE
dbZapE:
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      .2909
   andb     $~8, %al
.2910:
   mov      8(%rax), %rax
   testb    $0x06, %al
   jz       .2910
   orb      $8, %al
.2909:
   shl      $2, %rax
   stc
   rcr      $1, %rax
   stc
   rcr      $1, %rax
   mov      %rax, -8(%rbx)
   movq     $Nil, (%rbx)
   ret

   .balign  16
   nop
   nop
   .global  doCommit
doCommit:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   cmp      %r12, DbLog
   jnz      .2911
   addq     $1, EnvProtect
.2911:
   call     wrLockDb
   cmp      %r12, DbJnl
   jz       .2912
   call     lockJnl
.2912:
   cmp      %r12, DbLog
   jz       .2913
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2914:
   mov      %r12b, 33(%rbx)
   mov      %r12, 56(%rbx)
   sub      $64, %rdx
   jnz      .2914
   push     %r13
   push     %r14
   mov      $Extern, %r13
   mov      %r12, %r14
.2916:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .2918
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %r14, 8(%rax)
   mov      %rdx, %r14
   jmp      .2916
.2918:
   mov      (%r13), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   rcl      $1, %rax
   jnc      .2919
   push     %r14
   rcr      $1, %rax
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .2920
   call     setBlockAC_Z
   call     rdBlockZ_Z
.2921:
   call     logBlock
   cmp      %r12, BlkLink
   jz       .2922
   call     rdBlockLinkZ_Z
   jmp      .2921
.2922:
   mov      DbFile, %rdx
   movb     $1, 33(%rdx)
   rcl      $2, %r14
   jc       .2920
   addq     $1, 56(%rdx)
.2920:
   pop      %r14
.2919:
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .2926
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      %r14, (%rax)
   orb      $8, %dl
   mov      %rdx, %r14
   jmp      .2916
.2926:
   mov      %r14, %rax
   cmp      %r12, %rax
   jz       doCommit_20
   testb    $0x08, %al
   jnz      .2927
   mov      8(%rax), %rdx
   mov      8(%rdx), %r14
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   jmp      .2918
.2927:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r14
   mov      %r13, (%rdx)
   mov      %rax, %r13
   jmp      .2926
doCommit_20:
   mov      DbFiles, %r13
   mov      DBs, %r14
.2929:
   mov      56(%r13), %rax
   cmp      %r12, %rax
   jz       .2930
   push     %rax
   mov      %r13, %rax
   mov      %r12, %rdx
   call     setBlkAC_Z
   call     rdBlockZ_Z
.2931:
   call     logBlock
   cmp      %r12, BlkLink
   jz       .2932
   subq     $1, (%rsp)
   jc       .2932
   call     rdBlockLinkZ_Z
   jmp      .2931
.2932:
   pop      %rax
.2930:
   sub      $64, %r14
   jnz      .2929
   mov      %rdx, %r12
   mov      $255, %rdi
   mov      DbLog, %rsi
   call     putc_unlocked
   mov      $255, %rdi
   mov      DbLog, %rsi
   call     putc_unlocked
   mov      DbLog, %rdi
   call     fflush
   mov      %r12, %rdx
   xor      %r12, %r12
   call     logFileno_A
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     fsync
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       trSyncErrX
   pop      %r14
   pop      %r13
.2913:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmpq     $Nil, 8(%rbp)
   jnz      .2933
   push     %r12
   jmp      .2934
.2933:
   mov      Tell, %rax
   or       Children, %rax
   push     %rax
   jz       .2934
   push     %rax
   pushq    TellBuf
   sub      $4096, %rsp
   mov      %rsp, %r15
   call     tellBegZ_Z
   mov      8(%rbp), %rbx
   call     prTellEZ
   mov      %r15, -16(%rbp)
.2934:
   push     %r13
   push     %r14
   mov      $Extern, %r13
   mov      %r12, %r14
.2937:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .2939
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %r14, 8(%rax)
   mov      %rdx, %r14
   jmp      .2937
.2939:
   mov      (%r13), %r10
   lea      -8(%r10), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jnz      .2940
   andb     $~8, %al
.2941:
   lea      8(%rax), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jz       .2941
.2940:
   rcl      $1, %rax
   jnc      .2942
   push     %r14
   rcl      $1, %rax
   jc       .2943
   stc
   rcr      $1, %rax
   shr      $1, %rax
   mov      %rax, (%rdx)
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .2952
   call     setBlockAC_Z
   call     rdBlockZ_Z
   mov      $1, %al
   or       %al, -6(%r15)
   movq     $putBlockBZ, PutBinBZ
   mov      (%r13), %r14
   mov      (%r14), %rbx
   mov      %r12, Extn
   call     binPrintEZ
   mov      -8(%r14), %r14
   andb     $~8, %r14b
.2945:
   testb    $0x06, %r14b
   jnz      .2946
   testb    $0x0E, (%r14)
   jnz      .2947
   mov      (%r14), %r10
   mov      8(%r10), %rbx
   call     binPrintEZ
   mov      (%r14), %r10
   mov      (%r10), %rbx
   call     binPrintEZ
   jmp      .2948
.2947:
   mov      (%r14), %rbx
   call     binPrintEZ
   mov      $TSym, %rbx
   call     binPrintEZ
.2948:
   mov      8(%r14), %r14
   jmp      .2945
.2946:
   mov      %r12, %rax
   call     putBlockBZ
   mov      DbBlock, %r15
   mov      (%r15), %al
   and      $63, %al
   movzx    %al, %rax
   call     setAdrAZ
   call     wrBlockZ
   mov      BlkLink, %r14
   cmp      %r12, %r14
   jz       .2949
   call     cleanUpY
.2949:
   cmp      %r12, -8(%rbp)
   jz       .2952
   mov      -16(%rbp), %r15
   mov      TellBuf, %r10
   lea      4086(%r10), %rax
   cmp      %rax, %r15
   jc       .2951
   call     tellEndZ
   lea      -4120(%rbp), %r15
   call     tellBegZ_Z
.2951:
   mov      (%r13), %rbx
   call     prTellEZ
   mov      %r15, -16(%rbp)
   jmp      .2952
.2943:
   shr      $2, %rax
   mov      %rax, (%rdx)
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .2952
   mov      %rdx, %r14
   call     cleanUpY
   cmp      %r12, -8(%rbp)
   jz       .2952
   mov      -16(%rbp), %r15
   mov      TellBuf, %r10
   lea      4086(%r10), %rax
   cmp      %rax, %r15
   jc       .2955
   call     tellEndZ
   lea      -4120(%rbp), %r15
   call     tellBegZ_Z
.2955:
   mov      (%r13), %rbx
   call     prTellEZ
   mov      %r15, -16(%rbp)
.2952:
   pop      %r14
.2942:
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .2958
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      %r14, (%rax)
   orb      $8, %dl
   mov      %rdx, %r14
   jmp      .2937
.2958:
   mov      %r14, %rax
   cmp      %r12, %rax
   jz       doCommit_40
   testb    $0x08, %al
   jnz      .2959
   mov      8(%rax), %rdx
   mov      8(%rdx), %r14
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   jmp      .2939
.2959:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r14
   mov      %r13, (%rdx)
   mov      %rax, %r13
   jmp      .2958
doCommit_40:
   pop      %r14
   pop      %r13
   cmp      %r12, -8(%rbp)
   jz       .2961
   mov      -16(%rbp), %r15
   call     tellEndZ
   add      $4096, %rsp
   popq     TellBuf
.2961:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      %r12, DbJnl
   jz       .2962
   call     unLockJnl
.2962:
   mov      Zap, %r14
   testb    $0x0E, %r14b
   jnz      .2963
   pushq    OutFile
   sub      $8216, %rsp
   mov      8(%r14), %rbx
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $1089, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       openErrEX
   mov      %r15, %rsp
   mov      %rax, (%rsp)
   mov      %r12, 8(%rsp)
   mov      %r12, 16(%rsp)
   mov      %rsp, OutFile
   movq     $putStdoutB, PutBinBZ
   mov      (%r14), %r14
.2964:
   testb    $0x0E, %r14b
   jnz      .2965
   mov      (%r14), %rbx
   mov      %r12, Extn
   call     binPrintEZ
   mov      8(%r14), %r14
   jmp      .2964
.2965:
   mov      %rsp, %rax
   call     flushA_F
   mov      %rsp, %rax
   call     closeAX
   mov      Zap, %r11
   movq     $Nil, (%r11)
   add      $8216, %rsp
   popq     OutFile
.2963:
   cmp      %r12, DbLog
   jz       .2966
   call     fsyncDB
   call     truncLog
.2966:
   mov      %r12, %rax
   call     rwUnlockDbA
   cmp      %r12, DbLog
   jnz      .2967
   subq     $1, EnvProtect
.2967:
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2968:
   movq     $-1, 56(%rbx)
   jnz      .2968
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doRollback
doRollback:
   push     %r13
   push     %r14
   mov      $Extern, %r13
   mov      %r12, %r14
.2970:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .2972
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %r14, 8(%rax)
   mov      %rdx, %r14
   jmp      .2970
.2972:
   mov      (%r13), %rbx
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      .2973
   andb     $~8, %al
.2974:
   mov      8(%rax), %rax
   testb    $0x06, %al
   jz       .2974
   orb      $8, %al
.2973:
   shl      $2, %rax
   shr      $2, %rax
   mov      %rax, -8(%rbx)
   movq     $Nil, (%rbx)
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .2977
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      %r14, (%rax)
   orb      $8, %dl
   mov      %rdx, %r14
   jmp      .2970
.2977:
   mov      %r14, %rax
   cmp      %r12, %rax
   jz       doRollback_90
   testb    $0x08, %al
   jnz      .2978
   mov      8(%rax), %rdx
   mov      8(%rdx), %r14
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   jmp      .2972
.2978:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r14
   mov      %r13, (%rdx)
   mov      %rax, %r13
   jmp      .2977
doRollback_90:
   pop      %r14
   pop      %r13
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .global  doMark
doMark:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmpq     $2, %rbx
   jnz      .2980
   mov      DbFiles, %r13
   mov      DBs, %r14
.2981:
   sub      $64, %r14
   jc       .2982
   mov      %r12, 40(%r13)
   mov      %rdx, %r12
   mov      48(%r13), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, 48(%r13)
   add      $64, %r13
   jmp      .2981
.2982:
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret
.2980:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   push     %rbx
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   xchg     (%rsp), %rbx
   call     fileObjE_AC
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      dbfErrX
   add      DbFiles, %rax
   mov      %rax, %r13
   mov      %rdx, %rbx
   shr      $3, %rbx
   cmp      40(%r13), %rbx
   jc       .2983
   push     %rbx
   add      $1, %rbx
   mov      %rbx, %r14
   mov      48(%r13), %rax
   call     allocAE_A
   mov      %rax, 48(%r13)
   xchg     40(%r13), %rbx
   sub      %rbx, %r14
   add      %rax, %rbx
   mov      $0, %al
   lea      (%rbx), %rdi
   mov      %r14, %rcx
   cld
   rep stosb
   pop      %rbx
.2983:
   add      48(%r13), %rbx
   and      $7, %rdx
   mov      $1, %al
   mov      %dl, %cl
   shl      %cl, %al
   test     %al, (%rbx)
   jnz      .2984
   cmpq     $TSym, (%rsp)
   jnz      .2985
   or       %al, (%rbx)
.2985:
   mov      $Nil, %rbx
   jmp      .2986
.2984:
   cmpq     $2, (%rsp)
   jnz      .2987
   not      %al
   and      %al, (%rbx)
.2987:
   mov      $TSym, %rbx
.2986:
   pop      %rax
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doFree
doFree:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evCntEX_FE
   sub      $1, %rbx
   shl      $6, %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   call     rdLockDb
   mov      $12, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   mov      %rax, BlkLink
   add      $6, %r15
   call     getAdrZ_A
   mov      %rax, %rdx
   shr      $6, %rdx
   mov      DbFile, %r10
   mov      8(%r10), %rbx
   call     extNmCE_X
   call     externX_E
   call     cons_Y
   mov      %rbx, (%r14)
   movq     $Nil, 8(%r14)
   push     %rbp
   mov      %rsp, %rbp
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
.2988:
   mov      BlkLink, %rdx
   cmp      %r12, %rdx
   jz       .2989
   shr      $6, %rdx
   mov      DbFile, %r10
   mov      8(%r10), %rbx
   call     extNmCE_X
   call     externX_E
   call     cons_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   call     rdBlockLinkZ_Z
   jmp      .2988
.2989:
   mov      $65536, %rax
   call     rwUnlockDbA
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doDbck
doDbck:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      DbFiles, %r10
   mov      %r10, DbFile
   testb    $0x02, %bl
   jz       .2990
   andb     $~15, %bl
   sub      $16, %rbx
   shl      $2, %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.2990:
   push     %rbx
   pushq    $2
   pushq    $2
   addq     $1, EnvProtect
   call     wrLockDb
   cmp      %r12, DbJnl
   jz       .2991
   call     lockJnl
.2991:
   mov      $12, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   mov      %rax, BlkLink
   add      $6, %r15
   call     getAdrZ_A
   push     %rax
   mov      $64, %r14
.2992:
   mov      BlkLink, %rax
   cmp      %r12, %rax
   jz       .2993
   call     rdBlockIndexAZ_Z
   add      $64, %r14
   cmp      (%rsp), %r14
   jbe      .2994
   mov      $CircFree, %rbx
   call     mkStrE_E
   jmp      doDbck_90
.2994:
   mov      DbBlock, %r15
   orb      $63, (%r15)
   call     wrBlockZ
   jmp      .2992
.2993:
   mov      $64, %r13
.2995:
   cmp      (%rsp), %r13
   jz       .2996
   mov      %r13, %rax
   call     rdBlockIndexAZ_Z
   sub      $6, %r15
   mov      (%r15), %al
   and      $63, %al
   jnz      .2997
   add      $64, %r14
   lea      (%r15), %rdi
   lea      Buf, %rsi
   mov      $6, %rcx
   cld
   rep movsb
   call     wrBlockZ
   mov      %r13, %rax
   mov      $Buf, %r15
   call     setAdrAZ
   mov      $6, %rdx
   mov      %r12, %rbx
   call     blkPokeCEZ
   jmp      .2998
.2997:
   cmp      $1, %al
   jnz      .2998
   push     %r13
   addq     $16, 16(%rsp)
   addq     $16, 24(%rsp)
   add      $64, %r14
   mov      $2, %r13
.3000:
   mov      BlkLink, %rax
   cmp      %r12, %rax
   jz       .3001
   add      $64, %r14
   addq     $16, 16(%rsp)
   call     rdBlockIndexAZ_Z
   mov      -6(%r15), %al
   and      $63, %al
   cmp      %r13b, %al
   jz       .3002
   mov      $BadChain, %rbx
   call     mkStrE_E
   jmp      doDbck_90
.3002:
   cmp      $63, %r13
   jnc      .3000
   add      $1, %r13
   jmp      .3000
.3001:
   pop      %r13
.2998:
   add      $64, %r13
   jmp      .2995
.2996:
   mov      $Buf, %r15
   call     getAdrZ_A
   mov      %rax, BlkLink
.3004:
   cmp      %r12, %rax
   jz       .3005
   call     rdBlockIndexAZ_Z
   sub      $6, %r15
   mov      (%r15), %al
   and      $63, %al
   jz       .3006
   andb     $~63, (%r15)
   call     wrBlockZ
.3006:
   mov      BlkLink, %rax
   jmp      .3004
.3005:
   cmp      (%rsp), %r14
   jz       .3007
   mov      $BadCount, %rbx
   call     mkStrE_E
   jmp      doDbck_90
.3007:
   cmpq     $Nil, 24(%rsp)
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       doDbck_90
   call     cons_E
   mov      8(%rsp), %r10
   mov      %r10, (%rbx)
   mov      16(%rsp), %r10
   mov      %r10, 8(%rbx)
doDbck_90:
   pop      %rax
   pop      %rax
   pop      %rax
   pop      %rax
   cmp      %r12, DbJnl
   jz       .3010
   call     unLockJnl
.3010:
   mov      $65536, %rax
   call     rwUnlockDbA
   subq     $1, EnvProtect
   pop      %r15
   pop      %r14
   pop      %r13
   ret
CircFree:
   .string  "Circular free list"
BadChain:
   .string  "Bad chain"
BadCount:
   .string  "Bad count"

   .balign  16
   nop
   nop
   .global  doPort
doPort:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      $1, %r15
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      .3011
   mov      $2, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.3011:
   mov      %rdx, %r12
   mov      $2, %rdi
   mov      %r15, %rsi
   xor      %rdx, %rdx
   call     socket
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSocketErrX
   mov      %rax, %rdx
   call     closeOnExecAX
   mov      $0, %al
   lea      Addr, %rdi
   mov      $16, %rcx
   cld
   rep stosb
   mov      $2, %rax
   movw     %ax, Addr+0
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     htonl
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     %eax, Addr+4
   testb    $0x02, %bl
   jz       .3012
   shr      $4, %rbx
   jz       .3013
   mov      $1, %rax
   movl     %eax, Buf
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $1, %rsi
   mov      $2, %rdx
   mov      $Buf, %rcx
   mov      $4, %r8
   call     setsockopt
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSetsockoptErrX
.3013:
   push     %r12
   jmp      .3015
.3012:
   testb    $0x0E, %bl
   jnz      argErrEX
   mov      8(%rbx), %rax
   mov      (%rbx), %rbx
   shr      $4, %rbx
   shr      $4, %rax
   push     %rax
.3015:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     htons
   mov      %r12, %rdx
   xor      %r12, %r12
   movw     %ax, Addr+2
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $Addr, %rsi
   mov      $16, %rdx
   call     bind
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .3016
   add      $1, %rbx
   cmp      (%rsp), %rbx
   jbe      .3015
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      ipBindErrX
.3016:
   pop      %rax
   cmp      $1, %r15
   jnz      .3018
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $5, %rsi
   call     listen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .3018
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      ipListenErrX
.3018:
   mov      %rdx, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .3020
   mov      $16, %rax
   movl     %eax, Buf
   mov      %rdx, %r12
   mov      %r15, %rdi
   mov      $Addr, %rsi
   mov      $Buf, %rdx
   call     getsockname
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .3021
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      ipGetsocknameErrX
.3021:
   call     needVarEX
   movswq   Addr+2, %rax
   and      $65535, %rax
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     ntohs
   mov      %r12, %rdx
   xor      %r12, %r12
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rbx)
.3020:
   mov      %r15, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .global  tcpAcceptA_FE
tcpAcceptA_FE:
   mov      %rax, %rbx
   call     nonblockingA_A
   push     %rax
   mov      $16, %rax
   movl     %eax, Buf
   mov      $200, %rdx
.3022:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $Addr, %rsi
   mov      $Buf, %rdx
   call     accept
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .3023
   xchg     (%rsp), %rax
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   movslq   Addr+4, %rax
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     inet_ntoa
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %rbx
   call     mkStrE_E
   mov      %rbx, Adr
   mov      (%rsp), %rax
   call     initInFileA_A
   mov      (%rsp), %rax
   call     initOutFileA_A
   pop      %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret
.3023:
   mov      %rdx, %r12
   mov      $100000, %rdi
   call     usleep
   mov      %r12, %rdx
   xor      %r12, %r12
   sub      $1, %rdx
   jnz      .3022
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $4, %rsi
   pop      %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   or       %r12, %r12
   ret

   .balign  16
   nop
   nop
   .global  doAccept
doAccept:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evCntEX_FE
   mov      %rbx, %rax
   call     tcpAcceptA_FE
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doListen
doListen:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      %rbx, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $-1, %r10
   cmovzq   %r10, %r14
   jz       .3025
   call     xCntEX_FE
   mov      %rbx, %r14
.3025:
   mov      %r15, %rdx
   mov      %r14, %rbx
   call     waitFdCEX_A
   mov      $Nil, %rbx
   cmp      %r12, %rax
   jz       .3026
   mov      %r15, %rax
   call     tcpAcceptA_FE
   jz       .3025
.3026:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .global  doHost
doHost:
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $Buf, %rsi
   call     inet_aton
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12d, %eax
   jz       retNil
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $4, %rsi
   mov      $2, %rdx
   call     gethostbyaddr
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       retNil
   mov      0(%rax), %rbx
   jmp      mkStrE_E

   .balign  16
   nop
   nop
   .global  doConnect
doConnect:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evSymY_E
   mov      8(%r14), %r14
   call     serverEY_F
   jz       doConnect_80
   mov      %rdx, %r12
   mov      $2, %rdi
   mov      $1, %rsi
   xor      %rdx, %rdx
   call     socket
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSocketErrX
   mov      %rax, %r14
   call     closeOnExecAX
   mov      %rdx, %r12
   mov      %r14, %rdi
   mov      $Addr, %rsi
   mov      $16, %rdx
   call     connect
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .3027
   mov      %r14, %rax
   call     initInFileA_A
   mov      %r14, %rax
   call     initOutFileA_A
   mov      %r14, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .3028
.3027:
   mov      %rdx, %r12
   mov      %r14, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
doConnect_80:
   mov      $Nil, %rbx
.3028:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .global  serverEY_F
serverEY_F:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      $0, %al
   lea      Addr, %rdi
   mov      $16, %rcx
   cld
   rep stosb
   call     evCntXY_FE
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     htons
   mov      %r12, %rdx
   xor      %r12, %r12
   movw     %ax, Addr+2
   mov      $2, %rax
   movw     %ax, Addr+0
   mov      8(%rbp), %rbx
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   lea      Addr+4, %rsi
   call     inet_aton
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .3029
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     gethostbyname
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       serverEY_F_90
   mov      %rax, %rbx
   movslq   20(%rbx), %rax
   cmp      %r12d, %eax
   jz       serverEY_F_90
   mov      24(%rbx), %r10
   mov      (%r10), %r10
   movslq   (%r10), %rax
   movl     %eax, Addr+4
.3029:
   cmp      %rsp, %r12
serverEY_F_90:
   mov      %r15, %rsp
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .global  doUdp
doUdp:
   push     %r13
   push     %r14
   push     %r15
   sub      $4096, %rsp
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .3030
   call     xCntEX_FE
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      %rsp, %rsi
   mov      $4096, %rdx
   xor      %rcx, %rcx
   call     recv
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       doUdp_10
   mov      %rsp, %r15
   lea      4096(%r15), %r11
   mov      %r11, BufEnd
   movq     $getUdpZ_FB, GetBinZ_FB
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binReadZ_FE
   jnc      .3032
doUdp_10:
   mov      $Nil, %rbx
   jmp      .3032
.3030:
   call     serverEY_F
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .3032
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r14
   mov      %rsp, %r15
   lea      4096(%r15), %r11
   mov      %r11, BufEnd
   movq     $putUdpBZ, PutBinBZ
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binPrintEZ
   mov      %rdx, %r12
   mov      $2, %rdi
   mov      $2, %rsi
   xor      %rdx, %rdx
   call     socket
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSocketErrX
   mov      %rax, %rdx
   sub      %rsp, %r15
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %rsp, %rsi
   mov      %r15, %rdx
   xor      %rcx, %rcx
   mov      $Addr, %r8
   mov      $16, %r9
   call     sendto
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r14, %rbx
.3032:
   add      $4096, %rsp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .global  getUdpZ_FB
getUdpZ_FB:
   cmp      BufEnd, %r15
   jz       retc
   mov      (%r15), %al
   add      $1, %r15
   ret

   .balign  16
   .global  putUdpBZ
putUdpBZ:
   cmp      BufEnd, %r15
   jz       udpOvflErr
   mov      %al, (%r15)
   add      $1, %r15
   ret

   .global  dbgS
dbgS:
   xchg     (%rsp), %rbx
   xchg     8(%rsp), %rbx
   push     %rdx
   push     %rax
   pushf
   pushq    OutFile
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   pushq    EnvPutB
   movq     $putStdoutB, EnvPutB
   call     printE
   call     newline
   popq     EnvPutB
   popq     OutFile
   popf
   pop      %rax
   pop      %rdx
   pop      %rbx
   ret

   .global  errnoEXY
errnoEXY:
   call     errno_A
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     strerror
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %r15

   .global  errEXYZ
errEXYZ:
   sub      $272, %rsp
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      %r14, %rsi
   mov      %r15, %rdx
   xor      %rax, %rax
   call     sprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %r13
   mov      $Nil, %rax
   cmovnzq  %r13, %rax
   mov      %rax, Up
   cmp      %r12b, (%rsp)
   jz       .3034
   push     %rbx
   lea      8(%rsp), %rbx
   call     mkStrE_E
   mov      %rbx, Msg
   mov      Catch, %rdx
.3035:
   cmp      %r12, %rdx
   jz       .3036
   mov      8(%rdx), %r14
   cmp      %r12, %r14
   jz       .3037
.3038:
   testb    $0x0E, %r14b
   jnz      .3037
   mov      (%r14), %rax
   mov      Msg, %rbx
   push     %rdx
   call     subStrAE_F
   pop      %rdx
   jnz      .3040
   pushq    (%r14)
   call     unwindC_Z
   pop      %rbx
   mov      %r15, %rsp
   jmp      caught
.3040:
   mov      8(%r14), %r14
   jmp      .3038
.3037:
   mov      (%rdx), %rdx
   jmp      .3035
.3036:
   pop      %rbx
.3034:
   mov      %r12, Chr
   mov      %r12, ExtN
   mov      %r12, EnvBrk
   movq     $Nil, Alarm
   movq     $2, LineX
   movq     $-1, LineC
   lea      240(%rsp), %r14
   movq     $2, 8(%r14)
   mov      %r12, 16(%r14)
   call     pushOutFilesY
   mov      InFile, %r14
   cmp      %r12, %r14
   jz       .3041
   mov      48(%r14), %rdx
   cmp      %r12, %rdx
   jz       .3041
   mov      $91, %al
   mov      EnvPutB, %r10
   call     *%r10
   call     outStringC
   mov      $58, %al
   mov      EnvPutB, %r10
   call     *%r10
   mov      40(%r14), %rax
   call     outWordA
   mov      $93, %al
   mov      EnvPutB, %r10
   call     *%r10
   call     space
.3041:
   cmp      %r12, %r13
   jz       .3043
   mov      $ErrTok, %rdx
   call     outStringC
   push     %rbx
   mov      %r13, %rbx
   call     printE
   call     newline
   pop      %rbx
.3043:
   cmp      %r12, %rbx
   jz       .3044
   call     printE
   mov      $Dashes, %rdx
   call     outStringC
.3044:
   cmp      %r12b, (%rsp)
   jz       .3045
   call     outStringS
   call     newline
   cmpq     $Nil, Err
   jz       .3046
   cmp      %r12b, Jam
   jnz      .3046
   movb     $1, Jam
   mov      Err, %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      %r12b, Jam
.3046:
   mov      $1, %rbx
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       byeE
   mov      %rdx, %r12
   mov      $1, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       byeE
   mov      $63, %al
   mov      $Nil, %rbx
   mov      %r12, %r13
   call     loadBEX_E
.3045:
   mov      %r12, %rdx
   call     unwindC_Z
   mov      %r12, EnvProtect
   movq     $Nil, EnvTask
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   mov      %r12, EnvMeth
   mov      %r12, EnvMake
   mov      %r12, EnvYoke
   mov      %r12, EnvTrace
   mov      %r12, %rbp
   mov      Stack0, %rsp
   jmp      restart
ErrTok:
   .string  "!? "
Dashes:
   .string  " -- "

   .balign  16
   .global  unwindC_Z
unwindC_Z:
   push     %rdx
   mov      Catch, %r13
   mov      EnvBind, %r14
.3048:
   cmp      %r12, %r13
   jz       .3049
.3050:
   cmp      %r12, %r14
   jz       .3064
   mov      -8(%r14), %rdx
   cmp      %r12, %rdx
   jz       .3052
   mov      %rdx, %rax
   mov      %r12, %rbx
   mov      %r14, %r15
.3053:
   add      $1, %rbx
   add      $1, %rax
   jz       .3056
   mov      (%r15), %r10
   mov      8(%r10), %r15
   cmp      %r12, %r15
   jz       .3056
   cmp      %rax, -8(%r15)
   jnc      .3053
   sub      $1, %rax
   jmp      .3053
.3056:
   mov      %rbx, %rax
   mov      %r14, %r15
.3057:
   sub      $1, %rax
   jz       .3058
   mov      (%r15), %r10
   mov      8(%r10), %r15
   jmp      .3057
.3058:
   mov      (%r15), %rax
   sub      %rdx, -8(%r15)
   jbe      .3059
   mov      %r12, -8(%r15)
.3059:
   jc       .3060
   sub      $16, %rax
.3061:
   mov      (%rax), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%rax)
   mov      %r10, (%r11)
   sub      $16, %rax
   cmp      %r15, %rax
   jnc      .3061
.3060:
   sub      $1, %rbx
   jnz      .3056
.3052:
   cmp      24(%r13), %r14
   jz       .3064
   mov      (%r14), %rdx
   cmp      %r12, -8(%r14)
   jnz      .3062
   add      $8, %r14
.3063:
   mov      (%r14), %r15
   add      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%r15)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .3063
.3062:
   mov      8(%rdx), %r14
   jmp      .3050
.3064:
   mov      32(%r13), %r10
   cmp      %r10, EnvInFrames
   jz       .3066
   call     popInFiles
   jmp      .3064
.3066:
   mov      40(%r13), %r10
   cmp      %r10, EnvOutFrames
   jz       .3068
   call     popOutFiles
   jmp      .3066
.3068:
   mov      48(%r13), %r10
   cmp      %r10, EnvCtlFrames
   jz       .3069
   call     popCtlFiles
   jmp      .3068
.3069:
   lea      Env, %rdi
   lea      24(%r13), %rsi
   mov      $(EnvEnd-Env), %rcx
   cld
   rep movsb
   mov      16(%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      (%rsp), %r13
   mov      (%r13), %r13
   mov      %r13, Catch
   jnz      .3048
   pop      %r15
   ret
.3049:
   pop      %rax
.3071:
   cmp      %r12, %r14
   jz       .3072
   mov      (%r14), %rdx
   cmp      %r12, -8(%r14)
   jnz      .3073
   add      $8, %r14
.3074:
   mov      (%r14), %r15
   add      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%r15)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .3074
.3073:
   mov      8(%rdx), %r14
   jmp      .3071
.3072:
   mov      %r12, EnvBind
.3075:
   cmp      %r12, EnvInFrames
   jz       .3077
   call     popInFiles
   jmp      .3075
.3077:
   cmp      %r12, EnvOutFrames
   jz       .3079
   call     popOutFiles
   jmp      .3077
.3079:
   cmp      %r12, EnvCtlFrames
   jz       .3080
   call     popCtlFiles
   jmp      .3079
.3080:
   rep
   ret

   .balign  16
   .global  needSymAX
needSymAX:
   testb    $0x06, %al
   jnz      symErrAX
   testb    $0x08, %al
   jz       symErrAX
   cmp      $Nil, %rax
   jc       ret
   cmp      $TSym, %rax
   ja       Ret
   mov      %rax, %rbx
   jmp      protErrEX

   .balign  16
   .global  needSymEX
needSymEX:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jc       ret
   cmp      $TSym, %rbx
   ja       Ret
   jmp      protErrEX

   .balign  16
   .global  needVarAX
needVarAX:
   testb    $0x06, %al
   jnz      varErrAX
   cmp      $Nil, %rax
   jc       ret
   cmp      $TSym, %rax
   ja       Ret
   mov      %rax, %rbx
   jmp      protErrEX

   .balign  16
   .global  needVarEX
needVarEX:
   testb    $0x06, %bl
   jnz      varErrEX
   cmp      $Nil, %rbx
   jc       ret
   cmp      $TSym, %rbx
   ja       Ret
   jmp      protErrEX

   .balign  16
   .global  checkVarAX
checkVarAX:
   cmp      $Nil, %rax
   jc       ret
   cmp      $TSym, %rax
   ja       Ret
   mov      %rax, %rbx
   jmp      protErrEX

   .balign  16
   .global  checkVarYX
checkVarYX:
   cmp      $Nil, %r14
   jc       ret
   cmp      $TSym, %r14
   ja       Ret
   mov      %r14, %rbx
   jmp      protErrEX

   .balign  16
   .global  checkVarEX
checkVarEX:
   cmp      $Nil, %rbx
   jc       ret
   cmp      $TSym, %rbx
   ja       Ret

   .global  protErrEX
protErrEX:
   mov      $ProtErr, %r14
   jmp      errEXYZ
ProtErr:
   .string  "Protected symbol"

   .global  argErrAX
argErrAX:
   mov      %rax, %rbx

   .global  argErrEX
argErrEX:
   mov      $ArgErr, %r14
   jmp      errEXYZ
ArgErr:
   .string  "Bad argument"

   .global  numErrAX
numErrAX:
   mov      %rax, %rbx

   .global  numErrEX
numErrEX:
   mov      $NumErr, %r14
   jmp      errEXYZ
NumErr:
   .string  "Number expected"

   .global  cntErrAX
cntErrAX:
   mov      %rax, %rdx

   .global  cntErrCX
cntErrCX:
   mov      %rdx, %rbx

   .global  cntErrEX
cntErrEX:
   mov      $CntErr, %r14
   jmp      errEXYZ
CntErr:
   .string  "Small number expected"

   .global  symErrAX
symErrAX:
   mov      %rax, %r14

   .global  symErrYX
symErrYX:
   mov      %r14, %rbx

   .global  symErrEX
symErrEX:
   mov      $SymErr, %r14
   jmp      errEXYZ
SymErr:
   .string  "Symbol expected"

   .global  extErrEX
extErrEX:
   mov      $ExtErr, %r14
   jmp      errEXYZ
ExtErr:
   .string  "External symbol expected"

   .global  cellErrAX
cellErrAX:
   mov      %rax, %rbx

   .global  cellErrEX
cellErrEX:
   mov      $CellErr, %r14
   jmp      errEXYZ
CellErr:
   .string  "Cell expected"

   .global  atomErrAX
atomErrAX:
   mov      %rax, %rbx

   .global  atomErrEX
atomErrEX:
   mov      $AtomErr, %r14
   jmp      errEXYZ
AtomErr:
   .string  "Atom expected"

   .global  lstErrAX
lstErrAX:
   mov      %rax, %rbx

   .global  lstErrEX
lstErrEX:
   mov      $LstErr, %r14
   jmp      errEXYZ
LstErr:
   .string  "List expected"

   .global  varErrAX
varErrAX:
   mov      %rax, %rbx

   .global  varErrEX
varErrEX:
   mov      $VarErr, %r14
   jmp      errEXYZ
VarErr:
   .string  "Variable expected"

   .global  divErrX
divErrX:
   mov      %r12, %rbx
   mov      $DivErr, %r14
   jmp      errEXYZ
DivErr:
   .string  "Div/0"

   .global  renErrEX
renErrEX:
   mov      $RenErr, %r14
   jmp      errEXYZ
RenErr:
   .string  "Can't rename"

   .global  makeErrEX
makeErrEX:
   mov      $MakeErr, %r14
   jmp      errEXYZ
MakeErr:
   .string  "Not making"

   .global  msgErrYX
msgErrYX:
   mov      %r14, %rax

   .global  msgErrAX
msgErrAX:
   mov      %rax, %rbx

   .global  msgErrEX
msgErrEX:
   mov      $MsgErr, %r14
   jmp      errEXYZ
MsgErr:
   .string  "Bad message"

   .global  brkErrX
brkErrX:
   mov      %r12, %rbx
   mov      $BrkErr, %r14
   jmp      errEXYZ
BrkErr:
   .string  "No Break"

   .global  openErrEX
openErrEX:
   mov      $OpenErr, %r14
   jmp      errnoEXY
OpenErr:
   .string  "Open error: %s"

   .global  closeErrX
closeErrX:
   mov      %r12, %rbx

   .global  closeErrEX
closeErrEX:
   mov      $CloseErr, %r14
   jmp      errnoEXY
CloseErr:
   .string  "Close error: %s"

   .global  pipeErrX
pipeErrX:
   mov      %r12, %rbx
   mov      $PipeErr, %r14
   jmp      errnoEXY
PipeErr:
   .string  "Pipe error: %s"

   .global  forkErrX
forkErrX:
   mov      %r12, %rbx
   mov      $ForkErr, %r14
   jmp      errEXYZ
ForkErr:
   .string  "Can't fork"

   .global  waitPidErrX
waitPidErrX:
   mov      %r12, %rbx
   mov      $WaitPidErr, %r14
   jmp      errnoEXY
WaitPidErr:
   .string  "wait pid"

   .global  badFdErrEX
badFdErrEX:
   mov      $BadFdErr, %r14
   jmp      errEXYZ
BadFdErr:
   .string  "Bad FD"

   .global  noFdErrX
noFdErrX:
   mov      %r12, %rbx
   mov      $NoFdErr, %r14
   jmp      errEXYZ
NoFdErr:
   .string  "No current fd"

   .global  eofErr
eofErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $EofErr, %r14
   jmp      errEXYZ
EofErr:
   .string  "EOF Overrun"

   .global  suparErrE
suparErrE:
   mov      %r12, %r13
   mov      $SuparErr, %r14
   jmp      errEXYZ
SuparErr:
   .string  "Super parentheses mismatch"

   .global  badInputErrB
badInputErrB:
   movzx    %al, %rax
   mov      %rax, %r15
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $BadInput, %r14
   jmp      errEXYZ
BadInput:
   .string  "Bad input '%c'"

   .global  badDotErrE
badDotErrE:
   mov      %r12, %r13
   mov      $BadDot, %r14
   jmp      errEXYZ
BadDot:
   .string  "Bad dotted pair"

   .global  selectErrX
selectErrX:
   mov      %r12, %rbx
   mov      $SelectErr, %r14
   jmp      errnoEXY
SelectErr:
   .string  "Select error: %s"

   .global  wrBytesErr
wrBytesErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrBytesErr, %r14
   jmp      errnoEXY
WrBytesErr:
   .string  "bytes write: %s"

   .global  wrChildErr
wrChildErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrChildErr, %r14
   jmp      errnoEXY
WrChildErr:
   .string  "child write: %s"

   .global  wrSyncErrX
wrSyncErrX:
   mov      %r12, %rbx
   mov      $WrSyncErr, %r14
   jmp      errnoEXY
WrSyncErr:
   .string  "sync write: %s"

   .global  wrJnlErr
wrJnlErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrJnlErr, %r14
   jmp      errnoEXY
WrJnlErr:
   .string  "Journal write: %s"

   .global  wrLogErr
wrLogErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrLogErr, %r14
   jmp      errnoEXY
WrLogErr:
   .string  "Log write: %s"

   .global  truncErrX
truncErrX:
   mov      %r12, %rbx
   mov      $TruncErr, %r14
   jmp      errnoEXY
TruncErr:
   .string  "Log truncate error: %s"

   .global  dbSyncErrX
dbSyncErrX:
   mov      %r12, %rbx
   mov      $DbSyncErr, %r14
   jmp      errnoEXY
DbSyncErr:
   .string  "DB fsync error: %s"

   .global  trSyncErrX
trSyncErrX:
   mov      %r12, %rbx
   mov      $TrSyncErr, %r14
   jmp      errnoEXY
TrSyncErr:
   .string  "Transaction fsync error: %s"

   .global  lockErr
lockErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $LockErr, %r14
   jmp      errnoEXY
LockErr:
   .string  "File lock: %s"

   .global  dbfErrX
dbfErrX:
   mov      %r12, %rbx
   mov      $DbfErr, %r14
   jmp      errEXYZ
DbfErr:
   .string  "Bad DB file"

   .global  jnlErrX
jnlErrX:
   mov      %r12, %rbx
   mov      $JnlErr, %r14
   jmp      errEXYZ
JnlErr:
   .string  "Bad Journal"

   .global  idErrXL
idErrXL:
   mov      8(%rbp), %rbx
   mov      $IdErr, %r14
   jmp      errEXYZ
IdErr:
   .string  "Bad ID"

   .global  dbRdErr
dbRdErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $DbRdErr, %r14
   jmp      errnoEXY
DbRdErr:
   .string  "DB read: %s"

   .global  dbWrErr
dbWrErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $DbWrErr, %r14
   jmp      errnoEXY
DbWrErr:
   .string  "DB write: %s"

   .global  dbSizErr
dbSizErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $DbSizErr, %r14
   jmp      errEXYZ
DbSizErr:
   .string  "DB Oversize"

   .global  tellErr
tellErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $TellErr, %r14
   jmp      errEXYZ
TellErr:
   .string  "Tell PIPE_BUF"

   .global  ipSocketErrX
ipSocketErrX:
   mov      %r12, %rbx
   mov      $IpSocketErr, %r14
   jmp      errnoEXY
IpSocketErr:
   .string  "IP socket error: %s"

   .global  ipGetsocknameErrX
ipGetsocknameErrX:
   mov      %r12, %rbx
   mov      $IpGetsocknameErr, %r14
   jmp      errnoEXY
IpGetsocknameErr:
   .string  "IP getsockname error: %s"

   .global  ipSetsockoptErrX
ipSetsockoptErrX:
   mov      %r12, %rbx
   mov      $IpSetsockoptErr, %r14
   jmp      errnoEXY
IpSetsockoptErr:
   .string  "IP setsockopt error: %s"

   .global  ipBindErrX
ipBindErrX:
   mov      %r12, %rbx
   mov      $IpBindErr, %r14
   jmp      errnoEXY
IpBindErr:
   .string  "IP bind error: %s"

   .global  ipListenErrX
ipListenErrX:
   mov      %r12, %rbx
   mov      $IpListenErr, %r14
   jmp      errnoEXY
IpListenErr:
   .string  "IP listen error: %s"

   .global  udpOvflErr
udpOvflErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $UdpOvflErr, %r14
   jmp      errEXYZ
UdpOvflErr:
   .string  "UDP overflow"

   .global  undefinedCE
undefinedCE:
   mov      %rbx, %r13

   .global  undefinedCX
undefinedCX:
   mov      %rdx, %rbx

   .global  undefinedEX
undefinedEX:
   mov      $UndefErr, %r14
   jmp      errEXYZ
UndefErr:
   .string  "Undefined"

   .global  dlErrX
dlErrX:
   mov      %r12, %rbx
   mov      %rdx, %r12
   call     dlerror
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $DlErr, %r14
   mov      %rax, %r15
   jmp      errEXYZ
DlErr:
   .string  "[DLL] %s"

   .balign  16
   .global  ret
ret:
   rep
   ret

   .balign  16
   .global  retc
retc:
   stc
   ret

   .balign  16
   .global  retnc
retnc:
   clc
   ret

   .balign  16
   .global  retz
retz:
   or       %r12, %r12
   ret

   .balign  16
   .global  retnz
retnz:
   cmp      %rsp, %r12
   ret

   .balign  16
   .global  retNull
retNull:
   mov      %r12, %rbx
   ret

   .balign  16
   .global  retNil
retNil:
   mov      $Nil, %rbx
   ret

   .balign  16
   .global  retT
retT:
   mov      $TSym, %rbx
   ret

   .balign  16
   .global  retE_E
retE_E:
   mov      (%rbx), %rbx
   ret
