/* 29jun10 */

   .data

   .balign  16
   .globl  Globals
Globals:
   .globl  AV
AV:
   .quad    0
   .globl  AV0
AV0:
   .quad    0
   .globl  Home
Home:
   .quad    0
   .globl  Heaps
Heaps:
   .quad    0
   .globl  Avail
Avail:
   .quad    0
   .globl  Buf
Buf:
   .quad    0
   .quad    0
Stack0:
   .quad    0
Stacks:
   .quad    0
StkSize:
   .quad    4194304
StkLimit:
   .quad    0
Link:
   .quad    0
Catch:
   .quad    0
Termio:
   .quad    0
Time:
   .quad    0
USec:
   .quad    0
TtyPid:
   .quad    0
InFDs:
   .quad    0
InFiles:
   .quad    0
OutFDs:
   .quad    0
OutFiles:
   .quad    0
PutBinBZ:
   .quad    0
GetBinZ_FB:
   .quad    0
Seed:
   .quad    0
   .quad    0
TickU:
   .quad    0
TickS:
   .quad    0
Slot:
   .quad    0
Spkr:
   .quad    0
Mic:
   .quad    0
SpMiPipe:
   .quad    0
Hear:
   .quad    0
Tell:
   .quad    0
TellBuf:
   .quad    0
Children:
   .quad    0
Child:
   .quad    0
ExtN:
   .quad    0
Extn:
   .quad    0
StrX:
   .quad    0
StrC:
   .quad    0
Alarm:
   .quad    Nil
Sigio:
   .quad    Nil
LineX:
   .quad    2
LineC:
   .quad    -1
Break:
   .quad    0
GcCount:
   .quad    65536
Sep0:
   .quad    46
Sep3:
   .quad    44
BufEnd:
   .quad    0
Penv:
   .quad    Nil
Pnl:
   .quad    Nil
Signal:
   .space   240
DBs:
   .quad    0
DbFile:
   .quad    0
DbFiles:
   .quad    0
DbBlock:
   .quad    0
MaxBlkSize:
   .quad    0
BlkIndex:
   .quad    0
BlkLink:
   .quad    0
DbJnl:
   .quad    0
DbLog:
   .quad    0
   .globl  Intern
Intern:
   .quad    Nil
   .quad    Nil
   .globl  Transient
Transient:
   .quad    Nil
   .quad    Nil

   .balign  16
   .globl  SymTab
SymTab:
   .byte    226, 148, 196, 4, 0, 0, 0, 0
   .globl  Nil
Nil:
   .quad    Nil
   .quad    Nil
   .quad    0
   .byte    162, 242, 52, 5, 0, 0, 0, 0
   .globl  OS
OS:
   .quad    TgOS
   .byte    162, 66, 36, 4, 0, 0, 0, 0
   .globl  DB
DB:
   .quad    Db1
   .byte    210, 86, 70, 135, 6, 0, 0, 0
   .globl  Meth
Meth:
   .quad    doMeth
   .byte    18, 87, 247, 70, 87, 6, 0, 0
   .globl  Quote
Quote:
   .quad    doQuote
   .byte    66, 5, 0, 0, 0, 0, 0, 0
   .globl  TSym
TSym:
   .quad    TSym
   .byte    146, 4, 0, 0, 0, 0, 0, 0
   .globl  ISym
ISym:
   .quad    Nil
   .byte    226, 4, 0, 0, 0, 0, 0, 0
   .globl  NSym
NSym:
   .quad    Nil
   .byte    50, 5, 0, 0, 0, 0, 0, 0
   .globl  SSym
SSym:
   .quad    Nil
   .byte    50, 4, 0, 0, 0, 0, 0, 0
   .globl  CSym
CSym:
   .quad    Nil
   .byte    34, 4, 0, 0, 0, 0, 0, 0
   .globl  BSym
BSym:
   .quad    Nil
   .byte    162, 50, 245, 198, 246, 6, 0, 0
   .globl  Solo
Solo:
   .quad    2
   .byte    162, 2, 5, 149, 70, 6, 0, 0
   .globl  PPid
PPid:
   .quad    Nil
   .byte    162, 2, 149, 70, 6, 0, 0, 0
   .globl  Pid
Pid:
   .quad    0
   .byte    2, 4, 0, 0, 0, 0, 0, 0
   .globl  At
At:
   .quad    Nil
   .byte    2, 4, 4, 0, 0, 0, 0, 0
   .globl  At2
At2:
   .quad    Nil
   .byte    2, 4, 4, 4, 0, 0, 0, 0
   .globl  At3
At3:
   .quad    Nil
   .byte    66, 133, 150, 54, 7, 0, 0, 0
   .globl  This
This:
   .quad    Nil
   .byte    162, 66, 36, 118, 6, 0, 0, 0
   .globl  Dbg
Dbg:
   .quad    Nil
   .byte    162, 162, 21, 6, 7, 0, 0, 0
   .globl  Zap
Zap:
   .quad    Nil
   .byte    162, 82, 132, 71, 7, 0, 0, 0
   .globl  Ext
Ext:
   .quad    Nil
   .byte    162, 50, 53, 198, 6, 0, 0, 0
   .globl  Scl
Scl:
   .quad    2
   .byte    162, 50, 196, 22, 54, 55, 7, 0
   .globl  Class
Class:
   .quad    Nil
   .byte    162, 34, 85, 231, 6, 0, 0, 0
   .globl  Run
Run:
   .quad    Nil
   .byte    162, 130, 84, 7, 7, 0, 0, 0
   .globl  Hup
Hup:
   .quad    Nil
   .byte    162, 50, 149, 118, 22, 3, 0, 0
   .globl  Sig1
Sig1:
   .quad    Nil
   .byte    162, 50, 149, 118, 38, 3, 0, 0
   .globl  Sig2
Sig2:
   .quad    Nil
   .byte    226, 5, 0, 0, 0, 0, 0, 0
   .globl  Up
Up:
   .quad    Nil
   .byte    162, 82, 36, 39, 7, 0, 0, 0
   .globl  Err
Err:
   .quad    Nil
   .byte    162, 210, 52, 119, 6, 0, 0, 0
   .globl  Msg
Msg:
   .quad    Nil
   .byte    162, 82, 229, 150, 6, 0, 0, 0
   .globl  Uni
Uni:
   .quad    Nil
   .byte    162, 194, 84, 70, 6, 0, 0, 0
   .globl  Led
Led:
   .quad    Nil
   .byte    162, 66, 53, 215, 6, 0, 0, 0
   .globl  Tsm
Tsm:
   .quad    Nil
   .byte    162, 18, 68, 38, 7, 0, 0, 0
   .globl  Adr
Adr:
   .quad    Nil
   .byte    162, 98, 244, 38, 183, 6, 0, 0
   .globl  Fork
Fork:
   .quad    Nil
   .byte    162, 34, 148, 87, 6, 0, 0, 0
   .globl  Bye
Bye:
   .quad    Nil
   .byte    34, 23, 118, 7, 0, 0, 0, 0
   .quad    doRaw
   .byte    18, 198, 22, 38, 215, 6, 0, 0
   .quad    doAlarm
   .byte    50, 151, 118, 150, 246, 6, 0, 0
   .quad    doSigio
   .byte    2, 39, 247, 70, 87, 54, 70, 7
   .quad    doProtect
   .byte    130, 86, 22, 6, 7, 0, 0, 0
   .quad    doHeap
   .byte    50, 71, 23, 54, 182, 6, 0, 0
   .quad    doStack
   .byte    18, 70, 38, 7, 0, 0, 0, 0
   .quad    doAdr
   .byte    82, 230, 102, 7, 0, 0, 0, 0
   .quad    doEnv
   .byte    82, 7, 7, 0, 0, 0, 0, 0
   .quad    doUp
   .byte    18, 87, 151, 70, 7, 0, 0, 0
   .quad    doQuit
   .byte    82, 38, 39, 231, 246, 6, 0, 0
   .quad    doErrno
   .byte    226, 22, 70, 151, 102, 87, 6, 0
   .quad    doNative
   .byte    18, 38, 119, 54, 7, 0, 0, 0
   .quad    doArgs
   .byte    226, 86, 134, 71, 7, 0, 0, 0
   .quad    doNext
   .byte    18, 38, 119, 6, 0, 0, 0, 0
   .quad    doArg
   .byte    34, 87, 54, 71, 7, 0, 0, 0
   .quad    doRest
   .byte    66, 22, 70, 87, 6, 0, 0, 0
   .quad    doDate
   .byte    66, 151, 214, 86, 6, 0, 0, 0
   .quad    doTime
   .byte    82, 55, 87, 54, 6, 0, 0, 0
   .quad    doUsec
   .byte    2, 119, 71, 6, 0, 0, 0, 0
   .quad    doPwd
   .byte    50, 70, 6, 0, 0, 0, 0, 0
   .quad    doCd
   .byte    50, 70, 71, 151, 7, 0, 0, 0
   .quad    doCtty
   .byte    146, 230, 102, 246, 6, 0, 0, 0
   .quad    doInfo
   .byte    98, 150, 198, 86, 6, 0, 0, 0
   .quad    doFile
   .byte    66, 150, 38, 7, 0, 0, 0, 0
   .quad    doDir
   .byte    50, 214, 70, 6, 0, 0, 0, 0
   .quad    doCmd
   .byte    18, 38, 119, 102, 7, 0, 0, 0
   .quad    doArgv
   .byte    242, 6, 71, 7, 0, 0, 0, 0
   .quad    doOpt
   .byte    98, 87, 38, 55, 151, 246, 230, 6
   .quad    doVersion
   .byte    114, 54, 6, 0, 0, 0, 0, 0
   .quad    doGc
   .byte    18, 6, 7, 199, 150, 7, 0, 0
   .quad    doApply
   .byte    2, 23, 54, 55, 7, 0, 0, 0
   .quad    doPass
   .byte    210, 22, 6, 55, 7, 0, 0, 0
   .quad    doMaps
   .byte    210, 22, 6, 7, 0, 0, 0, 0
   .quad    doMap
   .byte    210, 22, 6, 55, 6, 0, 0, 0
   .quad    doMapc
   .byte    210, 22, 6, 199, 150, 54, 71, 7
   .quad    doMaplist
   .byte    210, 22, 6, 55, 22, 38, 7, 0
   .quad    doMapcar
   .byte    210, 22, 6, 55, 246, 230, 6, 0
   .quad    doMapcon
   .byte    210, 22, 6, 55, 22, 230, 6, 0
   .quad    doMapcan
   .byte    98, 150, 198, 70, 87, 38, 7, 0
   .quad    doFilter
   .byte    82, 134, 71, 39, 23, 54, 70, 7
   .quad    doExtract
   .byte    50, 87, 86, 182, 6, 0, 0, 0
   .quad    doSeek
   .byte    98, 150, 230, 70, 6, 0, 0, 0
   .quad    doFind
   .byte    2, 151, 54, 182, 6, 0, 0, 0
   .quad    doPick
   .byte    50, 230, 70, 7, 0, 0, 0, 0
   .quad    doCnt
   .byte    50, 87, 215, 6, 0, 0, 0, 0
   .quad    doSum
   .byte    210, 22, 134, 151, 6, 0, 0, 0
   .quad    doMaxi
   .byte    210, 150, 230, 150, 6, 0, 0, 0
   .quad    doMini
   .byte    98, 150, 54, 135, 6, 0, 0, 0
   .quad    doFish
   .byte    34, 150, 7, 0, 0, 0, 0, 0
   .quad    doBy
   .byte    18, 54, 7, 0, 0, 0, 0, 0
   .quad    doAs
   .byte    2, 151, 70, 6, 0, 0, 0, 0
   .quad    doPid
   .byte    194, 150, 70, 7, 0, 0, 0, 0
   .quad    doLit
   .byte    82, 102, 23, 198, 6, 0, 0, 0
   .quad    doEval
   .byte    34, 87, 231, 6, 0, 0, 0, 0
   .quad    doRun
   .byte    66, 86, 102, 6, 0, 0, 0, 0
   .quad    doDef
   .byte    66, 86, 6, 0, 0, 0, 0, 0
   .quad    doDe
   .byte    66, 214, 6, 0, 0, 0, 0, 0
   .quad    doDm
   .byte    34, 246, 134, 7, 0, 0, 0, 0
   .quad    doBox
   .byte    226, 86, 118, 7, 0, 0, 0, 0
   .quad    doNew
   .byte    66, 151, 7, 87, 6, 0, 0, 0
   .quad    doType
   .byte    146, 54, 23, 6, 0, 0, 0, 0
   .quad    doIsa
   .byte    210, 86, 70, 135, 246, 70, 6, 0
   .quad    doMethod
   .byte    50, 87, 230, 70, 6, 0, 0, 0
   .quad    doSend
   .byte    66, 39, 151, 7, 0, 0, 0, 0
   .quad    doTry
   .byte    50, 87, 7, 87, 38, 7, 0, 0
   .quad    doSuper
   .byte    82, 134, 71, 39, 23, 6, 0, 0
   .quad    doExtra
   .byte    114, 151, 70, 135, 6, 0, 0, 0
   .quad    doWith
   .byte    34, 150, 230, 70, 6, 0, 0, 0
   .quad    doBind
   .byte    162, 246, 38, 6, 0, 0, 0, 0
   .quad    doJob
   .byte    194, 86, 70, 7, 0, 0, 0, 0
   .quad    doLet
   .byte    194, 86, 70, 247, 3, 0, 0, 0
   .quad    doLetQ
   .byte    82, 55, 87, 6, 0, 0, 0, 0
   .quad    doUse
   .byte    18, 230, 70, 6, 0, 0, 0, 0
   .quad    doAnd
   .byte    242, 38, 7, 0, 0, 0, 0, 0
   .quad    doOr
   .byte    226, 22, 230, 70, 6, 0, 0, 0
   .quad    doNand
   .byte    226, 246, 38, 7, 0, 0, 0, 0
   .quad    doNor
   .byte    130, 247, 38, 7, 0, 0, 0, 0
   .quad    doXor
   .byte    34, 246, 246, 198, 6, 0, 0, 0
   .quad    doBool
   .byte    226, 246, 70, 7, 0, 0, 0, 0
   .quad    doNot
   .byte    226, 150, 198, 6, 0, 0, 0, 0
   .quad    doNil
   .byte    66, 7, 0, 0, 0, 0, 0, 0
   .quad    doT
   .byte    2, 39, 247, 118, 6, 0, 0, 0
   .quad    doProg
   .byte    2, 39, 247, 118, 22, 3, 0, 0
   .quad    doProg1
   .byte    2, 39, 247, 118, 38, 3, 0, 0
   .quad    doProg2
   .byte    146, 102, 6, 0, 0, 0, 0, 0
   .quad    doIf
   .byte    146, 102, 38, 3, 0, 0, 0, 0
   .quad    doIf2
   .byte    146, 102, 230, 6, 0, 0, 0, 0
   .quad    doIfn
   .byte    114, 135, 86, 230, 6, 0, 0, 0
   .quad    doWhen
   .byte    82, 231, 198, 86, 54, 55, 7, 0
   .quad    doUnless
   .byte    50, 246, 230, 70, 6, 0, 0, 0
   .quad    doCond
   .byte    226, 246, 230, 70, 6, 0, 0, 0
   .quad    doNond
   .byte    50, 22, 54, 87, 6, 0, 0, 0
   .quad    doCase
   .byte    50, 71, 23, 70, 87, 6, 0, 0
   .quad    doState
   .byte    114, 135, 150, 198, 86, 6, 0, 0
   .quad    doWhile
   .byte    82, 231, 70, 151, 198, 6, 0, 0
   .quad    doUntil
   .byte    18, 70, 7, 0, 0, 0, 0, 0
   .quad    doAt
   .byte    66, 246, 6, 0, 0, 0, 0, 0
   .quad    doDo
   .byte    194, 246, 246, 6, 7, 0, 0, 0
   .quad    doLoop
   .byte    98, 246, 38, 7, 0, 0, 0, 0
   .quad    doFor
   .byte    50, 22, 70, 55, 134, 6, 0, 0
   .quad    doCatch
   .byte    66, 135, 38, 247, 118, 7, 0, 0
   .quad    doThrow
   .byte    98, 150, 230, 22, 198, 198, 150, 7
   .quad    doFinally
   .byte    50, 246, 6, 0, 0, 0, 0, 0
   .quad    doCo
   .byte    146, 151, 86, 198, 70, 6, 0, 0
   .quad    doYield
   .byte    18, 2, 0, 0, 0, 0, 0, 0
   .quad    doBreak
   .byte    82, 6, 0, 0, 0, 0, 0, 0
   .quad    doE
   .byte    66, 2, 0, 0, 0, 0, 0, 0
   .quad    doTrace
   .byte    50, 151, 55, 7, 0, 0, 0, 0
   .quad    doSys
   .byte    50, 22, 198, 198, 6, 0, 0, 0
   .quad    doCall
   .byte    66, 151, 54, 182, 6, 0, 0, 0
   .quad    doTick
   .byte    146, 6, 151, 70, 6, 0, 0, 0
   .quad    doIpid
   .byte    242, 6, 151, 70, 6, 0, 0, 0
   .quad    doOpid
   .byte    178, 150, 198, 198, 6, 0, 0, 0
   .quad    doKill
   .byte    98, 246, 38, 183, 6, 0, 0, 0
   .quad    doFork
   .byte    34, 150, 87, 6, 0, 0, 0, 0
   .quad    doBye
   .byte    226, 22, 214, 86, 6, 0, 0, 0
   .quad    doName
   .byte    50, 7, 247, 3, 0, 0, 0, 0
   .quad    doSpQ
   .byte    2, 23, 70, 247, 3, 0, 0, 0
   .quad    doPatQ
   .byte    98, 86, 231, 246, 3, 0, 0, 0
   .quad    doFunQ
   .byte    114, 86, 70, 71, 6, 0, 0, 0
   .quad    doGetd
   .byte    18, 198, 198, 6, 0, 0, 0, 0
   .quad    doAll
   .byte    146, 230, 70, 87, 38, 231, 6, 0
   .quad    doIntern
   .byte    82, 134, 71, 87, 38, 231, 6, 0
   .quad    doExtern
   .byte    210, 211, 211, 211, 3, 0, 0, 0
   .quad    doHide
   .byte    34, 246, 134, 247, 3, 0, 0, 0
   .quad    doBoxQ
   .byte    50, 71, 39, 247, 3, 0, 0, 0
   .quad    doStrQ
   .byte    82, 134, 71, 247, 3, 0, 0, 0
   .quad    doExtQ
   .byte    66, 247, 86, 55, 134, 6, 0, 0
   .quad    doTouch
   .byte    162, 23, 6, 7, 0, 0, 0, 0
   .quad    doZap
   .byte    50, 134, 246, 6, 7, 0, 0, 0
   .quad    doChop
   .byte    2, 23, 54, 182, 6, 0, 0, 0
   .quad    doPack
   .byte    114, 198, 86, 87, 6, 0, 0, 0
   .quad    doGlue
   .byte    66, 87, 134, 71, 7, 0, 0, 0
   .quad    doText
   .byte    2, 39, 87, 246, 3, 0, 0, 0
   .quad    doPreQ
   .byte    50, 87, 39, 246, 3, 0, 0, 0
   .quad    doSubQ
   .byte    98, 23, 198, 6, 0, 0, 0, 0
   .quad    doVal
   .byte    50, 87, 70, 7, 0, 0, 0, 0
   .quad    doSet
   .byte    50, 87, 70, 23, 7, 0, 0, 0
   .quad    doSetq
   .byte    130, 55, 134, 118, 6, 0, 0, 0
   .quad    doXchg
   .byte    242, 230, 6, 0, 0, 0, 0, 0
   .quad    doOn
   .byte    242, 102, 102, 6, 0, 0, 0, 0
   .quad    doOff
   .byte    242, 230, 246, 100, 102, 6, 0, 0
   .quad    doOnOff
   .byte    162, 87, 38, 247, 6, 0, 0, 0
   .quad    doZero
   .byte    242, 230, 86, 6, 0, 0, 0, 0
   .quad    doOne
   .byte    66, 86, 102, 22, 86, 199, 70, 7
   .quad    doDefault
   .byte    2, 87, 55, 135, 6, 0, 0, 0
   .quad    doPush
   .byte    2, 87, 55, 135, 22, 3, 0, 0
   .quad    doPush1
   .byte    2, 247, 6, 7, 0, 0, 0, 0
   .quad    doPop
   .byte    50, 86, 71, 7, 0, 0, 0, 0
   .quad    doCut
   .byte    66, 86, 198, 6, 0, 0, 0, 0
   .quad    doDel
   .byte    18, 87, 87, 86, 87, 6, 0, 0
   .quad    doQueue
   .byte    98, 150, 102, 246, 6, 0, 0, 0
   .quad    doFifo
   .byte    146, 70, 134, 7, 0, 0, 0, 0
   .quad    doIdx
   .byte    194, 86, 7, 7, 0, 0, 0, 0
   .quad    doLup
   .byte    2, 87, 71, 7, 0, 0, 0, 0
   .quad    doPut
   .byte    114, 86, 70, 7, 0, 0, 0, 0
   .quad    doGet
   .byte    2, 39, 247, 6, 7, 0, 0, 0
   .quad    doProp
   .byte    178, 3, 0, 0, 0, 0, 0, 0
   .quad    doSemicol
   .byte    210, 163, 3, 0, 0, 0, 0, 0
   .quad    doSetCol
   .byte    162, 3, 0, 0, 0, 0, 0, 0
   .quad    doCol
   .byte    162, 163, 3, 0, 0, 0, 0, 0
   .quad    doPropCol
   .byte    2, 87, 71, 199, 6, 0, 0, 0
   .quad    doPutl
   .byte    114, 86, 70, 199, 6, 0, 0, 0
   .quad    doGetl
   .byte    114, 151, 6, 87, 6, 0, 0, 0
   .quad    doWipe
   .byte    210, 86, 70, 23, 6, 0, 0, 0
   .quad    doMeta
   .byte    194, 246, 118, 247, 3, 0, 0, 0
   .quad    doLowQ
   .byte    82, 7, 7, 247, 3, 0, 0, 0
   .quad    doUppQ
   .byte    194, 246, 118, 55, 6, 0, 0, 0
   .quad    doLowc
   .byte    82, 7, 7, 55, 6, 0, 0, 0
   .quad    doUppc
   .byte    98, 246, 198, 70, 6, 0, 0, 0
   .quad    doFold
   .byte    50, 22, 38, 7, 0, 0, 0, 0
   .quad    doCar
   .byte    50, 70, 38, 7, 0, 0, 0, 0
   .quad    doCdr
   .byte    50, 22, 22, 38, 7, 0, 0, 0
   .quad    doCaar
   .byte    50, 22, 70, 38, 7, 0, 0, 0
   .quad    doCadr
   .byte    50, 70, 22, 38, 7, 0, 0, 0
   .quad    doCdar
   .byte    50, 70, 70, 38, 7, 0, 0, 0
   .quad    doCddr
   .byte    50, 22, 22, 22, 38, 7, 0, 0
   .quad    doCaaar
   .byte    50, 22, 22, 70, 38, 7, 0, 0
   .quad    doCaadr
   .byte    50, 22, 70, 22, 38, 7, 0, 0
   .quad    doCadar
   .byte    50, 22, 70, 70, 38, 7, 0, 0
   .quad    doCaddr
   .byte    50, 70, 22, 22, 38, 7, 0, 0
   .quad    doCdaar
   .byte    50, 70, 22, 70, 38, 7, 0, 0
   .quad    doCdadr
   .byte    50, 70, 70, 22, 38, 7, 0, 0
   .quad    doCddar
   .byte    50, 70, 70, 70, 38, 7, 0, 0
   .quad    doCdddr
   .byte    50, 22, 22, 22, 22, 38, 7, 0
   .quad    doCaaaar
   .byte    50, 22, 22, 22, 70, 38, 7, 0
   .quad    doCaaadr
   .byte    50, 22, 22, 70, 22, 38, 7, 0
   .quad    doCaadar
   .byte    50, 22, 22, 70, 70, 38, 7, 0
   .quad    doCaaddr
   .byte    50, 22, 70, 22, 22, 38, 7, 0
   .quad    doCadaar
   .byte    50, 22, 70, 22, 70, 38, 7, 0
   .quad    doCadadr
   .byte    50, 22, 70, 70, 22, 38, 7, 0
   .quad    doCaddar
   .byte    50, 22, 70, 70, 70, 38, 7, 0
   .quad    doCadddr
   .byte    50, 70, 22, 22, 22, 38, 7, 0
   .quad    doCdaaar
   .byte    50, 70, 22, 22, 70, 38, 7, 0
   .quad    doCdaadr
   .byte    50, 70, 22, 70, 22, 38, 7, 0
   .quad    doCdadar
   .byte    50, 70, 22, 70, 70, 38, 7, 0
   .quad    doCdaddr
   .byte    50, 70, 70, 22, 22, 38, 7, 0
   .quad    doCddaar
   .byte    50, 70, 70, 22, 70, 38, 7, 0
   .quad    doCddadr
   .byte    50, 70, 70, 70, 22, 38, 7, 0
   .quad    doCdddar
   .byte    50, 70, 70, 70, 70, 38, 7, 0
   .quad    doCddddr
   .byte    226, 70, 135, 6, 0, 0, 0, 0
   .quad    doNth
   .byte    50, 246, 230, 6, 0, 0, 0, 0
   .quad    doCon
   .byte    50, 246, 230, 54, 7, 0, 0, 0
   .quad    doCons
   .byte    50, 246, 230, 54, 6, 0, 0, 0
   .quad    doConc
   .byte    50, 150, 38, 55, 6, 0, 0, 0
   .quad    doCirc
   .byte    34, 247, 70, 7, 0, 0, 0, 0
   .quad    doRot
   .byte    194, 150, 54, 71, 7, 0, 0, 0
   .quad    doList
   .byte    226, 86, 86, 70, 6, 0, 0, 0
   .quad    doNeed
   .byte    34, 23, 230, 118, 86, 6, 0, 0
   .quad    doRange
   .byte    98, 86, 199, 198, 6, 0, 0, 0
   .quad    doFull
   .byte    210, 22, 182, 86, 6, 0, 0, 0
   .quad    doMake
   .byte    210, 22, 70, 86, 6, 0, 0, 0
   .quad    doMade
   .byte    50, 134, 22, 150, 230, 6, 0, 0
   .quad    doChain
   .byte    194, 150, 230, 182, 6, 0, 0, 0
   .quad    doLink
   .byte    146, 247, 182, 86, 6, 0, 0, 0
   .quad    doYoke
   .byte    50, 246, 6, 151, 7, 0, 0, 0
   .quad    doCopy
   .byte    210, 150, 134, 7, 0, 0, 0, 0
   .quad    doMix
   .byte    18, 6, 7, 87, 230, 70, 6, 0
   .quad    doAppend
   .byte    66, 86, 198, 86, 70, 87, 6, 0
   .quad    doDelete
   .byte    66, 86, 198, 22, 7, 0, 0, 0
   .quad    doDelq
   .byte    34, 87, 6, 199, 22, 54, 86, 6
   .quad    doReplace
   .byte    50, 71, 39, 151, 6, 7, 0, 0
   .quad    doStrip
   .byte    50, 7, 199, 150, 70, 7, 0, 0
   .quad    doSplit
   .byte    34, 87, 102, 87, 38, 55, 87, 6
   .quad    doReverse
   .byte    98, 198, 150, 6, 7, 0, 0, 0
   .quad    doFlip
   .byte    66, 39, 151, 214, 6, 0, 0, 0
   .quad    doTrim
   .byte    50, 198, 150, 6, 7, 0, 0, 0
   .quad    doClip
   .byte    130, 86, 22, 70, 6, 0, 0, 0
   .quad    doHead
   .byte    66, 23, 150, 198, 6, 0, 0, 0
   .quad    doTail
   .byte    50, 71, 87, 214, 6, 0, 0, 0
   .quad    doStem
   .byte    98, 150, 230, 6, 0, 0, 0, 0
   .quad    doFin
   .byte    194, 22, 54, 71, 7, 0, 0, 0
   .quad    doLast
   .byte    210, 211, 3, 0, 0, 0, 0, 0
   .quad    doEq
   .byte    226, 214, 211, 3, 0, 0, 0, 0
   .quad    doNEq
   .byte    210, 3, 0, 0, 0, 0, 0, 0
   .quad    doEqual
   .byte    194, 227, 3, 0, 0, 0, 0, 0
   .quad    doNEqual
   .byte    210, 3, 3, 0, 0, 0, 0, 0
   .quad    doEq0
   .byte    210, 67, 5, 0, 0, 0, 0, 0
   .quad    doEqT
   .byte    226, 6, 3, 0, 0, 0, 0, 0
   .quad    doNEq0
   .byte    226, 70, 5, 0, 0, 0, 0, 0
   .quad    doNEqT
   .byte    194, 3, 0, 0, 0, 0, 0, 0
   .quad    doLt
   .byte    194, 211, 3, 0, 0, 0, 0, 0
   .quad    doLe
   .byte    226, 3, 0, 0, 0, 0, 0, 0
   .quad    doGt
   .byte    226, 211, 3, 0, 0, 0, 0, 0
   .quad    doGe
   .byte    210, 22, 134, 7, 0, 0, 0, 0
   .quad    doMax
   .byte    210, 150, 230, 6, 0, 0, 0, 0
   .quad    doMin
   .byte    18, 70, 247, 214, 6, 0, 0, 0
   .quad    doAtom
   .byte    2, 23, 150, 38, 7, 0, 0, 0
   .quad    doPair
   .byte    194, 54, 71, 247, 3, 0, 0, 0
   .quad    doLstQ
   .byte    226, 86, 215, 246, 3, 0, 0, 0
   .quad    doNumQ
   .byte    50, 151, 215, 246, 3, 0, 0, 0
   .quad    doSymQ
   .byte    98, 198, 118, 246, 3, 0, 0, 0
   .quad    doFlgQ
   .byte    210, 86, 214, 38, 86, 38, 7, 0
   .quad    doMember
   .byte    210, 86, 214, 22, 7, 0, 0, 0
   .quad    doMemq
   .byte    210, 214, 86, 22, 7, 0, 0, 0
   .quad    doMmeq
   .byte    50, 87, 54, 70, 7, 0, 0, 0
   .quad    doSect
   .byte    66, 150, 102, 102, 6, 0, 0, 0
   .quad    doDiff
   .byte    146, 230, 70, 86, 134, 7, 0, 0
   .quad    doIndex
   .byte    242, 102, 102, 54, 87, 70, 7, 0
   .quad    doOffset
   .byte    194, 86, 230, 118, 70, 135, 6, 0
   .quad    doLength
   .byte    50, 151, 166, 87, 6, 0, 0, 0
   .quad    doSize
   .byte    18, 54, 55, 247, 54, 6, 0, 0
   .quad    doAssoc
   .byte    18, 54, 247, 22, 7, 0, 0, 0
   .quad    doAsoq
   .byte    34, 23, 230, 182, 6, 0, 0, 0
   .quad    doRank
   .byte    210, 22, 70, 55, 134, 6, 0, 0
   .quad    doMatch
   .byte    98, 150, 198, 198, 6, 0, 0, 0
   .quad    doFill
   .byte    2, 39, 247, 102, 87, 6, 0, 0
   .quad    doProve
   .byte    210, 226, 3, 0, 0, 0, 0, 0
   .quad    doArrow
   .byte    82, 231, 150, 102, 150, 7, 0, 0
   .quad    doUnify
   .byte    50, 247, 38, 71, 7, 0, 0, 0
   .quad    doSort
   .byte    98, 246, 38, 215, 22, 70, 7, 0
   .quad    doFormat
   .byte    178, 2, 0, 0, 0, 0, 0, 0
   .quad    doAdd
   .byte    210, 2, 0, 0, 0, 0, 0, 0
   .quad    doSub
   .byte    146, 230, 54, 6, 0, 0, 0, 0
   .quad    doInc
   .byte    66, 86, 54, 6, 0, 0, 0, 0
   .quad    doDec
   .byte    162, 2, 0, 0, 0, 0, 0, 0
   .quad    doMul
   .byte    162, 242, 2, 0, 0, 0, 0, 0
   .quad    doMulDiv
   .byte    242, 2, 0, 0, 0, 0, 0, 0
   .quad    doDiv
   .byte    82, 2, 0, 0, 0, 0, 0, 0
   .quad    doRem
   .byte    226, 227, 3, 0, 0, 0, 0, 0
   .quad    doShift
   .byte    194, 70, 7, 3, 0, 0, 0, 0
   .quad    doLt0
   .byte    114, 86, 6, 3, 0, 0, 0, 0
   .quad    doGe0
   .byte    114, 70, 7, 3, 0, 0, 0, 0
   .quad    doGt0
   .byte    18, 38, 54, 7, 0, 0, 0, 0
   .quad    doAbs
   .byte    34, 150, 70, 247, 3, 0, 0, 0
   .quad    doBitQ
   .byte    98, 2, 0, 0, 0, 0, 0, 0
   .quad    doBitAnd
   .byte    194, 7, 0, 0, 0, 0, 0, 0
   .quad    doBitOr
   .byte    130, 199, 7, 0, 0, 0, 0, 0
   .quad    doBitXor
   .byte    50, 87, 86, 70, 6, 0, 0, 0
   .quad    doSeed
   .byte    34, 23, 230, 70, 6, 0, 0, 0
   .quad    doRand
   .byte    2, 23, 70, 135, 6, 0, 0, 0
   .quad    doPath
   .byte    34, 87, 22, 70, 6, 0, 0, 0
   .quad    doRead
   .byte    114, 23, 150, 70, 7, 0, 0, 0
   .quad    doWait
   .byte    50, 151, 231, 54, 6, 0, 0, 0
   .quad    doSync
   .byte    130, 86, 22, 38, 7, 0, 0, 0
   .quad    doHear
   .byte    66, 87, 198, 198, 6, 0, 0, 0
   .quad    doTell
   .byte    2, 247, 198, 198, 6, 0, 0, 0
   .quad    doPoll
   .byte    178, 86, 150, 7, 0, 0, 0, 0
   .quad    doKey
   .byte    2, 87, 86, 182, 6, 0, 0, 0
   .quad    doPeek
   .byte    50, 134, 22, 38, 7, 0, 0, 0
   .quad    doChar
   .byte    50, 183, 150, 6, 7, 0, 0, 0
   .quad    doSkip
   .byte    82, 246, 198, 6, 0, 0, 0, 0
   .quad    doEol
   .byte    82, 246, 102, 6, 0, 0, 0, 0
   .quad    doEof
   .byte    98, 38, 247, 214, 6, 0, 0, 0
   .quad    doFrom
   .byte    66, 151, 198, 198, 6, 0, 0, 0
   .quad    doTill
   .byte    194, 150, 230, 86, 6, 0, 0, 0
   .quad    doLine
   .byte    194, 150, 230, 86, 54, 7, 0, 0
   .quad    doLines
   .byte    18, 230, 150, 7, 0, 0, 0, 0
   .quad    doAny
   .byte    50, 151, 215, 6, 0, 0, 0, 0
   .quad    doSym
   .byte    50, 71, 39, 7, 0, 0, 0, 0
   .quad    doStr
   .byte    194, 246, 22, 70, 6, 0, 0, 0
   .quad    doLoad
   .byte    146, 230, 6, 0, 0, 0, 0, 0
   .quad    doIn
   .byte    242, 86, 71, 7, 0, 0, 0, 0
   .quad    doOut
   .byte    2, 151, 6, 87, 6, 0, 0, 0
   .quad    doPipe
   .byte    50, 70, 199, 6, 0, 0, 0, 0
   .quad    doCtl
   .byte    242, 6, 87, 230, 6, 0, 0, 0
   .quad    doOpen
   .byte    50, 198, 246, 54, 87, 6, 0, 0
   .quad    doClose
   .byte    82, 54, 134, 246, 6, 0, 0, 0
   .quad    doEcho
   .byte    2, 39, 151, 230, 6, 0, 0, 0
   .quad    doPrin
   .byte    2, 39, 151, 230, 198, 6, 0, 0
   .quad    doPrinl
   .byte    50, 7, 23, 54, 86, 6, 0, 0
   .quad    doSpace
   .byte    2, 39, 151, 230, 70, 7, 0, 0
   .quad    doPrint
   .byte    2, 39, 151, 230, 70, 55, 7, 7
   .quad    doPrintsp
   .byte    2, 39, 151, 230, 70, 199, 230, 6
   .quad    doPrintln
   .byte    98, 198, 86, 55, 135, 6, 0, 0
   .quad    doFlush
   .byte    34, 87, 118, 151, 230, 70, 6, 0
   .quad    doRewind
   .byte    82, 134, 71, 7, 0, 0, 0, 0
   .quad    doExt
   .byte    34, 71, 6, 0, 0, 0, 0, 0
   .quad    doRd
   .byte    2, 39, 7, 0, 0, 0, 0, 0
   .quad    doPr
   .byte    114, 39, 7, 0, 0, 0, 0, 0
   .quad    doWr
   .byte    34, 7, 55, 6, 0, 0, 0, 0
   .quad    doRpc
   .byte    2, 247, 246, 198, 6, 0, 0, 0
   .quad    doPool
   .byte    162, 246, 86, 39, 231, 22, 198, 6
   .quad    doJournal
   .byte    146, 70, 6, 0, 0, 0, 0, 0
   .quad    doId
   .byte    50, 87, 22, 7, 0, 0, 0, 0
   .quad    doSeq
   .byte    194, 150, 86, 86, 7, 0, 0, 0
   .quad    doLieu
   .byte    194, 246, 54, 182, 6, 0, 0, 0
   .quad    doLock
   .byte    50, 246, 214, 214, 150, 70, 7, 0
   .quad    doCommit
   .quad    .+20
   .quad    doRollback
   .byte    114, 111, 108, 108, 98, 97, 99, 107
   .byte    2, 0, 0, 0, 0, 0, 0, 0
   .byte    210, 22, 38, 183, 6, 0, 0, 0
   .quad    doMark
   .byte    98, 38, 87, 86, 6, 0, 0, 0
   .quad    doFree
   .byte    66, 38, 54, 182, 6, 0, 0, 0
   .quad    doDbck
   .byte    2, 247, 38, 71, 7, 0, 0, 0
   .quad    doPort
   .byte    18, 54, 54, 86, 6, 71, 7, 0
   .quad    doAccept
   .byte    194, 150, 54, 71, 87, 230, 6, 0
   .quad    doListen
   .byte    130, 246, 54, 71, 7, 0, 0, 0
   .quad    doHost
   .byte    50, 246, 230, 230, 86, 54, 70, 7
   .quad    doConnect
   .byte    82, 71, 6, 7, 0, 0, 0, 0
   .quad    doUdp
SymTabEnd:
   .byte    194, 148, 230, 86, 135, 7, 0, 0
   .globl  TgOS
TgOS:
   .quad    TgOS
   .quad    26
Db1:
   .quad    Nil
   .globl  Extern
Extern:
   .quad    Db1
   .quad    Nil
   .globl  Version
Version:
   .quad    50
   .quad    .+8
   .quad    2
   .quad    .+8
   .quad    50
   .quad    .+8
   .quad    2
   .quad    Nil
GcMarkEnd:
EnvCo:
   .globl  Chr
Chr:
   .quad    0
   .globl  PutB
PutB:
   .quad    0
   .globl  Get_A
Get_A:
   .quad    0
   .globl  InFile
InFile:
   .quad    0
   .globl  OutFile
OutFile:
   .quad    0
Env:
EnvBind:
   .quad    0
EnvInFrames:
   .quad    0
EnvOutFrames:
   .quad    0
EnvCtlFrames:
   .quad    0
EnvArgs:
   .quad    0
EnvNext:
   .quad    0
EnvApply:
   .quad    0
EnvMeth:
   .quad    0
EnvMake:
   .quad    0
EnvYoke:
   .quad    0
EnvParseX:
   .quad    0
EnvParseC:
   .quad    0
EnvParseEOF:
   .quad    -1
EnvMid:
EnvCo7:
   .quad    0
EnvTask:
   .quad    Nil
EnvProtect:
   .quad    0
EnvTrace:
   .quad    0
EnvEnd:
OrgTermio:
   .space   64
Flock:
   .space   32
Tms:
   .space   32
Addr:
   .space   16
TBuf:
   .byte    5
   .byte    84
   .globl  _r_
_r_:
   .asciz   "r"
   .globl  _w_
_w_:
   .asciz   "w"
   .globl  _a_
_a_:
   .asciz   "a"
   .globl  _ap_
_ap_:
   .asciz   "a+"
   .globl  _dot_
_dot_:
   .asciz   "."
   .globl  Tio
Tio:
   .byte    0
   .globl  Flg
Flg:
   .byte    0
Repl:
   .byte    0
PRepl:
   .byte    0
Jam:
   .byte    0
InBye:
   .byte    0
Sync:
   .byte    0
   .balign  2
CaseBlocks:
   .short   450, 450, 449, 300, 299, 416, 504, 732, 607, 750, 533, 838, 732, 806, 700, 534
   .short   351, 724, 886, 886, 886, 873, 65167, 836, 65413, 65381, 64949, 64929, 27, 708, 28, 71
   .short   65192, 65420, 565, 65279, 26, 65215, 38, 64288, 65064, 275, 260, 64353, 64346, 267, 265, 254
   .short   65288, 553, 606, 455, 508, 476, 64582, 553, 65063, 64341, 361, 64456, 252, 259, 64360, 64328
   .short   64296, 64264, 64232, 64200, 64168, 64136, 64104, 64072, 101, 80, 171, 313, 65038, 99, 341, 424
   .short   63081, 297, 296, 63775, 65110, 264, 263, 64192, 64654, 65197, 198, 64679, 64405, 62589, 159, 64279
   .short   65056, 64808, 64303, 59, 62393, 65111, 64718, 65467, 62265, 64152, 65419, 65339, 64084, 63459, 65323, 64215
   .short   64361, 64570, 65253, 62664, 64688, 64136, 64959, 62536, 65093, 64711, 65103, 63473, 63253, 62184, 64927, 62280
   .short   63850, 64514, 64919, 62152, 62120, 62649, 62643, 61291, 63594, 63562, 64600, 63498, 63466, 64527, 63402, 61084
   .short   64400, 63306, 63482, 63242, 63434, 63378, 62577, 62674, 63282, 63050, 62465, 63053, 61352, 62922, 62890, 60577
   .short   62825, 62794, 62762, 62730, 62698, 62666, 62634, 62602, 62570, 62538, 62506, 62474, 62442, 62410, 62378, 62346
   .short   62314, 62282, 62250, 62089, 63351, 62154, 62122, 63287, 60456, 60424, 60392, 60360, 61930, 62626, 62789, 60870
   .short   62167, 61770, 59629, 59422, 61674, 62871, 60008, 59976, 59944, 59912, 59880, 59848, 59816, 59784, 59752, 59720
   .short   59688, 59656, 59624, 59592, 59560, 59528, 59496, 59464, 59432, 59400, 59368, 59336, 59304, 59272, 59240, 59208
   .short   59176, 59144, 59112, 59080, 59048, 59016, 58984, 58952, 58920, 58888, 58856, 58824, 58792, 58760, 58728, 58696
   .short   58719, 58687, 58655, 58623, 61399, 58559, 58527, 58501, 61319, 61271, 61271, 61271, 61271, 61255, 57773, 61254
   .short   61254, 61254, 57824, 58333, 61190, 59865, 60395, 57924, 61140, 61285, 57845, 61253, 61161, 61308, 61044, 61296
   .short   61309, 61304, 61073, 61395, 61053, 60965, 60967, 61285, 61405, 61078, 61395, 61409, 61289, 57224, 57192, 57160
   .short   60715, 60733, 60697, 61212, 61192, 60743, 60733, 60723, 60459, 60427, 60395, 60363, 60366, 60028, 60265, 60268
   .short   59830, 60171, 60139, 59881, 56488, 56456, 56424, 56392, 59664, 59939, 60248, 60239, 60229, 60133, 56168, 56136
   .short   59691, 59659, 59627, 59595, 59563, 59531, 59499, 59467, 55848, 55816, 55784, 55752, 55720, 55688, 55656, 55624
   .short   55592, 55560, 55528, 55496, 55464, 55432, 55400, 55368, 55336, 55304, 55272, 55240, 55208, 55176, 55144, 55112
   .short   55080, 55048, 55016, 54984, 54952, 54920, 54888, 54856, 54824, 54792, 54760, 54728, 54696, 54664, 54632, 54600
   .short   54568, 54536, 54504, 54472, 58033, 57995, 57963, 57968, 57899, 57867, 57835, 57803, 57771, 57739, 57742, 56719
   .short   58280, 57299, 55593, 55562, 58184, 55497, 55466, 56535, 56498, 54913, 55338, 55306, 57960, 52958, 53608, 53576
   .short   57622, 57577, 57803, 57527, 57527, 57694, 57111, 57396, 57363, 57331, 57299, 56940, 57235, 57203, 57173, 57140
   .short   54634, 54602, 54570, 54538, 54506, 54474, 54442, 54410, 54378, 54346, 54314, 54282, 54250, 54218, 54186, 54154
   .short   54122, 54090, 54058, 54026, 53994, 53962, 53930, 53898, 53866, 53834, 53802, 53770, 53738, 53706, 53674, 53642
   .short   53610, 53578, 53546, 53514, 53482, 53450, 53418, 53386, 53354, 53322, 53290, 53258, 53226, 53194, 53162, 53130
   .short   53098, 53066, 53034, 53002, 52970, 52938, 52906, 52874, 52842, 52810, 52778, 52746, 52714, 52682, 52650, 52618
   .short   52586, 52554, 52522, 52490, 52458, 52426, 52394, 52362, 52330, 52298, 52266, 52234, 52202, 52170, 52138, 52106
   .short   52074, 52042, 52010, 51978, 51946, 51914, 51882, 51850, 51818, 51786, 51754, 51722, 51690, 51658, 51626, 51594
   .short   51562, 51530, 51498, 51466, 51434, 51402, 51370, 51338, 51306, 51274, 51242, 51210, 51178, 51146, 51114, 51082
   .short   51050, 51018, 50986, 50954, 50922, 50890, 50858, 50826, 50794, 50762, 50730, 50698, 50666, 50634, 50602, 50570
   .short   50538, 50506, 50474, 50442, 50410, 50378, 50346, 50314, 50282, 50250, 50218, 50186, 50154, 50122, 50090, 50058
   .short   50026, 49994, 49962, 49930, 49898, 49866, 49834, 49802, 49770, 49738, 49706, 49674, 49642, 49610, 49578, 49546
   .short   49514, 49482, 49450, 49418, 49386, 49354, 49322, 49290, 49258, 49226, 49194, 49162, 49130, 49098, 49066, 49034
   .short   49002, 48970, 48938, 48906, 48874, 48842, 48810, 48778, 48746, 48714, 48682, 48650, 48618, 48586, 48554, 48522
   .short   48490, 48458, 48426, 48394, 48362, 48330, 48298, 48266, 48234, 48202, 48170, 48138, 48106, 45792, 46440, 46408
   .short   47978, 47946, 47914, 47882, 47850, 47818, 47786, 47754, 47722, 47690, 47658, 47626, 47594, 47562, 47530, 47498
   .short   47466, 47434, 47402, 47370, 47338, 47306, 47274, 47242, 47210, 47178, 47146, 47114, 47082, 47050, 47018, 46986
   .short   46954, 46922, 46890, 46858, 46826, 46794, 46762, 46730, 46698, 46666, 46634, 46602, 46570, 46538, 46506, 46474
   .short   46442, 46410, 46378, 46346, 46314, 46282, 46250, 46218, 46186, 46154, 46122, 46090, 46058, 46026, 45994, 45962
   .short   45930, 45898, 45866, 45834, 45802, 45770, 45738, 45706, 45674, 45642, 45610, 45578, 45546, 45514, 45482, 45450
   .short   45418, 45386, 45354, 45322, 45290, 45258, 45226, 45194, 45162, 45130, 45098, 45066, 45034, 45002, 44970, 44938
   .short   44906, 44874, 44842, 44810, 44778, 44746, 44714, 44682, 44650, 44618, 44586, 44554, 44522, 44490, 44458, 44426
   .short   44394, 44362, 44330, 44298, 44266, 44234, 44202, 44170, 44138, 44106, 44074, 44042, 44010, 43978, 43946, 43914
   .short   43882, 43850, 43818, 43786, 43754, 43722, 43690, 43658, 43626, 43594, 43562, 43530, 43498, 43466, 43434, 43402
   .short   43370, 43338, 43306, 43274, 43242, 43210, 43178, 43146, 43114, 43082, 43050, 43018, 42986, 42954, 42922, 42890
   .short   42858, 42826, 42794, 42762, 42730, 42698, 42666, 42634, 42602, 42570, 42538, 42506, 42474, 42442, 42410, 42378
   .short   42346, 42314, 42282, 42250, 42218, 42186, 42154, 42122, 42090, 42058, 42026, 41994, 41962, 41930, 41898, 41866
   .short   41834, 41802, 41770, 41738, 41706, 41674, 41642, 41610, 41578, 41546, 41514, 41482, 41450, 41418, 41386, 41354
   .short   41322, 41290, 41258, 41226, 41194, 41162, 41130, 41098, 41066, 41034, 41002, 40970, 40938, 40906, 40874, 40842
   .short   40810, 40778, 40746, 40714, 40682, 40650, 40618, 40586, 40554, 40522, 40490, 40458, 40426, 40394, 40362, 40330
   .short   40298, 40266, 40234, 40202, 40170, 40138, 40106, 40074, 40042, 40010, 39978, 39946, 39914, 39882, 39850, 39818
   .short   39786, 39754, 39722, 39690, 39658, 39626, 39594, 39562, 39530, 39498, 39466, 39434, 39402, 39370, 39338, 39306
   .short   39274, 39242, 39210, 39178, 39146, 39114, 39082, 39050, 39018, 38986, 38954, 38922, 38890, 38858, 38826, 38794
   .short   38762, 38730, 38698, 38666, 38634, 38602, 38570, 38538, 38506, 38474, 38442, 38410, 38378, 38346, 38314, 38282
   .short   38250, 38218, 38186, 38154, 38122, 38090, 38058, 38026, 37994, 37962, 37930, 37898, 37866, 37834, 37802, 37770
   .short   37738, 37706, 37674, 37642, 37610, 37578, 37546, 37514, 37482, 37450, 37418, 37386, 37354, 37322, 37290, 37258
   .short   37226, 37194, 37162, 37130, 37098, 37066, 37034, 37002, 36970, 36938, 36906, 36874, 36842, 36810, 36778, 36746
   .short   36714, 36682, 36650, 36618, 36586, 36554, 36522, 36490, 36458, 36426, 36394, 36362, 36330, 36298, 36266, 36234
   .short   36202, 36170, 36138, 36106, 36074, 36042, 36010, 35978, 35946, 35914, 35882, 35850, 35818, 35786, 35754, 35722
   .short   35690, 35658, 35626, 35594, 35562, 35530, 35498, 35466, 35434, 35402, 35370, 35338, 35306, 35274, 35242, 35210
   .short   35178, 35146, 35114, 35082, 35050, 35018, 34986, 34954, 34922, 34890, 34858, 34826, 34794, 34762, 34730, 34698
   .short   34666, 34634, 34602, 34570, 34538, 34506, 34474, 34442, 34410, 34378, 34346, 34314, 34282, 34250, 34218, 34186
   .short   34154, 34122, 34090, 34058, 34026, 33994, 33962, 33930, 33898, 33866, 33834, 33802, 33770, 33738, 33706, 33674
   .short   33642, 33610, 33578, 33546, 33514, 33482, 33450, 33418, 33386, 33354, 33322, 33290, 33258, 33226, 33194, 33162
   .short   33130, 33098, 33066, 33034, 33002, 32970, 32938, 32906, 32874, 32842, 32810, 32778, 32746, 32714, 32682, 32650
   .short   32618, 32586, 32554, 32522, 32490, 32458, 32426, 32394, 32362, 32330, 32298, 32266, 32234, 32202, 32170, 32138
   .short   32106, 32074, 32042, 32010, 31978, 31946, 31914, 31882, 31850, 31818, 31786, 31754, 31722, 31690, 31658, 31626
   .short   31594, 31562, 31530, 31498, 31466, 31434, 31402, 31370, 31338, 31306, 31274, 31242, 31210, 31178, 31146, 31114
   .short   31082, 31050, 31018, 30986, 30954, 30922, 30890, 30858, 30826, 30794, 30762, 30730, 30698, 30666, 30634, 30602
   .short   30570, 30538, 30506, 30474, 30442, 30410, 30378, 30346, 30314, 30282, 30250, 30218, 30186, 30154, 30122, 30090
   .short   30058, 30026, 29994, 29962, 29930, 29898, 29866, 29834, 29802, 29770, 29738, 29706, 29674, 29642, 29610, 29578
   .short   29546, 29514, 29482, 29450, 29418, 29386, 29354, 29322, 29290, 29258, 29226, 29194, 29162, 29130, 29098, 29066
   .short   29034, 29002, 28970, 28938, 28906, 28874, 28842, 28810, 28778, 28746, 28714, 28682, 28650, 28618, 28586, 28554
   .short   28522, 28490, 28458, 28426, 28394, 28362, 28330, 28298, 28266, 28234, 28202, 28170, 28138, 28106, 28074, 28042
   .short   28010, 27978, 27946, 27914, 27882, 27850, 27818, 27786, 27754, 27722, 27690, 27658, 27626, 27594, 27562, 27530
   .short   27498, 27466, 27434, 27402, 27370, 27338, 27306, 27274, 27242, 27210, 27178, 27146, 27114, 24816, 25448, 25416
   .short   26986, 26954, 26922, 26890, 26858, 26826, 26794, 26762, 26730, 26698, 26666, 26634, 26602, 26570, 26538, 26506
   .short   26474, 26442, 26410, 26378, 26346, 26314, 26282, 26250, 26218, 26186, 26154, 26122, 26090, 26058, 26026, 25994
   .short   25962, 25930, 25898, 25866, 27430, 28129, 28316, 24136, 24104, 24072, 24040, 24008, 23976, 23944, 23912, 23880
   .short   23848, 23816, 23784, 23752, 23720, 23688, 23656, 23624, 23592, 23560, 23528, 23496, 23464, 23432, 23400, 23368
   .short   23336, 23304, 23272, 23240, 23208, 23176, 23144, 23112, 23080, 23048, 23016, 22984, 22952, 22920, 22888, 22856
   .short   22824, 22792, 22760, 22728, 22696, 22664, 22632, 22600, 22568, 22536, 22504, 22472, 22440, 22408, 22376, 22344
   .short   23914, 23882, 23850, 23818, 23786, 23754, 23722, 23690, 23658, 23626, 23594, 23562, 23530, 23498, 23466, 23434
   .short   23402, 23370, 23338, 23306, 23274, 23242, 23210, 23178, 23146, 23114, 23082, 23050, 23018, 22986, 22954, 22922
   .short   22890, 22858, 22826, 22794, 22762, 22730, 22698, 22666, 22634, 22602, 22570, 22538, 22506, 22474, 22442, 22410
   .short   22378, 22346, 22314, 22282, 22250, 22218, 22186, 22154, 22122, 22090, 22058, 22026, 21994, 21962, 21930, 21898
   .short   21866, 21834, 21802, 21770, 21738, 21706, 21674, 21642, 21610, 21578, 21546, 21514, 21482, 21450, 21418, 21386
   .short   21354, 21322, 21290, 21258, 21226, 21194, 21162, 21130, 21098, 21066, 21034, 21002, 20970, 20938, 20906, 20874
   .short   20842, 20810, 20778, 20746, 20714, 20682, 20650, 20618, 20586, 20554, 20522, 20490, 20458, 20426, 20394, 20362
   .short   20330, 20298, 20266, 20234, 20202, 20170, 20138, 20106, 20074, 20042, 20010, 19978, 19946, 19914, 19882, 19850
   .short   19818, 19786, 19754, 19722, 19690, 19658, 19626, 19594, 19562, 19530, 19498, 19466, 19434, 19402, 19370, 19338
   .short   19306, 19274, 19242, 19210, 19178, 19146, 19114, 19082, 19050, 19018, 18986, 18954, 18922, 18890, 18858, 18826
   .short   18794, 18762, 18730, 18698, 18666, 18634, 18602, 18570, 18538, 18506, 18474, 18442, 18410, 18378, 18346, 18314
   .short   18282, 18250, 18218, 18186, 18154, 18122, 18090, 18058, 18026, 17994, 17962, 17930, 17898, 17866, 17834, 17802
   .short   17770, 17738, 17706, 17674, 17642, 17610, 17578, 17546, 17514, 17482, 17450, 17418, 17386, 17354, 17322, 17290
   .short   17258, 17226, 17194, 17162, 17130, 17098, 17066, 17034, 17002, 16970, 16938, 16906, 16874, 16842, 16810, 16778
   .short   16746, 16714, 16682, 16650, 16618, 16586, 16554, 16522, 16490, 16458, 16426, 16394, 16362, 16330, 16298, 16266
   .short   16234, 16202, 16170, 16138, 16106, 16074, 16042, 16010, 15978, 15946, 15914, 15882, 15850, 15818, 15786, 15754
   .short   15722, 15690, 15658, 15626, 15594, 15562, 15530, 15498, 15466, 15434, 15402, 15370, 15338, 15306, 15274, 15242
   .short   15210, 15178, 15146, 15114, 15082, 15050, 15018, 14986, 14954, 14922, 14890, 14858, 14826, 14794, 14762, 14730
   .short   14698, 14666, 14634, 14602, 14570, 14538, 14506, 14474, 14442, 14410, 14378, 14346, 14314, 14282, 14250, 14218
   .short   14186, 14154, 14122, 14090, 14058, 14026, 13994, 13962, 13930, 13898, 13866, 13834, 13802, 13770, 13738, 13706
   .short   13674, 13642, 13610, 13578, 13546, 13514, 13482, 13450, 13418, 13386, 13354, 13322, 13290, 13258, 13226, 13194
   .short   13162, 13130, 13098, 13066, 13034, 13002, 12970, 12938, 12906, 12874, 12842, 12810, 12778, 10482, 11112, 11080
   .short   15403, 15371, 15339, 15307, 15275, 15243, 15211, 15179, 15147, 15115, 15083, 15051, 15019, 14987, 14955, 14923
   .short   14891, 14859, 14827, 14795, 14763, 14731, 14699, 14667, 14635, 14603, 14571, 14539, 14507, 14475, 14443, 14411
   .short   14379, 14347, 14315, 14283, 14251, 14219, 14187, 14155, 14123, 14091, 14059, 14027, 13995, 13963, 13931, 13899
   .short   13867, 13835, 13803, 13771, 13739, 13707, 13675, 13643, 13611, 13579, 13547, 13515, 13483, 13451, 13419, 13387
   .short   13387, 13355, 13323, 13291, 13259, 13227, 13195, 13163, 13131, 13099, 13067, 13035, 13003, 12971, 12939, 12907
   .short   12875, 12843, 12811, 12779, 12747, 12715, 12683, 12651, 12619, 12587, 12555, 12523, 12491, 12459, 12427, 12395
   .short   12363, 12331, 12299, 12267, 12235, 12203, 12171, 12139, 12107, 12075, 12043, 12011, 11979, 11947, 11915, 11883
   .short   11851, 11819, 11787, 11755, 11723, 11691, 11659, 11627, 11595, 11563, 11531, 11499, 11467, 11435, 11403, 11371
   .short   11339, 11307, 11275, 11243, 11211, 11179, 11147, 11115, 11083, 11051, 11019, 10987, 10955, 10923, 10891, 10859
   .short   10827, 10795, 10763, 10731, 10699, 10667, 10635, 10603, 10571, 10539, 10507, 10475, 10443, 10411, 10379, 10347
   .short   10315, 10283, 10251, 10219, 10187, 10155, 10123, 10091, 10059, 10027, 9995, 9963, 9931, 9899, 9867, 9835
   .short   9803, 9771, 9739, 9707, 9675, 9643, 9611, 9579, 9547, 9515, 9483, 9451, 9419, 9387, 9355, 9323
   .short   9291, 9259, 9227, 9195, 9163, 9131, 9099, 9067, 9035, 9003, 8971, 8939, 8907, 8875, 8843, 8811
   .short   8779, 8747, 8715, 8683, 8651, 8619, 8587, 8555, 8523, 8491, 8459, 8427, 8395, 8363, 8331, 8299
   .short   8267, 8235, 8203, 8171, 8139, 8107, 8075, 8043, 8011, 7979, 7947, 7915, 7883, 7851, 7819, 7787
   .short   7755, 7723, 7691, 7659, 7627, 7595, 7563, 7531, 7499, 7467, 7435, 7403, 7371, 7339, 7307, 7275
   .short   7243, 7211, 7179, 7147, 7115, 7083, 7051, 7019, 4202, 4170, 4138, 4106, 4074, 4042, 4010, 3978
   .short   3946, 1640, 2280, 2248, 2216, 2184, 2152, 2120, 2007, 6475, 1974, 3356, 3324, 3250, 3241, 3228
   .short   3196, 3164, 3132, 3100, 3068, 3036, 3004, 2972, 2940, 2910, 2860, 2844, 2744, 2780, 2716, 706
   .short   1320, 5739, 5735, 1023, 2556, 2524, 2492, 1625, 3000, 5543, 4038, 448, 433, 2507, 2092, 4741
CaseData:
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 16000, 16000, 12289, 12418, 16000, 16000, 16000, 16000, 16000, 16000
   .short   14981, 14981, 16000, 16000, 16000, 14981, 14981, 14981, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 16000, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 23432, 23432, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 20888, 16000, 16000, 16000, 16000, 17926, 16000, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 16000, 16000
   .short   16000, 16000, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994
   .short   20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994, 20994
   .short   20994, 11906, 16000, 20888, 10772, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 18054, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 6683, 6683, 16000, 16000, 16000, 16000, 17796, 16000, 16000, 16000, 664
   .short   16000, 664, 26133, 26262, 664, 6807, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   17796, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 17796
   .short   17796, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 17796
   .short   17796, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 6683, 11906
   .short   29314, 11906, 16000, 11906, 18690, 29825, 29825, 29825, 29825, 29571, 6683, 6683, 6683, 28034, 28034, 18690
   .short   18690, 16000, 16000, 11906, 18690, 28161, 28161, 29953, 29953, 16000, 6683, 6683, 6683, 6914, 7042, 7170
   .short   7298, 7426, 7554, 7682, 7810, 7938, 8066, 8194, 8322, 8450, 8578, 8706, 8834, 8962, 9090, 9218
   .short   9346, 9474, 9602, 9730, 9858, 9986, 10114, 1109, 3225, 1238, 3225, 15, 15, 15, 15, 15
   .short   271, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
   .short   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 143, 271, 143, 399, 271
   .short   15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 271, 271
   .short   271, 143, 524, 664, 664, 792, 922, 792, 664, 664, 1109, 1238, 664, 1305, 1432, 1556
   .short   1432, 1688, 1801, 1929, 2057, 2185, 2313, 2441, 2569, 2697, 2825, 2953, 1432, 664, 3161, 3225
   .short   3161, 664, 3329, 3457, 3585, 3713, 3841, 3969, 4097, 4225, 4353, 4481, 4609, 4737, 4865, 4993
   .short   5121, 5249, 5377, 5505, 5633, 5761, 5889, 6017, 6145, 6273, 6401, 6529, 1109, 664, 1238, 6683
   .short   6807, 664, 664, 664, 3225, 1109, 1238, 16000, 664, 664, 664, 664, 664, 664, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   10284, 664, 922, 922, 922, 922, 10396, 10396, 6683, 10396, 10498, 10717, 3225, 10772, 10396, 6683
   .short   10908, 1305, 11019, 11147, 6683, 11266, 10396, 664, 6683, 11403, 10498, 11614, 11659, 11659, 11659, 664
   .short   664, 1305, 1556, 3225, 3225, 3225, 16000, 664, 922, 792, 664, 16000, 16000, 16000, 16000, 21509
   .short   21509, 21509, 16000, 21509, 16000, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 16000, 20508, 20508, 20353, 20353, 20353, 20353, 20353, 20353, 20353, 20353
   .short   20353, 20353, 20353, 20353, 20353, 20353, 20353, 20353, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777
   .short   11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 3225
   .short   11777, 11777, 11777, 11777, 11777, 11777, 11777, 11906, 11906, 11906, 18690, 18690, 11906, 11906, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 11906, 11906, 11906, 11906, 11906, 16000
   .short   16000, 16000, 16000, 16000, 21253, 17926, 21253, 21253, 16000, 21253, 21253, 16000, 21253, 21253, 21253, 21253
   .short   21253, 21253, 21253, 21253, 21253, 21253, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21400, 21509, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 20615, 20615, 17926, 20615, 20615, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 11659, 11659, 11659, 11659, 11659, 11659, 11659, 11659
   .short   11659, 11659, 11659, 11659, 33803, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 11906, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 16000
   .short   16000, 16000, 16000, 16000, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 17926
   .short   17926, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 6683
   .short   6683, 18177, 664, 18305, 18305, 18305, 16000, 18433, 16000, 18561, 18561, 18690, 11777, 11777, 11777, 11777
   .short   11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 12034, 12034, 12034, 12034
   .short   12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034
   .short   12034, 12034, 12034, 3225, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12162, 12034, 12034, 19074, 12034
   .short   12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 19202, 19330, 19330, 16000, 19458, 19586, 19713, 19713
   .short   19713, 19842, 19970, 10498, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 11906, 15233, 15363, 15490, 12289, 12418, 15745, 15873, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12545, 12674
   .short   12289, 12418, 12289, 12418, 12289, 12418, 10498, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 20098, 20226, 15618, 10498, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 23312, 23312, 23312, 23312, 23312, 23312, 32523, 16000, 16000
   .short   16000, 32651, 32779, 32907, 33035, 33163, 33291, 1305, 1305, 3225, 1109, 1238, 10498, 13057, 12289, 12418
   .short   12289, 12418, 13185, 12289, 12418, 13313, 13313, 12289, 12418, 10498, 13441, 13569, 13697, 12289, 12418, 13313
   .short   13825, 13954, 14081, 14209, 12289, 12418, 10498, 10498, 14081, 14337, 10498, 14465, 14981, 14981, 14981, 14981
   .short   15233, 15363, 15490, 15233, 15363, 15490, 15233, 15363, 15490, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 15618, 12289, 12418, 20508, 17926, 17926, 17926
   .short   17926, 16000, 20615, 20615, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12801, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12930, 12289, 12418, 12289, 12418, 12289, 12418, 14593, 12289, 12418, 14593
   .short   10498, 10498, 12289, 12418, 14593, 12289, 12418, 14721, 14721, 12289, 12418, 12289, 12418, 14849, 12289, 12418
   .short   10498, 14981, 12289, 12418, 10498, 15106, 19713, 12289, 12418, 12289, 12418, 16000, 16000, 12289, 12418, 16000
   .short   16000, 12289, 12418, 16000, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418
   .short   12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 1432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 21400, 16000, 16000, 16000, 21400, 21400, 21400, 21400, 21400, 21400, 21400, 21400, 21400
   .short   21400, 21400, 21400, 21400, 21400, 16000, 23312, 21509, 17926, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 16000, 16000, 23312, 19713, 19713, 19713, 19713, 19713, 19713, 19713
   .short   19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713
   .short   19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 19713, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000
   .short   14981, 16000, 16000, 16000, 16000, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 10498, 10498, 10498, 16130, 16258, 10498, 16386, 16386, 10498, 16514
   .short   10498, 16642, 10498, 10498, 10498, 10498, 16386, 10498, 10498, 16770, 10498, 10498, 10498, 10498, 16898, 17026
   .short   10498, 10498, 10498, 10498, 10498, 17026, 10498, 10498, 17154, 10498, 10498, 17282, 10498, 10498, 10498, 10498
   .short   10498, 10498, 10498, 10498, 10498, 10498, 17410, 10498, 10498, 17410, 10498, 10498, 10498, 10498, 17410, 10498
   .short   17538, 17538, 10498, 10498, 10498, 10498, 10498, 10498, 17666, 10498, 10498, 10498, 10498, 10498, 10498, 10498
   .short   10498, 10498, 10498, 10498, 10498, 10498, 10498, 16000, 16000, 17796, 17796, 17796, 17796, 17796, 17796, 17796
   .short   17796, 17796, 6683, 6683, 17796, 17796, 17796, 17796, 17796, 6683, 6683, 6683, 6683, 6683, 6683, 6683
   .short   6683, 6683, 17796, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737
   .short   20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 20737, 16000, 16000, 17796, 20888, 20888
   .short   20888, 20888, 20888, 20888, 11777, 11777, 16000, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777, 11777
   .short   18818, 18946, 18946, 18946, 18690, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034, 12034
   .short   12034, 12034, 12034, 12034, 12034, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226, 20226
   .short   20226, 20226, 20226, 20226, 20226, 17926, 17926, 17926, 17926, 17926, 20888, 17926, 17926, 14981, 14981, 14981
   .short   14981, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 16000, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 16000, 17926, 17926, 17926, 21144, 17926, 17926, 21144, 17926, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 21253, 21253, 21253, 21253, 21253, 21253, 21253
   .short   21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 16000, 16000, 16000, 16000, 16000, 21253, 21253
   .short   21253, 21144, 21144, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23689, 23817
   .short   23945, 24073, 24201, 24329, 24457, 24585, 24713, 25611, 25739, 25867, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 16000, 16000, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 14981, 14981
   .short   16000, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 16000
   .short   16000, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   23432, 23432, 23432, 23432, 16000, 17926, 17926, 17926, 16000, 17926, 17926, 17926, 17926, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926
   .short   23432, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 16000
   .short   16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000
   .short   16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 23432, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 16000, 16000, 16000, 16000, 23561, 23689, 23817
   .short   23945, 24073, 24201, 24329, 24457, 24585, 24713, 20508, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 21769, 21897, 22025, 22153, 22281, 22409, 22537, 22665, 22793
   .short   22921, 792, 23064, 23064, 21400, 16000, 16000, 17926, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 16000, 16000, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 26133, 26262, 21636, 21509
   .short   21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 21509, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23432, 23432, 20888, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 23432, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 14981, 16000, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 20888, 20888, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926, 21636, 21636
   .short   17926, 17926, 10396, 17926, 17926, 17926, 17926, 16000, 16000, 1801, 1929, 2057, 2185, 2313, 2441, 2569
   .short   2697, 2825, 2953, 21509, 21509, 21509, 23196, 23196, 16000, 14981, 14981, 14981, 16000, 14981, 16000, 14981
   .short   16000, 16000, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 17926, 14981, 14981, 17926, 17926, 17926, 17926
   .short   17926, 17926, 16000, 17926, 17926, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 17926, 17926, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 17926, 14981, 23432, 23432
   .short   23432, 23432, 23432, 16000, 17926, 23432, 23432, 16000, 23432, 23432, 17926, 17926, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 23432, 23432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 16000, 20888, 20888
   .short   20888, 20888, 20888, 20888, 20888, 20888, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 25611
   .short   26379, 26507, 26635, 26763, 26891, 27019, 27147, 27275, 25739, 27403, 16000, 16000, 16000, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981
   .short   14981, 16000, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 17926, 14981, 23432, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 23432, 23432, 23432, 23432, 17926, 16000, 16000, 14981, 17926, 17926, 17926, 17926
   .short   16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 16000, 14981, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 17926
   .short   16000, 23432, 23432, 23432, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 16000, 14981, 14981, 14981, 14981, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 17926, 14981, 14981, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 922, 922, 922, 922, 922, 922, 922
   .short   922, 922, 922, 922, 922, 922, 922, 922, 922, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 17926, 17926, 20888, 20888, 23561
   .short   23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 20888, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 664, 664, 792, 922, 792, 664, 664
   .short   26133, 26262, 664, 1305, 1432, 1556, 1432, 1688, 1801, 1929, 2057, 2185, 2313, 2441, 2569, 2697
   .short   2825, 2953, 1432, 664, 3225, 3225, 3225, 664, 664, 664, 664, 664, 664, 10772, 664, 664
   .short   664, 664, 23312, 23312, 23312, 23312, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585
   .short   24713, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981
   .short   14981, 16000, 16000, 16000, 16000, 23432, 17926, 17926, 17926, 17926, 16000, 16000, 23432, 23432, 16000, 16000
   .short   23432, 23432, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23432, 16000, 16000, 16000
   .short   16000, 14981, 14981, 16000, 14981, 16000, 16000, 14981, 14981, 16000, 14981, 16000, 16000, 14981, 16000, 16000
   .short   16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 16000, 14981, 14981
   .short   16000, 14981, 14981, 16000, 16000, 17926, 16000, 23432, 23432, 17926, 17926, 16000, 16000, 16000, 16000, 17926
   .short   17926, 16000, 16000, 17926, 17926, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 14981, 14981, 14981, 14981, 16000, 14981, 16000, 14981, 14981, 17926, 17926, 16000, 16000, 23561, 23689
   .short   23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 14981, 14981, 922, 922, 24843, 24971, 25099, 25227
   .short   25355, 25483, 20508, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 16000, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 17926, 14981, 23432, 23432, 17926, 17926, 17926, 17926, 17926, 16000, 17926, 17926
   .short   23432, 16000, 23432, 23432, 17926, 16000, 16000, 14981, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585
   .short   24713, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 25355, 20508, 17926, 20508, 17926, 20508
   .short   17926, 26133, 26262, 26133, 26262, 23432, 23432, 17926, 17926, 17926, 16000, 16000, 16000, 23432, 23432, 16000
   .short   16000, 23432, 23432, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 23432, 16000, 16000
   .short   16000, 16000, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 16000, 23432, 17926
   .short   17926, 17926, 17926, 23432, 17926, 16000, 16000, 16000, 17926, 17926, 23432, 17926, 16000, 16000, 16000, 16000
   .short   16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 23432, 23432, 23432, 17926, 17926, 17926, 17926, 17926, 17926, 17926
   .short   23432, 23432, 16000, 16000, 16000, 23432, 23432, 23432, 16000, 23432, 23432, 23432, 17926, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 23432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981
   .short   14981, 14981, 14981, 14981, 16000, 17796, 16000, 17926, 17926, 17926, 17926, 17926, 17926, 16000, 16000, 23561
   .short   23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 16000, 16000, 14981, 14981, 16000, 16000, 16000
   .short   16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 17926, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 20615, 20615, 20615, 23432, 17926, 17926, 17926, 16000
   .short   16000, 23432, 23432, 23432, 16000, 23432, 23432, 23432, 17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 23432, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 17926, 16000, 16000, 16000, 16000, 23432, 23432, 23432, 17926, 17926, 17926
   .short   16000, 17926, 16000, 23432, 23432, 23432, 23432, 23432, 23432, 23432, 23432, 17926, 23432, 23432, 17926, 17926
   .short   17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 17926, 20888, 20888, 20888, 20888, 20888, 20888, 20888
   .short   922, 20888, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 17796, 17926, 17926, 17926, 17926
   .short   17926, 17926, 17926, 17926, 20888, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585, 24713, 20888
   .short   20888, 16000, 16000, 16000, 16000, 14981, 20508, 20508, 20508, 20888, 20888, 20888, 20888, 20888, 20888, 20888
   .short   20888, 26040, 20888, 20888, 20888, 20888, 20888, 20888, 20508, 20508, 20508, 20508, 20508, 17926, 17926, 20508
   .short   20508, 20508, 20508, 20508, 20508, 17926, 20508, 20508, 20508, 20508, 20508, 20508, 16000, 16000, 20508, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 6807, 17796, 17796, 17796, 16000, 23561, 23689, 23817, 23945, 24073, 24201, 24329, 24457, 24585
   .short   24713, 20888, 20888, 20888, 20888, 20888, 20888, 14981, 14981, 14981, 14981, 14981, 14981, 23432, 23432, 17926
   .short   17926, 16000, 16000, 16000, 16000, 16000, 16000, 524, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 26133, 26262, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 20888, 20888, 20888, 27531, 27659, 27787, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   17926, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289
   .short   12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 12289, 12418, 11906, 11906, 11906
   .short   11906, 11906, 27906, 16000, 16000, 16000, 16000, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28161
   .short   28161, 28161, 28161, 28161, 28161, 28161, 28161, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28161
   .short   28161, 28161, 28161, 28161, 28161, 28161, 28161, 28034, 28034, 28034, 28034, 28034, 28034, 16000, 16000, 28161
   .short   28161, 28161, 28161, 28161, 28161, 16000, 16000, 11906, 28034, 18690, 28034, 18690, 28034, 18690, 28034, 16000
   .short   28161, 16000, 28161, 16000, 28161, 16000, 28161, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28034, 28161
   .short   28161, 28161, 28161, 28161, 28161, 28161, 28161, 28290, 28290, 28418, 28418, 28418, 28418, 28546, 28546, 28674
   .short   28674, 28802, 28802, 28930, 28930, 16000, 16000, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29187
   .short   29187, 29187, 29187, 29187, 29187, 29187, 29187, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29058, 29187
   .short   29187, 29187, 29187, 29187, 29187, 29187, 29187, 28034, 28034, 11906, 29314, 11906, 16000, 11906, 18690, 28161
   .short   28161, 29441, 29441, 29571, 6683, 29698, 6683, 6914, 7042, 7170, 7298, 7426, 7554, 7682, 7810, 7938
   .short   8066, 8194, 8322, 8450, 8578, 8706, 8834, 8962, 9090, 9218, 9346, 9474, 9602, 9730, 9858, 9986
   .short   10114, 26133, 3225, 26262, 3225, 16000, 28034, 28034, 18690, 18690, 11906, 30082, 11906, 18690, 28161, 28161
   .short   30209, 30209, 30337, 6683, 6683, 6683, 16000, 16000, 11906, 29314, 11906, 16000, 11906, 18690, 30465, 30465
   .short   30593, 30593, 29571, 6683, 6683, 16000, 524, 524, 524, 524, 524, 524, 524, 30764, 524, 524
   .short   524, 30860, 23312, 23312, 30992, 31120, 10772, 31284, 10772, 10772, 10772, 10772, 664, 664, 31389, 31518
   .short   26133, 31389, 31389, 31518, 26133, 31389, 664, 664, 664, 664, 664, 664, 664, 664, 31629, 31758
   .short   31888, 32016, 32144, 32272, 32400, 30764, 792, 792, 792, 792, 792, 664, 664, 664, 664, 10717
   .short   11614, 664, 664, 664, 664, 6807, 32523, 11403, 11019, 11147, 32651, 32779, 32907, 33035, 33163, 33291
   .short   1305, 1305, 3225, 1109, 1238, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 16000, 16000, 16000, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 19713, 10396, 10396, 10396, 10396, 19713, 10396, 10396, 10498, 19713
   .short   19713, 19713, 10498, 10498, 19713, 19713, 19713, 10498, 10396, 19713, 10396, 10396, 10396, 19713, 19713, 19713
   .short   19713, 19713, 10396, 10396, 41482, 41610, 41738, 41866, 41994, 42122, 42250, 42378, 42506, 17926, 17926, 17926
   .short   17926, 17926, 17926, 10772, 17796, 17796, 17796, 17796, 17796, 10396, 10396, 42634, 42762, 42890, 16000, 16000
   .short   16000, 10396, 10396, 10396, 10396, 16000, 10396, 10396, 10396, 10396, 16000, 16000, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 3225, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 3225, 3225, 10396, 10396, 3225, 10396, 3225, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 3225, 10396, 10396, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 38026, 38154, 38282, 38410, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 3225, 3225, 3225, 3225, 3225, 10396, 10396
   .short   10396, 10396, 10396, 3225, 3225, 10396, 10396, 10396, 10396, 19713, 10396, 33409, 10396, 19713, 10396, 33537
   .short   33665, 19713, 19713, 10908, 10498, 19713, 19713, 10396, 19713, 10498, 14981, 14981, 14981, 14981, 10498, 10396
   .short   16000, 16000, 16000, 16000, 16000, 33930, 34058, 34186, 34314, 34442, 34570, 34698, 34826, 34954, 35082, 35210
   .short   35338, 35466, 35594, 35722, 35850, 35978, 36106, 36234, 36362, 36490, 36618, 36746, 36874, 37002, 37130, 37258
   .short   37386, 37514, 37642, 37770, 37898, 3225, 3225, 3161, 3161, 3225, 3225, 3161, 3161, 3161, 3161, 3161
   .short   3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225
   .short   3225, 3225, 3225, 3161, 3161, 3161, 3161, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225
   .short   3161, 3161, 3161, 3161, 3161, 3225, 3225, 3161, 3161, 3225, 3225, 3225, 3225, 3161, 3161, 3161
   .short   3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225, 3161, 3161, 3161, 3161
   .short   3225, 3225, 3225, 3225, 3225, 3161, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 10396, 10396, 3225
   .short   10396, 10396, 3225, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 3225, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 3225, 3161, 3161
   .short   3161, 3161, 3225, 3225, 3225, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225, 3225, 3161, 1305
   .short   1305, 3225, 3161, 3161, 3225, 3225, 3225, 3161, 3161, 3161, 3161, 3225, 3161, 3225, 3161, 3225
   .short   3225, 3225, 3225, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225, 3225, 3225, 3225
   .short   3225, 3161, 3225, 3161, 3161, 3161, 3161, 3161, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 1109
   .short   1238, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 16000, 16000, 16000, 16000, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 39964, 39964, 39964
   .short   39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 39964, 40092, 40092, 40092
   .short   40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 40092, 32523, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 3161, 3225, 3161, 3225, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3225
   .short   3225, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161
   .short   3161, 3161, 3161, 3225, 3225, 3161, 3161, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 922, 922, 3225, 6683, 10396, 922, 922, 16000, 10396, 3225, 3225
   .short   3225, 3225, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 23312, 23312
   .short   23312, 10396, 10396, 16000, 16000, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 16000, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 16000, 10396, 16000, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 10396, 16000
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 33803, 40203, 40331, 40459, 40587, 40715, 40843, 40971, 41099, 41227, 33803
   .short   40203, 40331, 40459, 40587, 40715, 40843, 40971, 41099, 41227, 10396, 16000, 16000, 16000, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 3161, 3161, 3161, 3161, 10396, 10396, 10396, 10396, 10396, 10396, 10396
   .short   10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 10396, 20508, 10396
   .short   10396, 10396, 10396, 10396, 16000, 16000, 16000, 16000, 16000, 25355, 25355, 25355, 25355, 25355, 25355, 25355
   .short   25355, 25355, 25355, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 16000, 16000, 16000, 20508, 24843, 24971, 25099, 25227, 43019, 43147, 43275, 43403, 43531
   .short   25611, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 10396, 16000, 10396, 10396
   .short   10396, 16000, 10396, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 11403, 11019, 11147, 32651
   .short   32779, 32907, 33035, 33163, 33291, 38539, 38667, 38795, 38923, 39051, 39179, 39307, 39435, 39563, 39691, 39819
   .short   11403, 11019, 11147, 32651, 32779, 32907, 33035, 33163, 33291, 38539, 38667, 38795, 38923, 39051, 39179, 39307
   .short   39435, 39563, 39691, 39819, 20508, 20508, 20508, 20508, 524, 664, 664, 664, 10396, 17796, 14981, 41354
   .short   1109, 1238, 1109, 1238, 1109, 1238, 1109, 1238, 1109, 1238, 10396, 10396, 1109, 1238, 1109, 1238
   .short   1109, 1238, 1109, 1238, 10772, 26133, 26262, 26262, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 16000, 16000
   .short   16000, 17926, 17926, 6683, 6683, 17796, 17796, 16000, 14981, 14981, 14981, 14981, 14981, 14981, 14981, 14981
   .short   14981, 14981, 14981, 14981, 14981, 14981, 14981, 16000, 20508, 20508, 25355, 25355, 25355, 25355, 20508, 20508
   .short   20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 20508, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 43667, 43667, 43667, 43667, 43667
   .short   43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667
   .short   43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43667, 43794, 43794, 43794, 43794, 43794
   .short   43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794
   .short   43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 43794, 21253, 21253, 21253, 21253, 21253
   .short   21253, 21253, 21253, 21253, 1305, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253, 21253
   .short   21253, 21253, 16000, 21253, 21253, 21253, 21253, 21253, 16000, 21253, 16000, 17926, 17926, 17926, 17926, 16000
   .short   16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 664, 10772, 10772, 6807, 6807
   .short   26133, 26262, 26133, 26262, 26133, 26262, 26133, 26262, 26133, 26262, 26133, 26262, 16000, 16000, 16000, 16000
   .short   664, 664, 664, 664, 6807, 6807, 6807, 1432, 664, 1432, 16000, 664, 1432, 664, 664, 10772
   .short   26133, 26262, 26133, 26262, 26133, 26262, 792, 664, 3329, 3457, 3585, 3713, 3841, 3969, 4097, 4225
   .short   4353, 4481, 4609, 4737, 4865, 4993, 5121, 5249, 5377, 5505, 5633, 5761, 5889, 6017, 6145, 6273
   .short   6401, 6529, 26133, 664, 26262, 6683, 6807
CaseUpper:
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504
   .short   65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504, 65504
   .short   0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 65504, 121
   .short   0, 65535, 0, 65304, 0, 65236, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0
   .short   0, 0, 0, 0, 0, 0, 56, 0, 65535, 65534, 65457, 0, 0, 0, 65326, 65330
   .short   65331, 65334, 65333, 65329, 65327, 65325, 65323, 65322, 65318, 65319, 65317, 0, 0, 84, 0, 0
   .short   0, 0, 0, 65498, 65499, 65505, 65472, 65473, 65474, 65479, 0, 65489, 65482, 65450, 65456, 0
   .short   0, 0, 0, 0, 65488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65477, 8, 0, 74, 86, 100
   .short   128, 112, 126, 8, 0, 9, 0, 0, 58331, 0, 0, 7, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 65520, 65520, 65520, 65520, 65520, 65520, 65520
   .short   65520, 65520, 65520, 65520, 65520, 65520, 65520, 65520, 65520, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 65510, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0
CaseLower:
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32
   .short   32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
   .short   32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0
   .short   1, 0, 65337, 0, 65415, 0, 210, 206, 205, 79, 202, 203, 207, 0, 211, 209
   .short   213, 214, 218, 217, 219, 0, 0, 2, 1, 0, 0, 65439, 65480, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 37
   .short   64, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80
   .short   0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65528, 0, 0, 0
   .short   0, 0, 0, 0, 65528, 0, 65462, 65527, 0, 65450, 65436, 0, 65424, 65529, 65408, 65410
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 58019, 57153, 57274, 0, 16, 16, 16, 16, 16, 16, 16
   .short   16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   .short   0, 0, 0, 0, 0, 0, 0

   .text

   .balign  16
   .globl  Ret
Ret:
   rep
   ret

   .balign  16
   .globl  Retc
Retc:
   stc
   ret

   .balign  16
   .globl  Retnc
Retnc:
   clc
   ret

   .balign  16
   .globl  Retz
Retz:
   or       %r12, %r12
   ret

   .balign  16
   .globl  Retnz
Retnz:
   cmp      %rsp, %r12
   ret

   .balign  16
   .globl  RetNil
RetNil:
   mov      $Nil, %rbx
   ret

   .balign  16
   .globl  RetT
RetT:
   mov      $TSym, %rbx
   ret

   .balign  16
   .globl  RetE_E
RetE_E:
   mov      (%rbx), %rbx
   ret

   .globl  main
main:
   xor      %r12, %r12
   mov      (%rsi), %r10
   mov      %r10, AV0
   lea      8(%rsi), %r10
   mov      %r10, AV
   mov      AV, %r13
.1:
   mov      (%r13), %r14
   cmp      %r12, %r14
   jz       .2
   mov      (%r14), %al
   cmp      $45, %al
   jz       .3
   mov      %r14, %r15
   mov      $47, %al
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %r14, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   cld
   mov      %r15, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %r15
   cmovzq   %rcx, %rdx
   jnz      .2
.5:
   cld
   mov      %r15, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %r15
   cmovzq   %rcx, %rdx
   jz       .5
   mov      %r15, %rax
   sub      $2, %rax
   cmp      %r14, %rax
   jnz      main_10
   mov      (%r14), %al
   cmp      $46, %al
   jz       .2
main_10:
   sub      %r14, %r15
   mov      %r15, %rdx
   inc      %rdx
   call     allocC_A
   mov      %rax, Home
   mov      %rax, %rdi
   mov      %r14, %rsi
   mov      %r15, %rcx
   cld
   rep movsb
   add      Home, %r15
   mov      %r12b, (%r15)
   jmp      .2
.3:
   add      $8, %r13
   jmp      .1
.2:
   mov      %rdx, %r12
   call     getpid
   mov      %r12, %rdx
   xor      %r12, %r12
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, Pid
   mov      %rsp, Stack0
   lea      -4190208(%rsp), %r10
   mov      %r10, StkLimit
   mov      %r12, %rbp
   call     heapAlloc
   mov      $Nil, %rbx
   lea      32(%rbx), %r15
.7:
   mov      -8(%rbx), %r13
   mov      $Intern, %r14
   call     internEXY_FE
   mov      %r15, %rbx
   testb    $0x02, -8(%r15)
   jz       .8
   add      $16, %r15
   jmp      .9
.8:
   add      $32, %r15
.9:
   cmp      $SymTabEnd, %rbx
   jbe      .7
   movq     $getStdin_A, Get_A
   mov      %r12, %rax
   call     initInFileA_A
   mov      %rax, InFile
   movq     $putStdoutB, PutB
   mov      $2, %rax
   call     initOutFileA_A
   mov      $1, %rax
   call     initOutFileA_A
   mov      %rax, OutFile
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      $OrgTermio, %rsi
   call     tcgetattr
   mov      %r12, %rdx
   xor      %r12, %r12
   not      %al
   mov      %al, Tio
   sub      $128, %rsp
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     sigfillset
   mov      $1, %rdi
   mov      %rsp, %rsi
   xor      %rdx, %rdx
   call     sigprocmask
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $128, %rsp
   mov      $sig, %rbx
   mov      $1, %rdx
   call     iSignalCE
   mov      $10, %rdx
   call     iSignalCE
   mov      $12, %rdx
   call     iSignalCE
   mov      $14, %rdx
   call     iSignalCE
   mov      $15, %rdx
   call     iSignalCE
   mov      $29, %rdx
   call     iSignalCE
   mov      $sigTerm, %rbx
   mov      $2, %rdx
   call     iSignalCE
   mov      $sigChld, %rbx
   mov      $17, %rdx
   call     iSignalCE
   mov      %rdx, %r12
   mov      $17, %rdi
   mov      $sigChld, %rsi
   call     signal
   mov      $13, %rdi
   mov      $1, %rsi
   call     signal
   mov      $21, %rdi
   mov      $1, %rsi
   call     signal
   mov      $22, %rdi
   mov      $1, %rsi
   call     signal
   mov      $Buf, %rdi
   xor      %rsi, %rsi
   call     gettimeofday
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Buf, %rax
   mov      $1000000, %r10
   mul      %r10
   add      Buf+8, %rax
   mov      %rax, USec
   mov      %r12, %r13
   call     loadAllX_E
   mov      $sig, %rbx
   mov      $2, %rdx
   movb     $1, Repl
   call     iSignalCE

   .globl  restart
restart:
   mov      $58, %al
   mov      $Nil, %rbx
   mov      %r12, %r13
   call     loadBEX_E
   mov      %r12, %rbx

   .globl  byeE
byeE:
   cmp      %r12b, InBye
   jnz      .10
   movb     $1, InBye
   push     %rbx
   mov      %r12, %rdx
   call     unwindC_Z
   mov      Bye, %rbx
   call     execE
   pop      %rbx
.10:
   call     flushAll

   .globl  finishE
finishE:
   call     setCooked
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     exit
   mov      %r12, %rdx
   xor      %r12, %r12

   .globl  loadAllX_E
loadAllX_E:
.11:
   mov      AV, %r10
   mov      (%r10), %rbx
   cmp      %r12, %rbx
   jz       retNil
   mov      (%rbx), %al
   cmp      $45, %al
   jnz      .12
   cmp      %r12b, 1(%rbx)
   jz       retNil
.12:
   addq     $8, AV
   call     mkStrE_E
   mov      $0, %al
   call     loadBEX_E
   jmp      .11

   .globl  giveupX
giveupX:
   mov      Pid, %rax
   shr      $4, %rax
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $Giveup, %rsi
   mov      %rax, %rdx
   mov      %r13, %rcx
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $1, %rbx
   jmp      finishE
Giveup:
   .asciz   "%d %s\n"

   .globl  execErrS
execErrS:
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $ExecErr, %rsi
   mov      (%rsp), %rdx
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $127, %rbx
   jmp      finishE
ExecErr:
   .asciz   "%s: can't exec\n"

   .globl  iSignalCE
iSignalCE:
   sub      $304, %rsp
   mov      %rbx, 0(%rsp)
   mov      %rdx, %r12
   lea      8(%rsp), %rdi
   call     sigemptyset
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, 136(%rsp)
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %rsp, %rsi
   lea      152(%rsp), %rdx
   call     sigaction
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $304, %rsp
   ret

   .balign  16
   .globl  allocC_A
allocC_A:
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     malloc
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       NoMemory
   rep
   ret

   .balign  16
   .globl  allocAE_A
allocAE_A:
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      %rbx, %rsi
   call     realloc
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      Ret
NoMemory:
   mov      $Alloc, %r13
   jmp      giveupX
Alloc:
   .asciz   "No memory"

   .balign  16
   .globl  heapAlloc
heapAlloc:
   mov      %r12, %rax
   mov      $1048584, %rbx
   call     allocAE_A
   mov      %rax, %rbx
   mov      Heaps, %r10
   mov      %r10, 1048576(%rax)
   mov      %rax, Heaps
   add      $1048560, %rax
   mov      Avail, %r13
.13:
   mov      %r13, (%rax)
   mov      %rax, %r13
   sub      $16, %rax
   cmp      %rbx, %rax
   jnc      .13
   mov      %r13, Avail
   ret

   .globl  sighandler0
sighandler0:
   push     %rbx
   mov      %r12, %rbx
   call     sighandlerE
   pop      %rbx
   ret

   .globl  sighandlerX
sighandlerX:
   push     %rbx
   mov      %r13, %rbx
   call     sighandlerE
   pop      %rbx
   ret

   .globl  sighandlerE
sighandlerE:
   cmp      %r12, EnvProtect
   jnz      .14
   movq     $1, EnvProtect
   push     %rax
   push     %rdx
.15:
   cmp      %r12, Signal+232
   jz       .16
   decq     Signal
   decq     Signal+232
   mov      Sigio, %rbx
   call     execE
   jmp      .17
.16:
   cmp      %r12, Signal+80
   jz       .18
   decq     Signal
   decq     Signal+80
   mov      Sig1, %rbx
   call     execE
   jmp      .17
.18:
   cmp      %r12, Signal+96
   jz       .20
   decq     Signal
   decq     Signal+96
   mov      Sig2, %rbx
   call     execE
   jmp      .17
.20:
   cmp      %r12, Signal+112
   jz       .22
   decq     Signal
   decq     Signal+112
   mov      Alarm, %rbx
   call     execE
   jmp      .17
.22:
   cmp      %r12, Signal+16
   jz       .24
   decq     Signal
   decq     Signal+16
   cmp      %r12b, PRepl
   jnz      .17
   cmp      %r12, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   call     brkLoadE_E
   jmp      .17
.24:
   cmp      %r12, Signal+8
   jz       .27
   decq     Signal
   decq     Signal+8
   mov      Hup, %rbx
   call     execE
   jmp      .17
.27:
   cmp      %r12, Signal+120
   jz       .17
   push     %r13
   mov      Child, %r13
   mov      Children, %rdx
   mov      %r12, %rbx
.30:
   sub      $48, %rdx
   jc       .31
   cmp      %r12, (%r13)
   jz       .32
   mov      %rdx, %r12
   mov      (%r13), %rdi
   mov      $15, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $1, %r10
   cmovzq   %r10, %rbx
.32:
   add      $48, %r13
   jmp      .30
.31:
   pop      %r13
   cmp      %r12, %rbx
   jnz      .17
   mov      %r12, Signal
   mov      %r12, %rbx
   jmp      byeE
.17:
   cmp      %r12, Signal
   jnz      .15
   pop      %rdx
   pop      %rax
   mov      %r12, EnvProtect
.14:
   rep
   ret

   .globl  sig
sig:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   mov      %rdi, %rax
   cmp      %r12, TtyPid
   jz       .34
   mov      %rdx, %r12
   mov      TtyPid, %rdi
   mov      %rax, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .35
.34:
   shl      $3, %rax
   incq     Signal(%rax)
   incq     Signal
.35:
   pop      %r12
   pop      %rbx
   ret

   .globl  sigTerm
sigTerm:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   cmp      %r12, TtyPid
   jz       .36
   mov      %rdx, %r12
   mov      TtyPid, %rdi
   mov      $15, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .37
.36:
   incq     Signal+120
   incq     Signal
.37:
   pop      %r12
   pop      %rbx
   ret

   .globl  sigChld
sigChld:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   call     errno_A
   push     %rax
   sub      $8, %rsp
.38:
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      %rsp, %rsi
   mov      $1, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jle      .39
   mov      %rax, %rdx
   call     wifsignaledS_F
   jz       .38
   call     wtermsigS_A
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $PidSigMsg, %rsi
   mov      %r12, %rdx
   mov      %rax, %rcx
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .38
.39:
   add      $8, %rsp
   pop      %rdx
   call     errnoC
   pop      %r12
   pop      %rbx
   ret
PidSigMsg:
   .asciz   "%d SIG-%d\n"

   .globl  tcSetC
tcSetC:
   cmp      %r12, Termio
   jz       .41
.42:
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      $1, %rsi
   mov      %r12, %rdx
   call     tcsetattr
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .41
   call     errno_A
   cmp      $4, %rax
   jz       .42
.41:
   rep
   ret

   .globl  sigTermStop
sigTermStop:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   mov      $OrgTermio, %rdx
   call     tcSetC
   sub      $128, %rsp
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     sigemptyset
   mov      %rsp, %rdi
   mov      $20, %rsi
   call     sigaddset
   mov      $1, %rdi
   mov      %rsp, %rsi
   xor      %rdx, %rdx
   call     sigprocmask
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $128, %rsp
   mov      %rdx, %r12
   mov      $20, %rdi
   xor      %rsi, %rsi
   call     signal
   mov      $20, %rdi
   call     raise
   mov      $20, %rdi
   mov      $sigTermStop, %rsi
   call     signal
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Termio, %rdx
   call     tcSetC
   pop      %r12
   pop      %rbx
   ret

   .balign  16
   .globl  setRaw
setRaw:
   cmp      %r12b, Tio
   jz       .44
   cmp      %r12, Termio
   jnz      .44
   mov      $64, %rdx
   call     allocC_A
   mov      %rax, Termio
   mov      %rax, %rdx
   mov      %rdx, %rdi
   lea      OrgTermio, %rsi
   mov      $64, %rcx
   cld
   rep movsb
   mov      %r12, %rax
   mov      %eax, 0(%rdx)
   mov      $1, %rax
   mov      %eax, 12(%rdx)
   movb     $1, 23(%rdx)
   mov      %r12b, 22(%rdx)
   call     tcSetC
   mov      %rdx, %r12
   mov      $20, %rdi
   mov      $1, %rsi
   call     signal
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      .44
   mov      %rdx, %r12
   mov      $20, %rdi
   mov      $sigTermStop, %rsi
   call     signal
   mov      %r12, %rdx
   xor      %r12, %r12
.44:
   rep
   ret

   .balign  16
   .globl  setCooked
setCooked:
   mov      $OrgTermio, %rdx
   call     tcSetC
   mov      %rdx, %r12
   mov      Termio, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Termio
   ret

   .balign  16
   nop
   nop
   .globl  doRaw
doRaw:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .47
   cmp      %r12, Termio
   jnz      retT
   mov      $Nil, %rbx
   ret
.47:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .48
   call     setCooked
   mov      $Nil, %rbx
   ret
.48:
   call     setRaw
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doAlarm
doAlarm:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     alarm
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%r14), %r10
   mov      %r10, Alarm
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSigio
doSigio:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jz       .49
   mov      Sigio, %rbx
   jmp      .50
.49:
   call     evCntXY_FE
   mov      8(%r14), %r14
   mov      %r14, Sigio
   testb    $0x0E, %r14b
   jnz      .51
   mov      Pid, %rax
   shr      $4, %rax
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $8, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %rbx, %rdi
   mov      $3, %rsi
   xor      %rdx, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   or       $10240, %rax
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
.51:
   shl      $4, %rbx
   orb      $2, %bl
.50:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doProtect
doProtect:
   push     %r13
   mov      8(%rbx), %r13
   incq     EnvProtect
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   decq     EnvProtect
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doHeap
doHeap:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .52
   mov      $2, %rbx
   mov      Heaps, %rax
.53:
   add      $16, %rbx
   mov      1048576(%rax), %rax
   cmp      %r12, %rax
   jnz      .53
   rep
   ret
.52:
   mov      %r12, %rax
   mov      Avail, %rdx
.54:
   cmp      %r12, %rdx
   jz       .55
   inc      %rax
   mov      (%rdx), %rdx
   jmp      .54
.55:
   mov      $65536, %r10
   div      %r10
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .globl  doStack
doStack:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .56
   cmp      %r12, Stacks
   jnz      .56
   mov      (%rbx), %rbx
   call     evCntEX_FE
   shl      $20, %rbx
   mov      %rbx, StkSize
   mov      Stack0, %r10
   lea      4096(%r10), %rax
   sub      %rbx, %rax
   mov      %rax, StkLimit
   shr      $16, %rbx
   orb      $2, %bl
   pop      %r13
   ret
.56:
   mov      StkSize, %rbx
   shr      $16, %rbx
   orb      $2, %bl
   mov      Stack0, %r13
   mov      Stacks, %rdx
.58:
   sub      StkSize, %r13
   shr      $1, %rdx
   jnc      .59
   call     consE_A
   mov      -8(%r13), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   jmp      .58
.59:
   jnz      .58
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAdr
doAdr:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .60
   andb     $~2, %bl
   ret
.60:
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .globl  doEnv
doEnv:
   push     %r13
   mov      8(%rbx), %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %r13b
   jz       .70
   push     %r14
   mov      EnvBind, %r14
.62:
   cmp      %r12, %r14
   jz       .63
   mov      (%r14), %rdx
   cmp      %r12, -8(%r14)
   jnz      .64
   add      $8, %r14
.65:
   mov      (%r14), %rbx
   mov      8(%rbp), %r13
.66:
   testb    $0x0E, %r13b
   jz       .67
   call     cons_A
   mov      %rbx, (%rax)
   mov      (%rbx), %r10
   mov      %r10, 8(%rax)
   call     consA_X
   mov      %rax, (%r13)
   mov      8(%rbp), %r10
   mov      %r10, 8(%r13)
   mov      %r13, 8(%rbp)
   jmp      .68
.67:
   mov      (%r13), %r10
   cmp      (%r10), %rbx
   jz       .68
   mov      8(%r13), %r13
   jmp      .66
.68:
   add      $16, %r14
   cmp      %rdx, %r14
   jnz      .65
.64:
   mov      8(%rdx), %r14
   jmp      .62
.63:
   pop      %r14
   jmp      .69
.70:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 16(%rbp)
   testb    $0x0E, %bl
   jnz      .71
.72:
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      (%rbx), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%rbp)
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .72
   jmp      .73
.71:
   cmp      $Nil, %rbx
   jz       .73
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      16(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%rbp)
.73:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .70
.69:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doUp
doUp:
   push     %r13
   push     %r14
   push     %r15
   mov      $1, %rdx
   mov      8(%rbx), %rbx
   mov      (%rbx), %r13
   testb    $0x02, %r13b
   jz       .75
   mov      %r13, %rdx
   shr      $4, %rdx
   mov      8(%rbx), %rbx
   mov      (%rbx), %r13
.75:
   mov      8(%rbx), %rbx
   mov      EnvBind, %r14
   mov      %r13, %r15
.76:
   cmp      %r12, %r14
   jz       doUp_10
   mov      (%r14), %rax
   add      $8, %r14
.78:
   cmp      (%r14), %r13
   jnz      .79
   lea      8(%r14), %r15
   dec      %rdx
   jz       doUp_10
.79:
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .78
   mov      8(%rax), %r14
   jmp      .76
doUp_10:
   testb    $0x0E, %bl
   jz       .80
   mov      (%r15), %rbx
   jmp      .81
.80:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
.81:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  equalAE_F
equalAE_F:
   cmp      %rbx, %rax
   jz       ret
   testb    $0x02, %al
   jnz      ret
   testb    $0x04, %al
   jz       .82
   testb    $0x04, %bl
   jz       Retnz
   testb    $8, %al
   jz       .84
   testb    $8, %bl
   jz       Retnz
   andb     $~8, %al
   andb     $~8, %bl
.84:
   mov      -4(%rbx), %r10
   cmp      %r10, -4(%rax)
   jnz      .85
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   cmp      %rbx, %rax
   jz       .85
   testb    $0x02, %al
   jnz      .85
   testb    $0x02, %bl
   jz       .84
.85:
   rep
   ret
.82:
   testb    $0x08, %al
   jz       .86
   testb    $0x06, %bl
   jnz      Retnz
   testb    $0x08, %bl
   jz       Retnz
   mov      -8(%rax), %rax
   call     nameA_A
   cmpq     $2, %rax
   jz       retnz
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jz       retnz
   jmp      equalAE_F
.86:
   testb    $0x0E, %bl
   jnz      ret
.87:
   cmpq     $Quote, (%rax)
   jnz      .88
   cmpq     $Quote, (%rbx)
   jnz      ret
   cmp      8(%rax), %rax
   jnz      .89
   cmp      8(%rbx), %rbx
   ret
.89:
   cmp      8(%rbx), %rbx
   jz       retnz
   mov      8(%rax), %rax
   mov      8(%rbx), %rbx
   testb    $0x0E, %al
   jnz      equalAE_F
   testb    $0x0E, %bl
   jnz      ret
   jmp      .87
.88:
   push     %rax
   push     %rbx
.90:
   pushq    8(%rax)
   pushq    8(%rbx)
   mov      (%rax), %rax
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     equalAE_F
   pop      %rbx
   pop      %rax
   jnz      .91
   testb    $0x0E, %al
   jz       .92
   cmp      StkLimit, %rsp
   jc       stkErr
   call     equalAE_F
   jmp      .91
.92:
   testb    $0x0E, %bl
   jnz      .91
   cmp      8(%rsp), %rax
   jz       .91
   cmp      (%rsp), %rbx
   jnz      .90
.91:
   pop      %rax
   pop      %rax
   ret

   .balign  16
   .globl  compareAE_F
compareAE_F:
   cmp      %rbx, %rax
   jz       ret
   cmp      $Nil, %rax
   jnz      .93
compareAE_F_10:
   or       %al, %al
compareAE_F_20:
   stc
   ret
.93:
   cmp      $TSym, %rax
   jnz      .94
compareAE_F_30:
   or       %al, %al
compareAE_F_40:
   clc
   ret
.94:
   testb    $0x06, %al
   jz       .95
   testb    $0x06, %bl
   jnz      cmpNumAE_F
   cmp      $Nil, %rbx
   jz       compareAE_F_30
   stc
   ret
.95:
   testb    $0x08, %al
   jz       .96
   testb    $0x06, %bl
   jnz      compareAE_F_40
   cmp      $Nil, %rbx
   jz       compareAE_F_30
   testb    $0x0E, %bl
   jz       compareAE_F_10
   cmp      $TSym, %rbx
   jz       compareAE_F_10
   push     %r13
   mov      -8(%rax), %r13
   call     nameX_X
   cmpq     $2, %r13
   jnz      .97
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jnz      .98
   rol      $4, %al
   jmp      .99
.98:
   stc
.99:
   pop      %r13
   ret
.97:
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jnz      .101
compareAE_F_50:
   or       %al, %al
compareAE_F_60:
   clc
compareAE_F_70:
   pop      %r13
   ret
.101:
   testb    $0x02, %r13b
   jz       .102
   mov      %r13, %rax
   shr      $4, %rax
   mov      %r12, %r13
   jmp      .103
.102:
   mov      -4(%r13), %rax
   mov      4(%r13), %r13
.103:
   testb    $0x02, %bl
   jz       .104
   mov      %rbx, %rdx
   shr      $4, %rdx
   mov      %r12, %rbx
   jmp      .106
.104:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
.106:
   cmp      %dl, %al
   jnz      compareAE_F_70
   shr      $8, %rax
   jnz      .107
   shr      $8, %rdx
   jz       .108
   stc
   pop      %r13
   ret
.108:
   cmp      %r12, %r13
   jnz      .109
   cmp      %r12, %rbx
   jz       compareAE_F_70
   stc
   pop      %r13
   ret
.109:
   cmp      %r12, %rbx
   jz       compareAE_F_50
   jmp      .101
.107:
   shr      $8, %rdx
   jz       compareAE_F_50
   jmp      .106
.96:
   testb    $0x0E, %bl
   jz       .111
   cmp      $TSym, %rbx
   jnz      .112
   or       %al, %al
   stc
   ret
.112:
   clc
   ret
.111:
   push     %r13
   push     %r14
   mov      %rax, %r13
   mov      %rbx, %r14
.113:
   push     %rax
   push     %rbx
   mov      (%rax), %rax
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     compareAE_F
   pop      %rbx
   pop      %rax
   jnz      .114
   mov      8(%rax), %rax
   mov      8(%rbx), %rbx
   testb    $0x0E, %al
   jz       .115
   cmp      StkLimit, %rsp
   jc       stkErr
   call     compareAE_F
   jmp      .114
.115:
   testb    $0x0E, %bl
   jz       .116
   cmp      $TSym, %rbx
   jz       .117
   clc
   jmp      .114
.117:
   or       %al, %al
   stc
   jmp      .114
.116:
   cmp      %r13, %rax
   jnz      .113
   cmp      %r14, %rbx
   jnz      .113
.114:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  memberXY_FY
memberXY_FY:
   mov      %r14, %rdx
.119:
   testb    $0x0E, %r14b
   jnz      .120
   mov      %r13, %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jz       ret
   mov      8(%r14), %r14
   cmp      %r14, %rdx
   jz       retnz
   jmp      .119
.120:
   mov      %r13, %rax
   mov      %r14, %rbx
   jmp      equalAE_F

   .balign  16
   nop
   nop
   .globl  doQuit
doQuit:
   mov      8(%rbx), %r13
   call     evSymX_E
   call     bufStringE_SZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   cmovnzq  %r12, %rbx
   jnz      .121
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.121:
   mov      %r12, %r13
   mov      $QuitMsg, %r14
   mov      %rsp, %r15
   jmp      errEXYZ
QuitMsg:
   .asciz   "%s"

   .balign  16
   .globl  evExprCE_E
evExprCE_E:
   push     %r13
   push     %r14
   push     %r15
   cmp      StkLimit, %rsp
   jc       stkErrE
   mov      8(%rbx), %r13
   mov      (%rdx), %r14
   mov      8(%rdx), %r15
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
.122:
   testb    $0x0E, %r14b
   jnz      .123
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    (%r14)
   mov      8(%r14), %r14
   jmp      .122
.123:
   cmp      $Nil, %r14
   jnz      .124
   mov      %rsp, %r14
.125:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .125
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.126:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .126
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.124:
   cmp      $At, %r14
   jz       .127
   pushq    (%r14)
   push     %r14
   mov      %r13, (%r14)
   lea      16(%rsp), %r14
.128:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .128
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.129:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .129
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.127:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, %r14
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   testb    $0x0E, %r13b
   jz       .130
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .131
.130:
   push     %rbp
   mov      %rsp, %rbp
.132:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .132
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.131:
   mov      %r14, EnvBind
   mov      (%r14), %rdx
   add      $8, %r14
.133:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .133
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .134
   mov      (%rbp), %rsp
   pop      %rbp
.134:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.135:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .135
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  evListE_E
evListE_E:
   mov      (%rbx), %rdx
   testb    $0x06, %dl
   jnz      ret
   testb    $0x08, %dl
   jz       .136
evListE_E_10:
   cmp      %r12, Signal
   jz       .138
   push     %rbx
   call     sighandlerE
   pop      %rbx
.138:
   mov      (%rdx), %rax
   testb    $0x02, %al
   jz       1f
   jmp      *%rax
1:
   testb    $0x04, %al
   jnz      undefinedCE
   cmp      (%rax), %rax
   jz       .139
   mov      %rax, %rdx
   testb    $0x0E, %dl
   jz       evExprCE_E
   jmp      evListE_E_10
.139:
   call     sharedLibC_FA
   jz       1f
   jmp      *%rax
1:
   jmp      undefinedCE
.136:
   push     %rbx
   mov      %rdx, %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     evListE_E
   mov      %rbx, %rdx
   pop      %rbx
   testb    $0x02, %dl
   jz       1f
   jmp      *%rdx
1:
   testb    $0x04, %dl
   jnz      undefinedCE
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %dl
   jnz      .141
   call     evExprCE_E
   jmp      .142
.141:
   call     evListE_E_10
.142:
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .globl  sharedLibC_FA
sharedLibC_FA:
   push     %rdx
   push     %rbx
   push     %r14
   push     %r15
   mov      %rdx, %rbx
   call     bufStringE_SZ
   mov      %r12, %rdx
   mov      %rsp, %r14
.143:
   mov      (%r14), %al
   or       %al, %al
   jz       sharedLibC_FA_90
   cmp      $58, %al
   jz       .144
   cmp      $47, %al
   jnz      .145
   mov      %r14, %rdx
.145:
   inc      %r14
   jmp      .143
.144:
   cmp      %r15, %r14
   jz       sharedLibC_FA_90
   cmp      %r12b, 1(%r14)
   jz       sharedLibC_FA_90
   mov      %r12b, (%r14)
   inc      %r14
   cmp      %r12, %rdx
   mov      %rsp, %rdx
   jnz      .146
   sub      $8, %rsp
   sub      $4, %rdx
   movb     $47, 3(%rdx)
   movb     $98, 2(%rdx)
   movb     $105, 1(%rdx)
   movb     $108, (%rdx)
   mov      Home, %rax
   cmp      %r12, %rax
   jz       .146
.148:
   inc      %rax
   cmp      %r12b, (%rax)
   jnz      .148
   sub      Home, %rax
   sub      %rax, %rdx
   mov      %rdx, %rsp
   andb     $~7, %spl
   mov      %rdx, %rdi
   mov      Home, %rsi
   mov      %rax, %rcx
   cld
   rep movsb
.146:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $257, %rsi
   call     dlopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       sharedLibC_FA_90
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      %r14, %rsi
   call     dlsym
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       sharedLibC_FA_90
   mov      %rax, (%rbx)
sharedLibC_FA_90:
   mov      %r15, %rsp
   pop      %r15
   pop      %r14
   pop      %rbx
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .globl  doErrno
doErrno:
   call     errno_A
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .globl  doNative
doNative:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       .151
   shr      $4, %rbx
   push     %rbx
   jmp      .152
.151:
   testb    $0x04, %bl
   jz       .153
   pushq    -4(%rbx)
   jmp      .152
.153:
   call     needSymEX
   call     bufStringE_SZ
   mov      %rsp, %rdx
   mov      (%rsp), %al
   cmp      $64, %al
   jnz      .155
   cmp      %r12b, 1(%rsp)
   cmovzq   %r12, %rdx
.155:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $257, %rsi
   call     dlopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       dlErrX
   mov      %r15, %rsp
   push     %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .156
   shl      $4, %rax
   orb      $2, %al
   jmp      .157
.156:
   call     boxNumA_A
.157:
   mov      %rax, (%rbx)
.152:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rsp, %r15
   testb    $0x02, %bl
   jz       .158
   shr      $4, %rbx
   mov      %rbx, (%rsp)
   jmp      .159
.158:
   testb    $0x04, %bl
   jz       .160
   mov      -4(%rbx), %r10
   mov      %r10, (%rsp)
   jmp      .159
.160:
   call     needSymEX
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      (%r15), %rdi
   mov      %rsp, %rsi
   call     dlsym
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       dlErrX
   mov      %r15, %rsp
   mov      %rax, (%rsp)
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .162
   shl      $4, %rax
   orb      $2, %al
   jmp      .163
.162:
   call     boxNumA_A
.163:
   mov      %rax, (%rbx)
.159:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.164:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .165
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .164
.165:
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   lea      -16(%r15), %r14
.166:
   cmp      %r14, %r13
   jz       .167
   mov      (%r13), %rbx
   testb    $0x06, %bl
   jz       .168
   testb    $0x02, %bl
   jz       .169
   shr      $4, %rbx
   jnc      .173
   neg      %rbx
   jmp      .173
.169:
   testb    $8, %bl
   pushf
   andb     $~12, %bl
   mov      8(%rbx), %rax
   mov      (%rbx), %rbx
   shr      $5, %rax
   rcr      $1, %rbx
   shr      $1, %rax
   rcr      $1, %rbx
   shr      $1, %rax
   rcr      $1, %rbx
   shr      $1, %rax
   rcr      $1, %rbx
   popf
   jz       .173
   neg      %rbx
   jmp      .173
.168:
   push     %r15
   testb    $0x08, %bl
   jz       .174
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %rbx
   mov      %r15, %rsp
   jmp      .175
.174:
   mov      8(%rbx), %rbx
   mov      (%rbx), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   call     allocC_A
   push     %rax
   mov      %rax, %r15
.176:
   mov      8(%rbx), %rbx
   testb    $0x02, %bl
   jz       .177
   mov      %rbx, %rax
   shr      $4, %rax
.178:
   sub      $1, %rdx
   js       .180
   mov      %al, (%r15)
   inc      %r15
   jmp      .178
.177:
   testb    $0x0E, %bl
   jnz      .180
   mov      (%rbx), %rax
   shr      $4, %rax
   mov      %al, (%r15)
   inc      %r15
   dec      %rdx
   jnz      .176
.180:
   pop      %rbx
.175:
   pop      %r15
.173:
   push     %rbx
   add      $8, %r13
   jmp      .166
.167:
   mov      %rsp, %r13
   mov      %rbp, %rdx
   sub      %r13, %rdx
   sub      %rdx, %rsp
   mov      %rsp, %rdi
   mov      %r13, %rsi
   mov      %rbp, %rcx
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   mov      (%r15), %r14
   mov      %rdx, %r12
   cmp      %rsp, %r13
   jz       1f
   pop      %rdi
   cmp      %rsp, %r13
   jz       1f
   pop      %rsi
   cmp      %rsp, %r13
   jz       1f
   pop      %rdx
   cmp      %rsp, %r13
   jz       1f
   pop      %rcx
   cmp      %rsp, %r13
   jz       1f
   pop      %r8
   cmp      %rsp, %r13
   jz       1f
   pop      %r9
1:
   xor      %rax, %rax
   call     *%r14
   mov      %r13, %rsp
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      -16(%r15), %rbx
   mov      %r12, %rdx
   pushq    Link
   mov      %rbp, Link
   call     natRetACE_CE
   popq     Link
   mov      %rbx, -16(%r15)
   lea      -24(%r15), %r14
.181:
   cmp      %rbp, %r14
   jz       .182
   pop      %r13
   mov      (%r14), %rbx
   testb    $0x06, %bl
   jnz      .183
   testb    $0x08, %bl
   jnz      .184
   cmpq     $Nil, (%rbx)
   jz       .184
   mov      %r13, %rdx
   mov      8(%rbx), %r10
   mov      (%r10), %r10
   mov      8(%r10), %rbx
   call     natRetACE_CE
   mov      (%r14), %r11
   mov      (%r11), %r11
   mov      %rbx, (%r11)
.184:
   mov      %rdx, %r12
   mov      %r13, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.183:
   sub      $8, %r14
   jmp      .181
.182:
   mov      -16(%r15), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  natRetACE_CE
natRetACE_CE:
   cmp      $Nil, %rbx
   jz       .186
   cmp      $ISym, %rbx
   jnz      .187
   cmp      %r12, %rdx
   jz       .188
   movl     (%rdx), %eax
   add      $4, %rdx
.188:
   mov      $4294967295, %rbx
   and      %rax, %rbx
   mov      $2147483648, %rax
   xor      %rax, %rbx
   sub      %rax, %rbx
   js       .189
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .186
.189:
   neg      %rbx
   shl      $4, %rbx
   orb      $10, %bl
   jmp      .186
.187:
   cmp      $NSym, %rbx
   jnz      .192
   cmp      %r12, %rdx
   jz       .193
   mov      (%rdx), %rax
   add      $8, %rdx
.193:
   mov      %rax, %rbx
   cmp      %r12, %rbx
   js       .194
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .195
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .186
.195:
   mov      $9223372036854775807, %r10
   cmp      %r10, %rbx
   jnz      .197
   mov      $TSym, %rbx
   jmp      .186
.197:
   call     boxNumE_E
   jmp      .186
.194:
   neg      %rbx
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .200
   shl      $4, %rbx
   orb      $10, %bl
   jmp      .186
.200:
   mov      $9223372036854775808, %r10
   cmp      %r10, %rbx
   jnz      .202
   mov      $Nil, %rbx
   jmp      .186
.202:
   call     boxNumE_E
   orb      $8, %bl
   jmp      .186
.192:
   cmp      $SSym, %rbx
   jnz      .205
   cmp      %r12, %rdx
   jz       .206
   mov      (%rdx), %rax
   add      $8, %rdx
.206:
   mov      %rax, %rbx
   call     mkStrE_E
   jmp      .186
.205:
   cmp      $CSym, %rbx
   jnz      .208
   cmp      %r12, %rdx
   jz       .209
   call     fetchCharC_AC
.209:
   mov      $Nil, %rbx
   cmp      %r12, %rax
   jz       .186
   call     mkCharA_A
   mov      %rax, %rbx
   jmp      .186
.208:
   cmp      $BSym, %rbx
   jnz      .212
   cmp      %r12, %rdx
   jz       .213
   mov      (%rdx), %al
   inc      %rdx
.213:
   movzx    %al, %rax
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .186
.212:
   testb    $0x0E, %bl
   jnz      .186
   cmp      %r12, %rdx
   cmovzq   %rax, %rdx
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      (%r13), %rbx
   call     natRetACE_CE
   call     cons_Y
   mov      %rbx, (%r14)
   movq     $Nil, 8(%r14)
   push     %rbp
   mov      %rsp, %rbp
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
.216:
   mov      8(%r13), %r15
   testb    $0x02, %r15b
   jz       .217
   shr      $4, %r15
.218:
   dec      %r15
   jz       .220
   mov      (%r13), %rbx
   call     natRetACE_CE
   call     cons_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   jmp      .218
.217:
   testb    $0x0E, %r15b
   jnz      .220
   mov      %r15, %r13
   mov      (%r13), %rbx
   call     natRetACE_CE
   call     cons_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   jmp      .216
.220:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
.186:
   rep
   ret

   .balign  16
   .globl  fetchCharC_AC
fetchCharC_AC:
   mov      (%rdx), %al
   movzx    %al, %rax
   or       %al, %al
   jz       .221
   inc      %rdx
   cmp      $128, %al
   jc       .221
   testb    $32, %al
   jnz      .223
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .224
.223:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   mov      (%rdx), %al
   movzx    %al, %rax
   inc      %rdx
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.224:
   mov      (%rdx), %al
   movzx    %al, %rax
   inc      %rdx
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
.221:
   rep
   ret

   .balign  16
   .globl  lisp
lisp:
   push     %rbx
   push     %r12
   xor      %r12, %r12
   push     %r15
   mov      %r9, %r15
   push     %r14
   mov      %r8, %r14
   push     %r13
   mov      %rcx, %r13
   mov      %rdx, %rbx
   mov      %rsi, %rdx
   mov      %rdi, %rax
   push     %rbp
   mov      Link, %rbp
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   xchg     %rbx, %rdx
   call     boxCntE_E
   push     %rbx
   mov      %rdx, %rbx
   call     boxCntE_E
   push     %rbx
   mov      %r13, %rbx
   call     boxCntE_E
   push     %rbx
   mov      %r14, %rbx
   call     boxCntE_E
   push     %rbx
   mov      %r15, %rbx
   call     boxCntE_E
   push     %rbx
   mov      %rsp, %r15
   push     %rbp
   mov      %rsp, %rbp
   mov      $4, %rdx
   mov      %rax, %rbx
   lea      48(%rsp), %r13
.225:
   mov      (%rbx), %al
   call     byteSymBCX_CX
   inc      %rbx
   cmp      %r12b, (%rbx)
   jnz      .225
   mov      48(%rsp), %r13
   call     findSymX_E
   lea      48(%rsp), %r14
   mov      %rbx, (%r14)
   call     applyXYZ_E
   mov      %rbx, %rax
   shr      $4, %rax
   jnc      .226
   neg      %rax
.226:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rbp
   pop      %r13
   pop      %r14
   pop      %r15
   pop      %r12
   pop      %rbx
   ret

   .balign  16
   .globl  execE
execE:
   push     %r13
   mov      %rbx, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   push     %rbp
   mov      %rsp, %rbp
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %r10
   mov      %r10, At
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .globl  runE_E
runE_E:
   push     %r13
   mov      %rbx, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   push     %rbp
   mov      %rsp, %rbp
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %r10
   mov      %r10, At
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .globl  funqE_FE
funqE_FE:
   testb    $0x02, %bl
   jnz      retz
   testb    $0x04, %bl
   jnz      ret
   testb    $0x08, %bl
   jnz      ret
   mov      8(%rbx), %rdx
.227:
   testb    $0x0E, %dl
   jnz      .228
   cmp      %rbx, %rdx
   jz       retnz
   mov      (%rdx), %rax
   testb    $0x0E, %al
   jnz      .229
   testb    $0x06, (%rax)
   jz       .230
   testb    $0x0E, 8(%rdx)
   jz       retnz
   jmp      .232
.230:
   cmpq     $Nil, (%rax)
   jz       retnz
   cmpq     $TSym, (%rax)
   jz       retnz
   jmp      .232
.229:
   cmpq     $Nil, 8(%rdx)
   jnz      ret
.232:
   mov      8(%rdx), %rdx
   jmp      .227
.228:
   cmp      $Nil, %rdx
   jnz      ret
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
   jz       .233
   mov      %rbx, %rdx
.234:
   testb    $0x0E, %dl
   jnz      .235
   mov      (%rdx), %rax
   testb    $0x06, %al
   jnz      ret
   testb    $0x0E, %al
   jz       retnz
   cmp      $Nil, %rax
   jz       retnz
   cmp      $TSym, %rax
   jz       retnz
   mov      8(%rdx), %rdx
   cmp      %rbx, %rdx
   jz       retnz
   jmp      .234
.235:
   cmp      $TSym, %rdx
   jz       retnz
   testb    $0x06, %dl
   jnz      ret
.233:
   rep
   ret

   .balign  16
   .globl  evSymX_E
evSymX_E:
   mov      (%r13), %rbx
   jmp      evSymE_E

   .balign  16
   .globl  evSymY_E
evSymY_E:
   mov      (%r14), %rbx

   .globl  evSymE_E
evSymE_E:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:

   .globl  xSymE_E
xSymE_E:
   testb    $0x06, %bl
   jnz      .236
   testb    $0x08, %bl
   jnz      ret
.236:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   call     packECX_CX
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .globl  evCntXY_FE
evCntXY_FE:
   mov      (%r14), %rbx

   .globl  evCntEX_FE
evCntEX_FE:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:

   .balign  16
   .globl  xCntEX_FE
xCntEX_FE:
   testb    $0x02, %bl
   jz       cntErrEX
   shr      $4, %rbx
   jnc      .237
   neg      %rbx
.237:
   rep
   ret

   .balign  16
   .globl  xCntCX_FC
xCntCX_FC:
   testb    $0x02, %dl
   jz       cntErrCX
   shr      $4, %rdx
   jnc      .238
   neg      %rdx
.238:
   rep
   ret

   .balign  16
   .globl  xCntAX_FA
xCntAX_FA:
   testb    $0x02, %al
   jz       cntErrAX
   shr      $4, %rax
   jnc      .239
   neg      %rax
.239:
   rep
   ret

   .balign  16
   .globl  boxCntE_E
boxCntE_E:
   cmp      %r12, %rbx
   js       .240
   shl      $4, %rbx
   orb      $2, %bl
   ret
.240:
   neg      %rbx
   shl      $4, %rbx
   orb      $10, %bl
   ret

   .balign  16
   .globl  putStringB
putStringB:
   push     %r13
   push     %rdx
   mov      StrX, %r13
   mov      StrC, %rdx
   call     byteSymBCX_CX
   mov      %rdx, StrC
   mov      %r13, StrX
   pop      %rdx
   pop      %r13
   ret

   .balign  16
   .globl  begString
begString:
   pop      %rax
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   movq     $4, StrC
   mov      %rsp, StrX
   push     %rbp
   mov      %rsp, %rbp
   pushq    PutB
   movq     $putStringB, PutB
   jmp      *%rax

   .balign  16
   .globl  endString_E
endString_E:
   pop      %rax
   popq     PutB
   mov      $Nil, %rbx
   cmpq     $2, 8(%rbp)
   jz       .241
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
.241:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      *%rax

   .globl  msec_A
msec_A:
   push     %rdx
   mov      %rdx, %r12
   mov      $Buf, %rdi
   xor      %rsi, %rsi
   call     gettimeofday
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Buf, %rax
   mov      $1000, %r10
   mul      %r10
   mov      %rax, Buf
   mov      Buf+8, %rax
   mov      $1000, %r10
   div      %r10
   add      Buf, %rax
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .globl  doArgs
doArgs:
   mov      EnvArgs, %r10
   cmp      %r10, EnvNext
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doNext
doNext:
   mov      EnvNext, %rdx
   cmp      EnvArgs, %rdx
   jz       .242
   sub      $8, %rdx
   mov      (%rdx), %rbx
   mov      %rdx, EnvNext
   ret
.242:
   mov      $Nil, %rbx
   cmp      %r12, %rdx
   jz       .243
   mov      %rbx, (%rdx)
.243:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doArg
doArg:
   cmp      %r12, EnvArgs
   jz       retNil
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .244
   mov      EnvNext, %r10
   mov      (%r10), %rbx
   ret
.244:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $8, %bl
   jnz      .245
   shr      $1, %rbx
   andb     $~1, %bl
   jz       .245
   mov      EnvNext, %rdx
   sub      %rbx, %rdx
   cmp      EnvArgs, %rdx
   jc       .245
   mov      (%rdx), %rbx
   ret
.245:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doRest
doRest:
   mov      $Nil, %rbx
   mov      EnvArgs, %rdx
.248:
   cmp      EnvNext, %rdx
   jz       .249
   call     consE_A
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   add      $8, %rdx
   jmp      .248
.249:
   rep
   ret

   .balign  16
   .globl  tmDateC_E
tmDateC_E:
   movl     12(%rdx), %eax
   mov      %rax, %r13
   movl     16(%rdx), %eax
   inc      %rax
   mov      %rax, %r14
   movl     20(%rdx), %eax
   add      $1900, %rax
   mov      %rax, %r15

   .balign  16
   .globl  dateXYZ_E
dateXYZ_E:
   cmp      %r12, %r14
   jbe      retNil
   cmp      $12, %r14
   ja       retNil
   cmp      %r12, %r13
   jbe      retNil
   mov      Month(%r14), %al
   cmp      %al, %r13b
   jbe      .250
   cmp      $2, %r14
   jnz      retNil
   cmp      $29, %r13
   jnz      retNil
   testb    $3, %r15b
   jnz      retNil
   mov      %r15, %rax
   mov      %r12, %rdx
   mov      $100, %r10
   div      %r10
   cmp      %r12, %rdx
   jnz      .250
   mov      %r15, %rax
   mov      $400, %r10
   div      %r10
   cmp      %r12, %rdx
   jnz      retNil
.250:
   mov      %r15, %rax
   mov      $12, %r10
   mul      %r10
   add      %r14, %rax
   sub      $3, %rax
   mov      %r12, %rdx
   mov      $12, %r10
   div      %r10
   mov      %rax, %rbx
   mov      %r12, %rdx
   mov      $100, %r10
   div      %r10
   mov      %rbx, %rdx
   shr      $2, %rbx
   add      %rdx, %rdx
   sub      %rdx, %rbx
   sub      %rax, %rbx
   shr      $2, %rax
   add      %rax, %rbx
   mov      %r15, %rax
   mov      $4404, %r10
   mul      %r10
   mov      %rax, %r15
   mov      %r14, %rax
   mov      $367, %r10
   mul      %r10
   add      %r15, %rax
   sub      $1094, %rax
   mov      $12, %r10
   div      %r10
   add      %rax, %rbx
   add      %r13, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret
Month:
   .byte    31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31

   .balign  16
   nop
   nop
   .globl  doDate
doDate:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jz       .252
   mov      %rdx, %r12
   mov      $Buf, %rdi
   call     time
   mov      $Buf, %rdi
   call     localtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, Time
   mov      %rax, %rdx
   call     tmDateC_E
   jmp      .253
.252:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      .254
   mov      %rdx, %r12
   mov      $Buf, %rdi
   call     time
   mov      $Buf, %rdi
   call     gmtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, Time
   mov      %rax, %rdx
   call     tmDateC_E
   jmp      .253
.254:
   cmp      $Nil, %rbx
   jz       .253
   testb    $0x0E, %bl
   jnz      .257
   mov      (%rbx), %rdx
   call     xCntCX_FC
   mov      %rdx, %r15
   mov      8(%rbx), %rbx
   mov      (%rbx), %rdx
   call     xCntCX_FC
   mov      %rdx, %r14
   mov      8(%rbx), %r10
   mov      (%r10), %rdx
   call     xCntCX_FC
   mov      %rdx, %r13
   call     dateXYZ_E
   jmp      .253
.257:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .259
   call     xCntEX_FE
   mov      %rbx, %rax
   mov      $100, %r10
   mul      %r10
   sub      $20, %rax
   mov      %r12, %rdx
   mov      $3652425, %r10
   div      %r10
   mov      %rax, %r15
   add      %rax, %rbx
   shr      $2, %rax
   sub      %rax, %rbx
   mov      %rbx, %rax
   mov      $100, %r10
   mul      %r10
   sub      $20, %rax
   mov      $36525, %r10
   div      %r10
   mov      %rax, %r15
   mov      $36525, %r10
   mul      %r10
   mov      $100, %r10
   div      %r10
   sub      %rax, %rbx
   mov      %rbx, %rax
   mov      $10, %r10
   mul      %r10
   sub      $5, %rax
   mov      $306, %r10
   div      %r10
   mov      %rax, %r14
   mov      $306, %r10
   mul      %r10
   mov      %rax, %r13
   mov      %rbx, %rax
   mov      $10, %r10
   mul      %r10
   sub      %r13, %rax
   add      $5, %rax
   mov      $10, %r10
   div      %r10
   mov      %rax, %r13
   cmp      $10, %r14
   jnc      .260
   add      $3, %r14
   jmp      .261
.260:
   inc      %r15
   sub      $9, %r14
.261:
   shl      $4, %r13
   orb      $2, %r13b
   call     cons_E
   mov      %r13, (%rbx)
   movq     $Nil, 8(%rbx)
   shl      $4, %r14
   orb      $2, %r14b
   call     consE_C
   mov      %r14, (%rdx)
   mov      %rbx, 8(%rdx)
   shl      $4, %r15
   orb      $2, %r15b
   call     consC_E
   mov      %r15, (%rbx)
   mov      %rdx, 8(%rbx)
   jmp      .253
.259:
   call     xCntEX_FE
   mov      %rbx, %r15
   call     evCntXY_FE
   push     %rbx
   mov      8(%r14), %r14
   call     evCntXY_FE
   mov      %rbx, %r13
   pop      %r14
   call     dateXYZ_E
.253:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  tmTimeY_E
tmTimeY_E:
   movl     8(%r14), %eax
   mov      $3600, %r10
   mul      %r10
   mov      %rax, %rbx
   movl     4(%r14), %eax
   mov      $60, %r10
   mul      %r10
   add      %rax, %rbx
   movl     0(%r14), %eax
   add      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .globl  doTime
doTime:
   push     %r13
   push     %r14
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jz       .263
   mov      %rdx, %r12
   mov      $Buf, %rdi
   call     time
   mov      $Buf, %rdi
   call     localtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %r14
   call     tmTimeY_E
   jmp      .264
.263:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      .265
   mov      Time, %r14
   cmp      %r12, %r14
   jz       .266
   call     tmTimeY_E
   jmp      .264
.266:
   mov      $Nil, %rbx
   jmp      .264
.265:
   cmp      $Nil, %rbx
   jz       .264
   testb    $0x0E, %bl
   jnz      .270
   mov      (%rbx), %rax
   call     xCntAX_FA
   mov      $3600, %r10
   mul      %r10
   mov      %rax, %r14
   mov      8(%rbx), %rbx
   mov      (%rbx), %rax
   call     xCntAX_FA
   mov      $60, %r10
   mul      %r10
   add      %rax, %r14
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   cmovnzq  %r14, %rbx
   jnz      .271
   mov      (%rbx), %rbx
   call     xCntEX_FE
   add      %r14, %rbx
.271:
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .264
.270:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .273
   call     xCntEX_FE
   mov      %rbx, %rax
   mov      %r12, %rdx
   mov      $60, %r10
   div      %r10
   shl      $4, %rdx
   orb      $2, %dl
   call     cons_Y
   mov      %rdx, (%r14)
   movq     $Nil, 8(%r14)
   mov      %rbx, %rax
   mov      %r12, %rdx
   mov      $60, %r10
   div      %r10
   mov      %r12, %rdx
   mov      $60, %r10
   div      %r10
   shl      $4, %rdx
   orb      $2, %dl
   call     consY_X
   mov      %rdx, (%r13)
   mov      %r14, 8(%r13)
   xchg     %rbx, %rax
   mov      %r12, %rdx
   mov      $3600, %r10
   div      %r10
   shl      $4, %rax
   orb      $2, %al
   call     consX_E
   mov      %rax, (%rbx)
   mov      %r13, 8(%rbx)
   jmp      .264
.273:
   call     xCntEX_FE
   mov      %rbx, %rax
   mov      $3600, %r10
   mul      %r10
   push     %rax
   call     evCntXY_FE
   mov      %rbx, %rax
   mov      $60, %r10
   mul      %r10
   add      %rax, (%rsp)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .275
   call     evCntXY_FE
   add      %rbx, (%rsp)
.275:
   pop      %rbx
   shl      $4, %rbx
   orb      $2, %bl
.264:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doUsec
doUsec:
   mov      %rdx, %r12
   mov      $Buf, %rdi
   xor      %rsi, %rsi
   call     gettimeofday
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Buf, %rax
   mov      $1000000, %r10
   mul      %r10
   add      Buf+8, %rax
   sub      USec, %rax
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .globl  doPwd
doPwd:
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     getcwd
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       retNil
   push     %rax
   mov      %rax, %rbx
   call     mkStrE_E
   mov      %rdx, %r12
   pop      %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .balign  16
   nop
   nop
   .globl  doCd
doCd:
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
   mov      $Nil, %rbx
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     getcwd
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .276
   push     %rax
   cmp      %r12b, 8(%rsp)
   jz       doCd_10
   mov      %rdx, %r12
   lea      8(%rsp), %rdi
   call     chdir
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .277
doCd_10:
   mov      (%rsp), %rbx
   call     mkStrE_E
.277:
   mov      %rdx, %r12
   pop      %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.276:
   mov      %r15, %rsp
   pop      %r15
   ret

   .balign  16
   nop
   nop
   .globl  doCtty
doCtty:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       .278
   shr      $4, %rbx
   mov      %rbx, TtyPid
   mov      $TSym, %rbx
   jmp      .279
.278:
   testb    $0x08, %bl
   jz       argErrEX
   push     %r15
   call     bufStringE_SZ
   mov      $Nil, %rbx
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_r_, %rsi
   mov      stdin, %rdx
   call     freopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .280
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_w_, %rsi
   mov      stdout, %rdx
   call     freopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .280
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_w_, %rsi
   mov      stderr, %rdx
   call     freopen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .280
   mov      OutFiles, %r11
   mov      8(%r11), %r11
   movq     $1, 16(%r11)
   mov      $TSym, %rbx
.280:
   mov      %r15, %rsp
   pop      %r15
.279:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doInfo
doInfo:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
   mov      %rsp, %rbx
   sub      $144, %rsp
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      %rsp, %rsi
   call     stat
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $Nil, %rbx
   cmp      %r12d, %eax
   js       .283
   mov      %rdx, %r12
   lea      88(%rsp), %rdi
   call     gmtime
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %r14
   call     tmTimeY_E
   push     %rbx
   push     %r15
   mov      %r14, %rdx
   call     tmDateC_E
   pop      %r15
   call     cons_X
   mov      %rbx, (%r13)
   popq     8(%r13)
   call     consX_E
   call     s_isdirS_F
   jnz      .284
   movq     $TSym, (%rbx)
   jmp      .285
.284:
   mov      48(%rsp), %rax
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rbx)
.285:
   mov      %r13, 8(%rbx)
.283:
   mov      %r15, %rsp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFile
doFile:
   mov      InFile, %rdx
   cmp      %r12, %rdx
   jz       retNil
   mov      48(%rdx), %rbx
   cmp      %r12, %rbx
   jz       retNil
   mov      $47, %al
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %rbx, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   cld
   mov      %rbx, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %rbx
   cmovzq   %rcx, %rdx
   jnz      .286
.287:
   cld
   mov      %rbx, %rdi
   mov      %rdx, %rcx
   repnz scasb
   cmovzq   %rdi, %rbx
   cmovzq   %rcx, %rdx
   jz       .287
   push     %r15
   mov      %rbx, %r15
   dec      %r15
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   mov      InFile, %r10
   mov      40(%r10), %rax
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   mov      InFile, %r10
   mov      48(%r10), %rbx
   call     mkStrEZ_A
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   jmp      .288
.286:
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   mov      InFile, %r10
   mov      40(%r10), %rax
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 8(%rdx)
   call     consC_A
   movq     $193250, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   call     consAC_E
   mov      %rax, (%rbx)
   mov      %rdx, 8(%rbx)
.288:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doDir
doDir:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   call     evSymE_E
   cmp      $Nil, %rbx
   jnz      .289
   mov      %rdx, %r12
   mov      $_dot_, %rdi
   call     opendir
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .290
.289:
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     opendir
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
.290:
   cmp      %r12, %rax
   jz       doDir_10
   mov      %rax, %r15
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r13
.291:
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     readdir
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      .292
doDir_10:
   mov      $Nil, %rbx
   pop      %r15
   pop      %r13
   ret
.292:
   lea      19(%rax), %rbx
   cmp      $Nil, %r13
   jnz      .293
   mov      (%rbx), %al
   cmp      $46, %al
   jz       .291
.293:
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.294:
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     readdir
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .295
   lea      19(%rax), %rbx
   cmp      $Nil, %r13
   jnz      doDir_20
   mov      (%rbx), %al
   cmp      $46, %al
   jz       .294
doDir_20:
   call     mkStrE_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .294
.295:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     closedir
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %r15
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCmd
doCmd:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   cmp      $Nil, %rbx
   jnz      .297
   mov      AV0, %rbx
   jmp      mkStrE_E
.297:
   push     %r15
   call     bufStringE_SZ
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %rsp, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   inc      %rdx
   mov      AV0, %rdi
   mov      %rsp, %rsi
   mov      %rdx, %rcx
   cld
   rep movsb
   mov      %r15, %rsp
   pop      %r15
   ret

   .balign  16
   nop
   nop
   .globl  doArgv
doArgv:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      AV, %r15
   mov      (%r15), %rbx
   cmp      %r12, %rbx
   jz       .298
   mov      (%rbx), %al
   cmp      $45, %al
   jnz      .298
   cmp      %r12b, 1(%rbx)
   jnz      .298
   add      $8, %r15
.298:
   cmp      $Nil, %r14
   jnz      .306
   mov      $Nil, %rbx
   cmp      %r12, (%r15)
   jz       doArgv_90
   mov      (%r15), %rbx
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.303:
   add      $8, %r15
   cmp      %r12, (%r15)
   jz       .304
   mov      (%r15), %rbx
   call     mkStrE_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .303
.304:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      doArgv_90
.306:
   testb    $0x0E, %r14b
   jnz      .307
   mov      (%r14), %rbx
   call     needVarEX
   mov      (%r15), %rbx
   cmp      %r12, %rbx
   jz       .308
   add      $8, %r15
.308:
   call     mkStrE_E
   mov      (%r14), %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r14
   cmp      $Nil, %r14
   jz       doArgv_90
   jmp      .306
.307:
   testb    $0x06, %r14b
   jnz      symErrYX
   call     checkVarYX
   mov      (%r15), %rbx
   cmp      %r12, %rbx
   jnz      .309
   mov      $Nil, %rbx
   mov      %rbx, (%r14)
   jmp      doArgv_90
.309:
   call     mkStrE_E
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.311:
   add      $8, %r15
   cmp      %r12, (%r15)
   jz       .312
   mov      (%r15), %rbx
   call     mkStrE_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .311
.312:
   mov      8(%rbp), %rbx
   mov      %rbx, (%r14)
   mov      (%rbp), %rsp
   pop      %rbp
doArgv_90:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOpt
doOpt:
   mov      AV, %r10
   mov      (%r10), %rbx
   cmp      %r12, %rbx
   jz       retNil
   mov      (%rbx), %al
   cmp      $45, %al
   jnz      .313
   cmp      %r12b, 1(%rbx)
   jz       retNil
.313:
   addq     $8, AV
   jmp      mkStrE_E

   .balign  16
   nop
   nop
   .globl  doVersion
doVersion:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .314
   mov      $Version, %rbx
.315:
   mov      (%rbx), %rax
   shr      $4, %rax
   call     outWordA
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .316
   mov      $46, %al
   mov      PutB, %r10
   call     *%r10
   jmp      .315
.316:
   call     newline
.314:
   mov      $Version, %rbx
   ret

   .balign  16
   .globl  errno_A
errno_A:
   call     __errno_location
   mov      (%rax), %rax
   ret

   .balign  16
   .globl  errnoC
errnoC:
   call     __errno_location
   mov      %rdx, (%rax)
   ret

   .balign  16
   .globl  s_isdirS_F
s_isdirS_F:
   movl     32(%rsp), %eax
   and      $61440, %rax
   cmp      $16384, %rax
   ret

   .balign  16
   .globl  wifstoppedS_F
wifstoppedS_F:
   mov      8(%rsp), %rax
   cmp      $127, %al
   ret

   .balign  16
   .globl  wifsignaledS_F
wifsignaledS_F:
   mov      8(%rsp), %rax
   and      $127, %al
   inc      %al
   shr      $1, %al
   ret

   .balign  16
   .globl  wtermsigS_A
wtermsigS_A:
   mov      8(%rsp), %rax
   and      $127, %al
   movzx    %al, %rax
   ret

   .balign  16
   .globl  markE
markE:
   mov      %r12, %r13
.318:
   testb    $0x02, %bl
   jnz      .323
   mov      %rbx, %rax
   andb     $~15, %al
   testb    $1, 8(%rax)
   jz       .323
   andb     $~1, 8(%rax)
   testb    $0x04, %bl
   jz       .320
   mov      8(%rax), %rdx
.321:
   testb    $0x02, %dl
   jnz      .323
   testb    $1, 4(%rdx)
   jz       .323
   andb     $~1, 4(%rdx)
   mov      4(%rdx), %rdx
   jmp      .321
.320:
   mov      %rbx, %rdx
   mov      (%rax), %rbx
   orb      $1, %r13b
   mov      %r13, (%rax)
   mov      %rdx, %r13
   jmp      .318
.323:
   mov      %r13, %rax
   and      $-16, %rax
   jz       ret
   testb    $1, (%rax)
   jnz      .324
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %rbx, 8(%rax)
   mov      %rdx, %rbx
   jmp      .323
.324:
   mov      (%rax), %rdx
   mov      %rbx, (%rax)
   mov      8(%rax), %rbx
   andb     $~1, %dl
   mov      %rdx, 8(%rax)
   jmp      .318

   .balign  16
   .globl  needC
needC:
   mov      Avail, %rax
.325:
   cmp      %r12, %rax
   jz       gc
   mov      (%rax), %rax
   dec      %rdx
   jnz      .325
   rep
   ret

   .balign  16
   .globl  gc
gc:
   push     %rax
   push     %rdx
   push     %rbx
   push     %r13
   push     %r14
   push     %r15
   movq     $2, DB
   mov      $Nil, %r13
   orb      $1, (%r13)
   add      $32, %r13
.326:
   orb      $1, (%r13)
   add      $16, %r13
   cmp      $GcMarkEnd, %r13
   jbe      .326
   mov      Heaps, %r13
.327:
   mov      $65536, %rdx
.328:
   orb      $1, 8(%r13)
   add      $16, %r13
   dec      %rdx
   jnz      .328
   mov      (%r13), %r13
   cmp      %r12, %r13
   jnz      .327
   mov      Alarm, %rbx
   call     markE
   mov      Sigio, %rbx
   call     markE
   mov      LineX, %rbx
   call     markE
   mov      Intern, %rbx
   call     markE
   mov      Intern+8, %rbx
   call     markE
   mov      Transient, %rbx
   call     markE
   mov      Transient+8, %rbx
   call     markE
   mov      %rbp, %r14
.329:
   cmp      %r12, %r14
   jz       .330
   mov      (%r14), %r15
.331:
   add      $8, %r14
   cmp      %r15, %r14
   jz       .332
   mov      (%r14), %rbx
   call     markE
   jmp      .331
.332:
   mov      (%r14), %r14
   jmp      .329
.330:
   mov      Catch, %r14
.333:
   cmp      %r12, %r14
   jz       .334
   mov      8(%r14), %rbx
   cmp      %r12, %rbx
   jz       .335
   call     markE
.335:
   mov      16(%r14), %rbx
   call     markE
   mov      (%r14), %r14
   jmp      .333
.334:
   mov      EnvMeth, %r14
.336:
   cmp      %r12, %r14
   jz       .337
   mov      8(%r14), %rbx
   call     markE
   mov      16(%r14), %rbx
   call     markE
   mov      (%r14), %r14
   jmp      .336
.337:
   mov      Stack0, %r14
   mov      Stacks, %rdx
.338:
   sub      StkSize, %r14
   shr      $1, %rdx
   jnc      .339
   cmp      %r12, -16(%r14)
   jnz      .340
   mov      -8(%r14), %rbx
   call     markE
   jmp      .338
.340:
   push     %r14
   push     %rdx
   mov      -16(%r14), %r10
   mov      (%r10), %r14
.342:
   cmp      %r12, %r14
   jz       .343
   mov      (%r14), %r15
.344:
   add      $8, %r14
   cmp      %r15, %r14
   jz       .345
   mov      (%r14), %rbx
   call     markE
   jmp      .344
.345:
   mov      (%r14), %r14
   jmp      .342
.343:
   pop      %rdx
   pop      %r14
   jmp      .338
.339:
   jnz      .338
   mov      $Extern, %r14
   mov      %r12, %r15
.347:
   andb     $~1, 8(%r14)
   mov      8(%r14), %rax
   andb     $~1, 8(%rax)
   testb    $0x0E, 8(%rax)
   jnz      .349
   mov      %r14, %rdx
   mov      8(%rax), %r14
   mov      %r15, 8(%rax)
   mov      %rdx, %r15
   jmp      .347
.349:
   mov      (%r14), %rbx
   testb    $1, (%rbx)
   jz       .350
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      .351
   andb     $~9, %al
.352:
   mov      8(%rax), %rax
   andb     $~1, %al
   testb    $0x06, %al
   jz       .352
.351:
   rcl      $1, %rax
   jnc      .350
   call     markE
.350:
   mov      8(%r14), %rax
   testb    $0x0E, (%rax)
   jnz      .356
   mov      %r14, %rdx
   mov      (%rax), %r14
   mov      %r15, (%rax)
   orb      $8, %dl
   mov      %rdx, %r15
   jmp      .347
.356:
   mov      %r15, %rax
   cmp      %r12, %rax
   jz       gc_10
   testb    $0x08, %al
   jnz      .357
   mov      8(%rax), %rdx
   mov      8(%rdx), %r15
   mov      %r14, 8(%rdx)
   mov      %rax, %r14
   jmp      .349
.357:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r15
   mov      %r14, (%rdx)
   mov      %rax, %r14
   jmp      .356
gc_10:
   mov      $Db1, %rax
   mov      %rax, DB
   testb    $1, (%rax)
   jz       .359
   movq     $Nil, (%rax)
   movq     $26, -8(%rax)
.359:
   mov      $Extern, %r14
   mov      %r12, %r15
gc_20:
   mov      8(%r14), %rax
   testb    $0x0E, 8(%rax)
   jnz      .363
   mov      %r14, %rdx
   mov      8(%rax), %r14
   mov      %r15, 8(%rax)
   mov      %rdx, %r15
   jmp      gc_20
.363:
   mov      (%r14), %r11
   testb    $1, (%r11)
   jz       gc_30
   mov      8(%r14), %rax
   testb    $0x0E, %al
   jz       .365
   orb      $1, 8(%r14)
   mov      %rax, %r14
   jmp      gc_40
.365:
   testb    $0x0E, (%rax)
   jz       .366
   orb      $1, 8(%r14)
   mov      8(%rax), %r14
   jmp      gc_40
.366:
   testb    $0x0E, 8(%rax)
   jz       .367
   orb      $1, 8(%r14)
   mov      (%rax), %r14
   jmp      gc_20
.367:
   mov      8(%rax), %rax
   mov      8(%rax), %r13
   testb    $0x0E, (%r13)
   jz       .368
   mov      (%rax), %r10
   mov      %r10, (%r14)
   mov      8(%r14), %r11
   mov      8(%r13), %r10
   mov      %r10, 8(%r11)
   jmp      gc_30
.368:
   mov      (%r13), %r13
.369:
   mov      8(%r13), %rdx
   testb    $0x0E, (%rdx)
   jnz      .370
   mov      %r13, %rax
   mov      (%rdx), %r13
   jmp      .369
.370:
   mov      (%r13), %r10
   mov      %r10, (%r14)
   mov      8(%rax), %r11
   mov      8(%rdx), %r10
   mov      %r10, (%r11)
gc_30:
   mov      8(%r14), %rax
   testb    $0x0E, (%rax)
   jnz      gc_40
   mov      %r14, %rdx
   mov      (%rax), %r14
   mov      %r15, (%rax)
   orb      $8, %dl
   mov      %rdx, %r15
   jmp      gc_20
gc_40:
   mov      %r15, %rax
   cmp      %r12, %rax
   jz       gc_50
   testb    $0x08, %al
   jnz      .374
   mov      8(%rax), %rdx
   mov      8(%rdx), %r15
   mov      %r14, 8(%rdx)
   mov      %rax, %r14
   jmp      .363
.374:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r15
   mov      %r14, (%rdx)
   mov      %rax, %r14
   jmp      gc_40
gc_50:
   mov      Stack0, %r14
   mov      Stacks, %rdx
   mov      $1, %rax
.376:
   sub      StkSize, %r14
   shr      $1, %rdx
   jnc      .377
   mov      -8(%r14), %r11
   testb    $1, (%r11)
   jz       .378
   xor      %rax, Stacks
   jmp      gc_60
.378:
   cmp      %r12, -16(%r14)
   jz       gc_60
   mov      -16-(EnvMid-EnvApply)(%r14), %r13
.381:
   cmp      %r12, %r13
   jz       gc_60
   mov      (%r13), %r15
   add      $16, %r13
.383:
   andb     $~1, (%r13)
   add      $16, %r13
   cmp      %r15, %r13
   jc       .383
   mov      8(%r15), %r13
   jmp      .381
.377:
   jz       .384
gc_60:
   add      %rax, %rax
   jmp      .376
.384:
   mov      EnvApply, %r14
.385:
   cmp      %r12, %r14
   jz       .386
   mov      (%r14), %r15
   add      $16, %r14
.387:
   andb     $~1, (%r14)
   add      $16, %r14
   cmp      %r15, %r14
   jc       .387
   mov      8(%r15), %r14
   jmp      .385
.386:
   mov      %r12, %r13
   mov      Heaps, %r14
   mov      GcCount, %rdx
   cmp      %r12, %rdx
   jz       .388
.389:
   lea      1048560(%r14), %r15
.390:
   testb    $1, 8(%r15)
   jz       .391
   mov      %r13, (%r15)
   mov      %r15, %r13
   dec      %rdx
.391:
   sub      $16, %r15
   cmp      %r14, %r15
   jnc      .390
   mov      1048576(%r14), %r14
   cmp      %r12, %r14
   jnz      .389
   mov      %r13, Avail
.392:
   cmp      %r12, %rdx
   js       .394
   call     heapAlloc
   sub      $65536, %rdx
   jmp      .392
.388:
   mov      $Heaps, %rbx
.395:
   mov      Avail, %rax
   mov      $65536, %rdx
   lea      1048560(%r14), %r15
.396:
   testb    $1, 8(%r15)
   jz       .397
   mov      %r13, (%r15)
   mov      %r15, %r13
   dec      %rdx
.397:
   sub      $16, %r15
   cmp      %r14, %r15
   jnc      .396
   cmp      %r12, %rdx
   jz       .398
   lea      1048576(%r14), %rbx
   mov      (%rbx), %r14
   jmp      .399
.398:
   mov      %rax, Avail
   mov      1048576(%r14), %r14
   mov      %rdx, %r12
   mov      (%rbx), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r14, (%rbx)
.399:
   cmp      %r12, %r14
   jnz      .395
.394:
   pop      %r15
   pop      %r14
   pop      %r13
   pop      %rbx
   pop      %rdx
   pop      %rax
   ret

   .balign  16
   nop
   nop
   .globl  doGc
doGc:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .400
   call     gc
   jmp      .401
.400:
   mov      %rbx, %r13
   call     xCntEX_FE
   shl      $16, %rbx
   mov      GcCount, %rdx
   mov      %rbx, GcCount
   call     gc
   mov      %rdx, GcCount
   mov      %r13, %rbx
.401:
   pop      %r13
   ret

   .balign  16
   .globl  cons_A
cons_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .402
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.402:
   call     gc
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  cons_C
cons_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jz       .403
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.403:
   call     gc
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  cons_E
cons_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .404
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.404:
   call     gc
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  cons_X
cons_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .405
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.405:
   call     gc
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  cons_Y
cons_Y:
   mov      Avail, %r14
   cmp      %r12, %r14
   jz       .406
   mov      (%r14), %r10
   mov      %r10, Avail
   ret
.406:
   call     gc
   mov      Avail, %r14
   mov      (%r14), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  cons_Z
cons_Z:
   mov      Avail, %r15
   cmp      %r12, %r15
   jz       .407
   mov      (%r15), %r10
   mov      %r10, Avail
   ret
.407:
   call     gc
   mov      Avail, %r15
   mov      (%r15), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consA_A
consA_A:
   cmp      %r12, Avail
   jz       .408
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.408:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consC_A
consC_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .409
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.409:
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consE_A
consE_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .410
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.410:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consX_A
consX_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jz       .411
   mov      (%rax), %r10
   mov      %r10, Avail
   ret
.411:
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consA_C
consA_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jz       .412
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.412:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consC_C
consC_C:
   cmp      %r12, Avail
   jz       .413
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.413:
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consE_C
consE_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jz       .414
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret
.414:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
   mov      (%rdx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consA_E
consA_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .415
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.415:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consC_E
consC_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .416
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.416:
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consE_E
consE_E:
   cmp      %r12, Avail
   jz       .417
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.417:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consX_E
consX_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .418
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.418:
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consA_X
consA_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .419
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.419:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consE_X
consE_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .420
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.420:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consY_X
consY_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jz       .421
   mov      (%r13), %r10
   mov      %r10, Avail
   ret
.421:
   push     %rbp
   mov      %rsp, %rbp
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r13
   mov      (%r13), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consA_Y
consA_Y:
   mov      Avail, %r14
   cmp      %r12, %r14
   jz       .422
   mov      (%r14), %r10
   mov      %r10, Avail
   ret
.422:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r14
   mov      (%r14), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consA_Z
consA_Z:
   mov      Avail, %r15
   cmp      %r12, %r15
   jz       .423
   mov      (%r15), %r10
   mov      %r10, Avail
   ret
.423:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %r15
   mov      (%r15), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consAC_E
consAC_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jz       .424
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret
.424:
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   ret

   .balign  16
   .globl  consSymX_E
consSymX_E:
   cmp      $2, %r13
   jz       retNil
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .425
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
.425:
   mov      (%rbx), %r10
   mov      %r10, Avail
   mov      %r13, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
   ret

   .balign  16
   .globl  boxNum_A
boxNum_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .426
   call     gc
   mov      Avail, %rax
.426:
   mov      (%rax), %r10
   mov      %r10, Avail
   movq     $2, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .globl  boxNum_C
boxNum_C:
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jnz      .427
   call     gc
   mov      Avail, %rdx
.427:
   mov      (%rdx), %r10
   mov      %r10, Avail
   movq     $2, 8(%rdx)
   orb      $4, %dl
   ret

   .balign  16
   .globl  boxNum_E
boxNum_E:
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .428
   call     gc
   mov      Avail, %rbx
.428:
   mov      (%rbx), %r10
   mov      %r10, Avail
   movq     $2, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .globl  boxNum_X
boxNum_X:
   mov      Avail, %r13
   cmp      %r12, %r13
   jnz      .429
   call     gc
   mov      Avail, %r13
.429:
   mov      (%r13), %r10
   mov      %r10, Avail
   movq     $2, 8(%r13)
   orb      $4, %r13b
   ret

   .balign  16
   .globl  boxNumA_A
boxNumA_A:
   push     %rax
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .430
   call     gc
   mov      Avail, %rax
.430:
   mov      (%rax), %r10
   mov      %r10, Avail
   popq     (%rax)
   movq     $2, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .globl  boxNumE_E
boxNumE_E:
   push     %rbx
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .431
   call     gc
   mov      Avail, %rbx
.431:
   mov      (%rbx), %r10
   mov      %r10, Avail
   popq     (%rbx)
   movq     $2, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .globl  consNumAC_A
consNumAC_A:
   push     %rax
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .432
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
.432:
   mov      (%rax), %r10
   mov      %r10, Avail
   popq     (%rax)
   mov      %rdx, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .globl  consNumAE_A
consNumAE_A:
   push     %rax
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .433
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
.433:
   mov      (%rax), %r10
   mov      %r10, Avail
   popq     (%rax)
   mov      %rbx, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .globl  consNumCA_C
consNumCA_C:
   push     %rdx
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jnz      .434
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
.434:
   mov      (%rdx), %r10
   mov      %r10, Avail
   popq     (%rdx)
   mov      %rax, 8(%rdx)
   orb      $4, %dl
   ret

   .balign  16
   .globl  consNumCE_A
consNumCE_A:
   mov      Avail, %rax
   cmp      %r12, %rax
   jnz      .435
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rax
.435:
   mov      (%rax), %r10
   mov      %r10, Avail
   mov      %rdx, (%rax)
   mov      %rbx, 8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .globl  consNumCE_C
consNumCE_C:
   push     %rdx
   mov      Avail, %rdx
   cmp      %r12, %rdx
   jnz      .436
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rdx
.436:
   mov      (%rdx), %r10
   mov      %r10, Avail
   popq     (%rdx)
   mov      %rbx, 8(%rdx)
   orb      $4, %dl
   ret

   .balign  16
   .globl  consNumCE_E
consNumCE_E:
   cmp      %r12, Avail
   jnz      .437
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
.437:
   push     %rbx
   mov      Avail, %rbx
   mov      (%rbx), %r10
   mov      %r10, Avail
   mov      %rdx, (%rbx)
   popq     8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .globl  consNumEA_A
consNumEA_A:
   cmp      %r12, Avail
   jnz      .438
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
.438:
   push     %rax
   mov      Avail, %rax
   mov      (%rax), %r10
   mov      %r10, Avail
   mov      %rbx, (%rax)
   popq     8(%rax)
   orb      $4, %al
   ret

   .balign  16
   .globl  consNumEA_E
consNumEA_E:
   push     %rbx
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .439
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
.439:
   mov      (%rbx), %r10
   mov      %r10, Avail
   popq     (%rbx)
   mov      %rax, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .globl  consNumEC_E
consNumEC_E:
   push     %rbx
   mov      Avail, %rbx
   cmp      %r12, %rbx
   jnz      .440
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     gc
   mov      (%rbp), %rsp
   pop      %rbp
   mov      Avail, %rbx
.440:
   mov      (%rbx), %r10
   mov      %r10, Avail
   popq     (%rbx)
   mov      %rdx, 8(%rbx)
   orb      $4, %bl
   ret

   .balign  16
   .globl  applyXYZ_E
applyXYZ_E:
   mov      (%r14), %rdx
.441:
   testb    $0x02, %dl
   jz       .442
   pushq    EnvApply
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %spl
   jz       .443
   pushq    $2
.443:
   pushq    $Nil
   push     %rdx
   mov      %rsp, %rbx
.444:
   cmp      %r15, %r14
   jz       .445
   sub      $8, %r14
   pushq    (%r14)
   pushq    $2
   pushq    $Nil
   lea      16(%rsp), %rax
   push     %rax
   mov      %rsp, 40(%rsp)
   cmp      StkLimit, %rsp
   jc       stkErrX
   jmp      .444
.445:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvApply
   call     *%rdx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvApply
   ret
.442:
   testb    $0x04, %dl
   jnz      undefinedCX
   cmp      StkLimit, %rsp
   jc       stkErrX
   testb    $0x0E, %dl
   jnz      .446
   push     %r13
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
.447:
   testb    $0x0E, %r13b
   jnz      .448
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .449
   sub      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%rbx)
   jmp      .447
.449:
   movq     $Nil, (%rbx)
   jmp      .447
.448:
   cmp      $Nil, %r13
   jnz      .451
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.452:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .452
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.451:
   cmp      $At, %r13
   jz       .453
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.454:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .454
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.453:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .455
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .456
.455:
   push     %rbp
   mov      %rsp, %rbp
.457:
   sub      $8, %r14
   pushq    (%r14)
   cmp      StkLimit, %rsp
   jc       stkErrX
   cmp      %r15, %r14
   jnz      .457
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.456:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .458
   mov      (%rbp), %rsp
   pop      %rbp
.458:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.459:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .459
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.446:
   mov      (%rdx), %rax
   cmp      $doMeth, %rax
   jnz      .460
   sub      $8, %r14
   mov      (%r14), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .461
   call     dbFetchEX
.461:
   push     %r13
   push     %r15
   push     %r14
   mov      %rdx, %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   xchg     8(%rsp), %r15
   xchg     (%rsp), %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
   pushq    This
   pushq    $This
   mov      (%r14), %r10
   mov      %r10, This
.462:
   testb    $0x0E, %r13b
   jnz      .463
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .464
   sub      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%rbx)
   jmp      .462
.464:
   movq     $Nil, (%rbx)
   jmp      .462
.463:
   cmp      $Nil, %r13
   jnz      .466
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.467:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .467
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.466:
   cmp      $At, %r13
   jz       .468
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.469:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .469
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.468:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .470
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .471
.470:
   push     %rbp
   mov      %rsp, %rbp
.472:
   sub      $8, %r14
   pushq    (%r14)
   cmp      StkLimit, %rsp
   jc       stkErrX
   cmp      %r15, %r14
   jnz      .472
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.471:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .473
   mov      (%rbp), %rsp
   pop      %rbp
.473:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.474:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .474
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.460:
   cmp      (%rax), %rax
   jnz      .475
   call     sharedLibC_FA
   jz       undefinedCX
.475:
   mov      %rax, %rdx
   jmp      .441

   .balign  16
   .globl  applyVarXYZ_E
applyVarXYZ_E:
   mov      (%r14), %rdx
.476:
   testb    $0x02, %dl
   jz       .477
   pushq    EnvApply
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %spl
   jz       .478
   pushq    $2
.478:
   pushq    $Nil
   push     %rdx
   mov      %rsp, %rbx
.479:
   cmp      %r15, %r14
   jz       .480
   sub      $8, %r14
   mov      (%r14), %r10
   pushq    (%r10)
   pushq    $2
   pushq    $Nil
   lea      16(%rsp), %rax
   push     %rax
   mov      %rsp, 40(%rsp)
   cmp      StkLimit, %rsp
   jc       stkErrX
   jmp      .479
.480:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvApply
   call     *%rdx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvApply
   ret
.477:
   testb    $0x04, %dl
   jnz      undefinedCX
   cmp      StkLimit, %rsp
   jc       stkErrX
   testb    $0x0E, %dl
   jnz      .481
   push     %r13
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
.482:
   testb    $0x0E, %r13b
   jnz      .483
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .484
   sub      $8, %r14
   mov      (%r14), %r10
   mov      (%r10), %r10
   mov      %r10, (%rbx)
   jmp      .482
.484:
   movq     $Nil, (%rbx)
   jmp      .482
.483:
   cmp      $Nil, %r13
   jnz      .486
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.487:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .487
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.486:
   cmp      $At, %r13
   jz       .488
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.489:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .489
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.488:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .490
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .491
.490:
   push     %rbp
   mov      %rsp, %rbp
.492:
   sub      $8, %r14
   mov      (%r14), %r10
   pushq    (%r10)
   cmp      StkLimit, %rsp
   jc       stkErrX
   cmp      %r15, %r14
   jnz      .492
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.491:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .493
   mov      (%rbp), %rsp
   pop      %rbp
.493:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.494:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .494
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.481:
   mov      (%rdx), %rax
   cmp      $doMeth, %rax
   jnz      .495
   sub      $8, %r14
   mov      (%r14), %r10
   mov      (%r10), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .496
   call     dbFetchEX
.496:
   push     %r13
   push     %r15
   push     %r14
   mov      %rdx, %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   xchg     8(%rsp), %r15
   xchg     (%rsp), %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   mov      (%rdx), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
   pushq    This
   pushq    $This
   mov      (%r14), %r10
   mov      (%r10), %r10
   mov      %r10, This
.497:
   testb    $0x0E, %r13b
   jnz      .498
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   pushq    (%rbx)
   push     %rbx
   cmp      %r15, %r14
   jz       .499
   sub      $8, %r14
   mov      (%r14), %r10
   mov      (%r10), %r10
   mov      %r10, (%rbx)
   jmp      .497
.499:
   movq     $Nil, (%rbx)
   jmp      .497
.498:
   cmp      $Nil, %r13
   jnz      .501
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.502:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .502
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.501:
   cmp      $At, %r13
   jz       .503
   pushq    (%r13)
   push     %r13
   movq     $Nil, (%r13)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.504:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .504
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.503:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   cmp      %r15, %r14
   jnz      .505
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .506
.505:
   push     %rbp
   mov      %rsp, %rbp
.507:
   sub      $8, %r14
   mov      (%r14), %r10
   pushq    (%r10)
   cmp      StkLimit, %rsp
   jc       stkErrX
   cmp      %r15, %r14
   jnz      .507
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.506:
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .508
   mov      (%rbp), %rsp
   pop      %rbp
.508:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.509:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .509
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r13
   ret
.495:
   cmp      (%rax), %rax
   jnz      .510
   call     sharedLibC_FA
   jz       undefinedCX
.510:
   mov      %rax, %rdx
   jmp      .476

   .balign  16
   nop
   nop
   .globl  doApply
doApply:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
   mov      8(%r15), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
.511:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jnz      .513
   push     %rbx
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   xchg     (%rsp), %rbx
   jmp      .511
.513:
   testb    $0x0E, %bl
   jnz      .514
   pushq    (%rbx)
   cmp      StkLimit, %rsp
   jc       stkErrX
   mov      8(%rbx), %rbx
   jmp      .513
.514:
   mov      %rsp, %r15
   push     %rbp
   mov      %rsp, %rbp
   call     applyXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPass
doPass:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.515:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jnz      .516
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .515
.516:
   mov      EnvNext, %rdx
.517:
   cmp      EnvArgs, %rdx
   jz       .518
   sub      $8, %rdx
   pushq    (%rdx)
   jmp      .517
.518:
   mov      %rsp, %r15
   push     %rbp
   mov      %rsp, %rbp
   call     applyXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMaps
doMaps:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
.519:
   testb    $0x0E, %r15b
   jnz      .520
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   jmp      .519
.520:
   push     %rbp
   mov      %rsp, %rbp
   mov      -8(%r14), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .521
   call     dbFetchEX
.521:
   mov      -8(%rbx), %rbx
   andb     $~8, %bl
   mov      %rbx, -8(%r14)
   mov      $Nil, %rbx
.522:
   testb    $0x0E, -8(%r14)
   jnz      .523
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   lea      8(%rbp), %r15
.524:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .524
   jmp      .522
.523:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMap
doMap:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.525:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .525
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.526:
   testb    $0x0E, -8(%r14)
   jnz      .527
   push     %r14
   lea      8(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   lea      8(%rbp), %r15
.528:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .528
   jmp      .526
.527:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMapc
doMapc:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.529:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .529
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.530:
   testb    $0x0E, -8(%r14)
   jnz      .531
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   lea      8(%rbp), %r15
.532:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .532
   jmp      .530
.531:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMaplist
doMaplist:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.533:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .533
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.534:
   testb    $0x0E, -8(%r14)
   jnz      .535
   push     %r14
   lea      16(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .536
   mov      %rdx, 8(%rbp)
   jmp      .537
.536:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.537:
   mov      %rdx, -8(%rbp)
   lea      16(%rbp), %r15
.538:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .538
   jmp      .534
.535:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMapcar
doMapcar:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.539:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .539
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.540:
   testb    $0x0E, -8(%r14)
   jnz      .541
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .542
   mov      %rdx, 8(%rbp)
   jmp      .543
.542:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.543:
   mov      %rdx, -8(%rbp)
   lea      16(%rbp), %r15
.544:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .544
   jmp      .540
.541:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMapcon
doMapcon:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.545:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .545
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.546:
   testb    $0x0E, -8(%r14)
   jnz      .547
   push     %r14
   lea      16(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   testb    $0x0E, %bl
   jnz      .548
   cmp      %r12, -8(%rbp)
   jnz      .549
   mov      %rbx, 8(%rbp)
   jmp      .550
.549:
   mov      -8(%rbp), %rax
.551:
   testb    $0x0E, 8(%rax)
   jnz      .552
   mov      8(%rax), %rax
   jmp      .551
.552:
   mov      %rbx, 8(%rax)
.550:
   mov      %rbx, -8(%rbp)
.548:
   lea      16(%rbp), %r15
.553:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .553
   jmp      .546
.547:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMapcan
doMapcan:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.554:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .554
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.555:
   testb    $0x0E, -8(%r14)
   jnz      .556
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   testb    $0x0E, %bl
   jnz      .557
   cmp      %r12, -8(%rbp)
   jnz      .558
   mov      %rbx, 8(%rbp)
   jmp      .559
.558:
   mov      -8(%rbp), %rax
.560:
   testb    $0x0E, 8(%rax)
   jnz      .561
   mov      8(%rax), %rax
   jmp      .560
.561:
   mov      %rbx, 8(%rax)
.559:
   mov      %rbx, -8(%rbp)
.557:
   lea      16(%rbp), %r15
.562:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .562
   jmp      .555
.556:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFilter
doFilter:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.563:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .563
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.564:
   testb    $0x0E, -8(%r14)
   jnz      .565
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .566
   call     consE_C
   mov      -8(%r14), %r10
   mov      (%r10), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .567
   mov      %rdx, 8(%rbp)
   jmp      .568
.567:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.568:
   mov      %rdx, -8(%rbp)
.566:
   lea      16(%rbp), %r15
.569:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .569
   jmp      .564
.565:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doExtract
doExtract:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.570:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .570
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.571:
   testb    $0x0E, -8(%r14)
   jnz      .572
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .573
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   cmp      %r12, -8(%rbp)
   jnz      .574
   mov      %rdx, 8(%rbp)
   jmp      .575
.574:
   mov      -8(%rbp), %r11
   mov      %rdx, 8(%r11)
.575:
   mov      %rdx, -8(%rbp)
.573:
   lea      16(%rbp), %r15
.576:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .576
   jmp      .571
.572:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSeek
doSeek:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.577:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .577
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.578:
   testb    $0x0E, -8(%r14)
   jnz      .579
   push     %r14
   lea      8(%rbp), %r15
   call     applyXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .580
   mov      -8(%r14), %rbx
   jmp      .579
.580:
   lea      8(%rbp), %r15
.581:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .581
   jmp      .578
.579:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFind
doFind:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.582:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .582
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.583:
   testb    $0x0E, -8(%r14)
   jnz      .584
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .585
   mov      -8(%r14), %r10
   mov      (%r10), %rbx
   jmp      .584
.585:
   lea      8(%rbp), %r15
.586:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .586
   jmp      .583
.584:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPick
doPick:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.587:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .587
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rbx
.588:
   testb    $0x0E, -8(%r14)
   jnz      .589
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jnz      .589
   lea      8(%rbp), %r15
.590:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .590
   jmp      .588
.589:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCnt
doCnt:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.591:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .591
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
.592:
   testb    $0x0E, -8(%r14)
   jnz      .593
   push     %r14
   lea      8(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   cmp      $Nil, %rbx
   jz       .594
   addq     $16, (%rsp)
.594:
   lea      8(%rbp), %r15
.595:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .595
   jmp      .592
.593:
   pop      %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSum
doSum:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.596:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .596
   pushq    $2
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
.597:
   testb    $0x0E, -8(%r14)
   jnz      .598
   push     %r14
   lea      24(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   testb    $0x06, %bl
   jz       .599
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     addAE_A
   mov      %rax, 8(%rbp)
.599:
   lea      24(%rbp), %r15
.600:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .600
   jmp      .597
.598:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMaxi
doMaxi:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.601:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .601
   pushq    $Nil
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.602:
   testb    $0x0E, -8(%r14)
   jnz      .603
   push     %r14
   lea      24(%rbp), %r15
   call     applyVarXYZ_E
   mov      %rbx, %r14
   mov      16(%rbp), %rax
   call     compareAE_F
   jnc      .604
   mov      (%rsp), %r10
   mov      -8(%r10), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rbp)
   mov      %r14, 16(%rbp)
.604:
   pop      %r14
   lea      24(%rbp), %r15
.605:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .605
   jmp      .602
.603:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMini
doMini:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
.606:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .606
   pushq    $TSym
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.607:
   testb    $0x0E, -8(%r14)
   jnz      .608
   push     %r14
   lea      24(%rbp), %r15
   call     applyVarXYZ_E
   mov      %rbx, %r14
   mov      16(%rbp), %rax
   call     compareAE_F
   jbe      .609
   mov      (%rsp), %r10
   mov      -8(%r10), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rbp)
   mov      %r14, 16(%rbp)
.609:
   pop      %r14
   lea      24(%rbp), %r15
.610:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .610
   jmp      .607
.608:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFish
doFish:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rsp, %r14
   mov      8(%r15), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   pushq    $2
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %rax
   call     fishAXY
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  fishAXY
fishAXY:
   push     %rax
   push     %r14
   lea      24(%rbp), %r15
   mov      %rax, (%r15)
   call     applyXYZ_E
   pop      %r14
   pop      %rax
   cmp      $Nil, %rbx
   jz       .611
   call     cons_C
   mov      %rax, (%rdx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%rbp)
   ret
.611:
   testb    $0x0E, %al
   jnz      ret
   cmpq     $Nil, 8(%rax)
   jz       .612
   push     %rax
   mov      8(%rax), %rax
   call     fishAXY
   pop      %rax
.612:
   mov      (%rax), %rax
   jmp      fishAXY

   .balign  16
   nop
   nop
   .globl  doBy
doBy:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      (%r15), %rbx
   mov      8(%r15), %r15
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   xchg     (%rsp), %rbx
   push     %rbx
   mov      %rsp, %r14
.613:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       .613
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   push     %r12
.614:
   testb    $0x0E, -8(%r14)
   jnz      .615
   push     %r14
   lea      16(%rbp), %r15
   call     applyVarXYZ_E
   pop      %r14
   call     consE_C
   mov      %rbx, (%rdx)
   mov      -8(%r14), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rdx)
   call     consC_A
   mov      %rdx, (%rax)
   movq     $Nil, 8(%rax)
   cmp      %r12, -8(%rbp)
   jnz      .616
   mov      %rax, 8(%rbp)
   jmp      .617
.616:
   mov      -8(%rbp), %r11
   mov      %rax, 8(%r11)
.617:
   mov      %rax, -8(%rbp)
   lea      16(%rbp), %r15
.618:
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   add      $8, %r15
   cmp      %r14, %r15
   jnz      .618
   jmp      .614
.615:
   mov      %r14, %r15
   add      $8, %r14
   mov      8(%rbp), %r10
   mov      %r10, (%r15)
   call     applyXYZ_E
   mov      %rbx, %rdx
.619:
   testb    $0x0E, %dl
   jnz      .620
   mov      (%rdx), %r10
   mov      8(%r10), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %rdx
   jmp      .619
.620:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .globl  redefMsgEC
redefMsgEC:
   pushq    OutFile
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   pushq    PutB
   movq     $putStdoutB, PutB
   push     %rdx
   mov      $HashBlank, %rdx
   call     outStringC
   call     printE
   pop      %rbx
   cmp      %r12, %rbx
   jz       .621
   call     space
   call     printE_E
.621:
   mov      $Redefined, %rdx
   call     outStringC
   popq     PutB
   popq     OutFile
   ret
HashBlank:
   .asciz   "# "
Redefined:
   .asciz   " redefined\n"

   .globl  putSrcEC_E
putSrcEC_E:
   cmpq     $Nil, Dbg
   jz       .622
   testb    $0x08, -8(%rbx)
   jnz      .622
   mov      InFile, %rax
   cmp      %r12, %rax
   jz       .622
   cmp      %r12, 48(%rax)
   jz       .622
   push     %r13
   push     %rbx
   push     %rdx
   mov      $Dbg, %rdx
   call     getEC_E
   mov      %rbx, %r13
   mov      InFile, %r10
   mov      48(%r10), %rbx
   call     mkStrE_E
   mov      InFile, %r10
   mov      40(%r10), %rax
   shl      $4, %rax
   orb      $2, %al
   push     %rbx
   call     consE_E
   mov      %rax, (%rbx)
   popq     8(%rbx)
   mov      (%rsp), %rax
   cmp      %r12, %rax
   jnz      .626
   cmp      $Nil, %r13
   jnz      .627
   push     %rbx
   call     consE_E
   popq     (%rbx)
   movq     $Nil, 8(%rbx)
   mov      8(%rsp), %rax
   mov      $Dbg, %rdx
   call     putACE
   jmp      .629
.627:
   mov      %rbx, (%r13)
   jmp      .629
.626:
   cmp      $Nil, %r13
   jnz      .630
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   call     consC_E
   movq     $Nil, (%rbx)
   mov      %rdx, 8(%rbx)
   mov      8(%rsp), %rax
   mov      $Dbg, %rdx
   call     putACE
   jmp      .629
.630:
   mov      8(%r13), %rdx
.632:
   testb    $0x0E, %dl
   jz       .633
   call     consE_C
   mov      (%rsp), %r10
   mov      %r10, (%rdx)
   mov      %rbx, 8(%rdx)
   call     consC_A
   mov      %rdx, (%rax)
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r13)
   jmp      .629
.633:
   mov      (%rdx), %r11
   mov      (%rsp), %r10
   cmp      %r10, (%r11)
   jnz      .635
   mov      (%rdx), %r11
   mov      %rbx, 8(%r11)
   jmp      .629
.635:
   mov      8(%rdx), %rdx
   jmp      .632
.629:
   pop      %rdx
   pop      %rbx
   pop      %r13
.622:
   rep
   ret

   .balign  16
   .globl  redefineCEX
redefineCEX:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   call     checkVarEX
   mov      (%rbx), %rax
   cmp      $Nil, %rax
   jz       .636
   cmp      %rbx, %rax
   jz       .636
   push     %rdx
   push     %rbx
   mov      %rdx, %rbx
   call     equalAE_F
   jz       .638
   mov      (%rsp), %rbx
   mov      %r12, %rdx
   call     redefMsgEC
.638:
   pop      %rbx
   pop      %rdx
.636:
   mov      %rdx, (%rbx)
   mov      %r12, %rdx
   call     putSrcEC_E
   ret

   .balign  16
   nop
   nop
   .globl  doQuote
doQuote:
   mov      8(%rbx), %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doAs
doAs:
   mov      8(%rbx), %rbx
   push     %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   cmp      $Nil, %rbx
   cmovnzq  8(%rax), %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doPid
doPid:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      Pid, %rax
   testb    $0x0E, %bl
   jz       .640
   cmp      %rax, %rbx
   pop      %rbx
   jnz      retNil
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret
.640:
   cmp      %rax, (%rbx)
   jnz      .641
   pop      %rbx
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret
.641:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .640
   pop      %rax
   ret

   .balign  16
   nop
   nop
   .globl  doLit
doLit:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .642
   cmp      $Nil, %rbx
   jz       .642
   cmp      $TSym, %rbx
   jz       .642
   testb    $0x0E, %bl
   jnz      doLit_10
   testb    $0x06, (%rbx)
   jnz      .642
doLit_10:
   mov      %rbx, %rax
   call     consE_E
   movq     $Quote, (%rbx)
   mov      %rax, 8(%rbx)
.642:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doEval
doEval:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .646
doEval_10:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.646:
   cmp      %r12, EnvBind
   jz       doEval_10
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   shr      $4, %rbx
   push     %rbx
   push     %r12
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %r14
   mov      -8(%rbp), %rdx
   mov      EnvBind, %r14
.647:
   mov      (%r14), %rax
   incq     -16(%rbp)
   mov      -8(%rbp), %r10
   sub      %r10, -8(%r14)
   jnc      .648
   add      $8, %r14
.649:
   mov      (%r14), %r13
   mov      (%r13), %r10
   xchg     %r10, 8(%r14)
   mov      %r10, (%r13)
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .649
   cmp      $At, %r13
   jnz      .648
   dec      %rdx
   jz       .651
.648:
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .647
.651:
   testb    $0x0E, %bl
   jz       .652
   mov      8(%rbp), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .653
.652:
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
.654:
   mov      (%rbx), %r13
   pushq    (%r13)
   push     %r13
   mov      -16(%rbp), %rdx
   mov      EnvBind, %r14
.655:
   mov      (%r14), %rax
   add      $8, %r14
.656:
   cmp      (%r14), %r13
   jnz      .657
   mov      8(%r14), %r10
   mov      %r10, (%r13)
   jmp      doEval_20
.657:
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .656
   dec      %rdx
   jz       doEval_20
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .655
doEval_20:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .654
   mov      (%rbp), %r10
   mov      8(%r10), %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   pop      %rbp
.659:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .659
   pop      %rbp
   popq     EnvBind
.653:
   mov      -16(%rbp), %rdx
.660:
   mov      %rdx, %rax
   mov      EnvBind, %r14
.661:
   dec      %rax
   jz       .662
   mov      (%r14), %r10
   mov      8(%r10), %r14
   jmp      .661
.662:
   mov      -8(%rbp), %r10
   add      %r10, -8(%r14)
   jnz      .663
   mov      (%r14), %r10
   lea      -16(%r10), %rax
.664:
   mov      (%rax), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%rax)
   mov      %r10, (%r11)
   sub      $16, %rax
   cmp      %r14, %rax
   jnc      .664
.663:
   dec      %rdx
   jnz      .660
   pop      %r14
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doRun
doRun:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .665
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .666
doRun_10:
   testb    $0x08, %bl
   jz       .667
   mov      (%rbx), %rbx
   jmp      .668
.667:
   call     runE_E
.668:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.666:
   cmp      %r12, EnvBind
   jz       doRun_10
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   shr      $4, %rbx
   push     %rbx
   push     %r12
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %r14
   mov      -8(%rbp), %rdx
   mov      EnvBind, %r14
.669:
   mov      (%r14), %rax
   incq     -16(%rbp)
   mov      -8(%rbp), %r10
   sub      %r10, -8(%r14)
   jnc      .670
   add      $8, %r14
.671:
   mov      (%r14), %r13
   mov      (%r13), %r10
   xchg     %r10, 8(%r14)
   mov      %r10, (%r13)
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .671
   cmp      $At, %r13
   jnz      .670
   dec      %rdx
   jz       .673
.670:
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .669
.673:
   testb    $0x0E, %bl
   jz       .674
   mov      8(%rbp), %r13
   testb    $0x08, %r13b
   jz       .675
   mov      (%r13), %rbx
   jmp      .677
.675:
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   jmp      .677
.674:
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
.678:
   mov      (%rbx), %r13
   pushq    (%r13)
   push     %r13
   mov      -16(%rbp), %rdx
   mov      EnvBind, %r14
.679:
   mov      (%r14), %rax
   add      $8, %r14
.680:
   cmp      (%r14), %r13
   jnz      .681
   mov      8(%r14), %r10
   mov      %r10, (%r13)
   jmp      doRun_20
.681:
   add      $16, %r14
   cmp      %rax, %r14
   jnz      .680
   dec      %rdx
   jz       doRun_20
   mov      8(%rax), %r14
   cmp      %r12, %r14
   jnz      .679
doRun_20:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .678
   mov      (%rbp), %r10
   mov      8(%r10), %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   testb    $0x08, %r13b
   jz       .683
   mov      (%r13), %rbx
   jmp      .684
.683:
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
.684:
   pop      %rax
   pop      %rbp
.685:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .685
   pop      %rbp
   popq     EnvBind
.677:
   mov      -16(%rbp), %rdx
.686:
   mov      %rdx, %rax
   mov      EnvBind, %r14
.687:
   dec      %rax
   jz       .688
   mov      (%r14), %r10
   mov      8(%r10), %r14
   jmp      .687
.688:
   mov      -8(%rbp), %r10
   add      %r10, -8(%r14)
   jnz      .689
   mov      (%r14), %r10
   lea      -16(%r10), %rax
.690:
   mov      (%rax), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%rax)
   mov      %r10, (%r11)
   sub      $16, %rax
   cmp      %r14, %rax
   jnc      .690
.689:
   dec      %rdx
   jnz      .686
   pop      %r14
   mov      (%rbp), %rsp
   pop      %rbp
.665:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDef
doDef:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needSymEX
   testb    $0x08, -8(%rbx)
   jz       .691
   call     dbTouchEX
.691:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .692
   mov      16(%rbp), %rdx
   mov      (%rdx), %rax
   cmp      $Nil, %rax
   jz       .693
   cmp      %rdx, %rax
   jz       .693
   call     equalAE_F
   jz       .693
   mov      %rdx, %rbx
   mov      %r12, %rdx
   call     redefMsgEC
.693:
   mov      16(%rbp), %rbx
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   mov      %r12, %rdx
   call     putSrcEC_E
   jmp      .696
.692:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      24(%rbp), %rbx
   testb    $0x08, -8(%rbx)
   jz       .697
   call     dbTouchEX
.697:
   mov      16(%rbp), %rdx
   call     getEC_E
   cmp      $Nil, %rbx
   jz       .698
   mov      8(%rbp), %rax
   call     equalAE_F
   jz       .698
   mov      24(%rbp), %rbx
   mov      16(%rbp), %rdx
   call     redefMsgEC
.698:
   mov      24(%rbp), %rax
   mov      16(%rbp), %rdx
   mov      8(%rbp), %rbx
   call     putACE
   mov      24(%rbp), %rbx
   mov      16(%rbp), %rdx
   call     putSrcEC_E
.696:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDe
doDe:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   mov      8(%r13), %rdx
   call     redefineCEX
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDm
doDm:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   testb    $0x0E, %bl
   jz       .700
   mov      Class, %rdx
   jmp      .701
.700:
   mov      8(%rbx), %rdx
   testb    $0x0E, %dl
   jnz      .702
   mov      8(%rdx), %rbx
   cmp      $Nil, %rbx
   jnz      .703
   mov      Class, %rbx
.703:
   mov      (%rdx), %rdx
   call     getEC_E
   mov      %rbx, %rdx
   mov      (%r14), %rbx
.702:
   mov      (%rbx), %rbx
.701:
   cmp      $TSym, %rbx
   jz       .704
   push     %rdx
   mov      $doMeth, %rdx
   call     redefineCEX
   pop      %rdx
.704:
   mov      8(%r14), %rax
   testb    $0x06, %al
   jnz      .705
   testb    $0x08, %al
   jz       .705
   mov      (%rax), %rax
.707:
   testb    $0x0E, %al
   jnz      msgErrAX
   testb    $0x0E, (%rax)
   jnz      msgErrAX
   mov      (%rax), %r10
   cmp      (%r10), %rbx
   jnz      .708
   mov      (%rax), %r14
   jmp      .705
.708:
   mov      8(%rax), %rax
   jmp      .707
.705:
   mov      (%rdx), %r13
.710:
   testb    $0x0E, %r13b
   jnz      .711
   testb    $0x0E, (%r13)
   jnz      .711
   mov      (%r13), %r10
   cmp      (%r10), %rbx
   jnz      .712
   push     %rbx
   mov      (%r13), %r10
   mov      8(%r10), %rbx
   mov      8(%r14), %rax
   call     equalAE_F
   jz       .713
   mov      (%rsp), %rbx
   push     %rdx
   call     redefMsgEC
   pop      %rdx
.713:
   pop      %rbx
   mov      (%r13), %r11
   mov      8(%r14), %r10
   mov      %r10, 8(%r11)
   call     putSrcEC_E
   pop      %r14
   pop      %r13
   ret
.712:
   mov      8(%r13), %r13
   jmp      .710
.711:
   testb    $0x0E, (%r14)
   jz       .714
   call     cons_A
   mov      %r14, (%rax)
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
   jmp      .715
.714:
   call     cons_A
   mov      %rbx, (%rax)
   mov      8(%r14), %r10
   mov      %r10, 8(%rax)
   push     %rax
   call     consA_A
   popq     (%rax)
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
.715:
   mov      %rax, (%rdx)
   call     putSrcEC_E
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  evMethodACXYZ_E
evMethodACXYZ_E:
   push     %r15
   push     %r14
   pushq    EnvMeth
   mov      (%rdx), %r14
   mov      8(%rdx), %r15
   pushq    EnvBind
   cmp      StkLimit, %rsp
   jc       stkErr
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $At
   push     %rax
   pushq    $This
.716:
   testb    $0x0E, %r14b
   jnz      .717
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    (%r14)
   mov      8(%r14), %r14
   jmp      .716
.717:
   cmp      $Nil, %r14
   jnz      .718
   mov      %rsp, %r14
.719:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .719
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%rbp), %r10
   lea      16(%r10), %r10
   mov      %r10, EnvMeth
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.720:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .720
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   ret
.718:
   cmp      $At, %r14
   jz       .721
   pushq    (%r14)
   push     %r14
   mov      %r13, (%r14)
   lea      16(%rsp), %r14
.722:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rbp, %r14
   jnz      .722
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%rbp), %r10
   lea      16(%r10), %r10
   mov      %r10, EnvMeth
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   pop      %rax
   pop      %rbp
.723:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .723
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   ret
.721:
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, %r14
   push     %r12
   pushq    EnvNext
   pushq    EnvArgs
   testb    $0x0E, %r13b
   jz       .724
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   jmp      .725
.724:
   push     %rbp
   mov      %rsp, %rbp
.726:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .726
   mov      %rsp, EnvArgs
   mov      %rbp, EnvNext
   push     %rbp
   mov      %rsp, %rbp
.725:
   mov      %r14, EnvBind
   mov      (%r14), %r10
   lea      16(%r10), %r10
   mov      %r10, EnvMeth
   mov      (%r14), %rdx
   add      $8, %r14
.727:
   mov      (%r14), %r13
   add      $8, %r14
   mov      (%r13), %rax
   mov      (%r14), %r10
   mov      %r10, (%r13)
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .727
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      %r12, EnvNext
   jz       .728
   mov      (%rbp), %rsp
   pop      %rbp
.728:
   popq     EnvArgs
   popq     EnvNext
   pop      %rax
   pop      %rbp
.729:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .729
   pop      %rbp
   popq     EnvBind
   popq     EnvMeth
   pop      %rax
   pop      %rax
   ret

   .balign  16
   .globl  methodEY_FCYZ
methodEY_FCYZ:
   mov      (%rbx), %rax
   testb    $0x0E, %al
   jnz      .730
.731:
   mov      (%rax), %rdx
   testb    $0x0E, %dl
   jnz      .734
   cmp      (%rdx), %r14
   jnz      .733
   mov      8(%rdx), %rdx
   ret
.733:
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jnz      ret
   jmp      .731
.734:
   mov      %rax, %r15
   mov      (%rax), %rbx
   push     %rax
   cmp      StkLimit, %rsp
   jc       stkErr
   call     methodEY_FCYZ
   pop      %rax
   jz       ret
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .734
.730:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doBox
doBox:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   movq     $2, (%rax)
   orb      $8, %al
   mov      %rbx, (%rax)
   mov      %rax, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doNew
doNew:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .735
   call     consE_A
   movq     $2, (%rax)
   orb      $8, %al
   mov      %rbx, (%rax)
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   jmp      .736
.735:
   cmp      $Nil, %rbx
   jnz      .737
   call     cons_E
   movq     $2, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   jmp      .738
.737:
   testb    $0x02, %bl
   mov      $18, %r10
   cmovzq   %r10, %rbx
   shr      $4, %rbx
   call     newIdEX_X
   call     externX_E
   mov      -8(%rbx), %rax
   shl      $1, %rax
   stc
   rcr      $1, %rax
   mov      %rax, -8(%rbx)
.738:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %rax
   mov      %rbx, (%rax)
.736:
   mov      8(%r14), %r13
   mov      %rax, %rbx
   mov      $TSym, %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      .741
   mov      16(%rbp), %rax
   call     evMethodACXYZ_E
   jmp      .740
.741:
   testb    $0x0E, %r13b
   jnz      .740
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %rax
   mov      8(%rbp), %rdx
   call     putACE
   mov      8(%r13), %r13
   jmp      .741
.740:
   mov      16(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doType
doType:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .743
   testb    $0x08, %bl
   jz       .743
   testb    $0x08, -8(%rbx)
   jz       .745
   call     dbFetchEX
.745:
   pop      %r13
   mov      (%rbx), %rbx
   mov      %rbx, %rdx
.746:
   testb    $0x0E, %bl
   jnz      retNil
   testb    $0x0E, (%rbx)
   jz       .747
   mov      %rbx, %rax
.748:
   testb    $0x06, (%rax)
   jnz      retNil
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .749
   cmp      $Nil, %rax
   jnz      retNil
   rep
   ret
.749:
   cmp      %rax, %rdx
   jz       retNil
   jmp      .748
.747:
   mov      8(%rbx), %rbx
   cmp      %rbx, %rdx
   jz       retNil
   jmp      .746
.743:
   pop      %r13
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doIsa
doIsa:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .750
   testb    $0x08, %bl
   jz       .750
   testb    $0x08, -8(%rbx)
   jz       .752
   call     dbFetchEX
.752:
   mov      8(%rbp), %rdx
   testb    $0x0E, %dl
   jz       .753
   call     isaCE_F
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   jmp      .754
.753:
   mov      %rdx, %r14
.755:
   mov      (%r14), %rdx
   call     isaCE_F
   jz       .756
   mov      $Nil, %rbx
   jmp      .754
.756:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .755
.754:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.750:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
isaCE_F:
   mov      (%rbx), %r13
   mov      %r13, %rax
.758:
   testb    $0x0E, %r13b
   jnz      ret
   testb    $0x0E, (%r13)
   jz       .759
.760:
   testb    $0x06, (%r13)
   jnz      ret
   mov      (%r13), %r10
   testb    $0x08, -8(%r10)
   jnz      ret
   cmp      (%r13), %rdx
   jz       ret
   push     %rax
   push     %rbx
   push     %r13
   mov      (%r13), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     isaCE_F
   pop      %r13
   pop      %rbx
   pop      %rax
   jz       ret
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      ret
   cmp      %r13, %rax
   jz       retnz
   testb    $0x0E, (%r13)
   jz       retnz
   jmp      .760
.759:
   mov      8(%r13), %r13
   cmp      %r13, %rax
   jz       retnz
   jmp      .758

   .balign  16
   nop
   nop
   .globl  doMethod
doMethod:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .761
   call     dbFetchEX
.761:
   mov      8(%rbp), %r14
   call     methodEY_FCYZ
   mov      %rdx, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMeth
doMeth:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, -8(%rbx)
   jz       .762
   call     dbFetchEX
.762:
   pushq    8(%r14)
   mov      (%r13), %r14
.763:
   testb    $0x06, %r14b
   jnz      msgErrYX
   testb    $0x08, %r14b
   jz       msgErrYX
   testb    $0x02, (%r14)
   jz       .764
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   mov      8(%rbp), %rax
   pop      %r13
   call     evMethodACXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.764:
   mov      (%r14), %r14
   jmp      .763

   .balign  16
   nop
   nop
   .globl  doSend
doSend:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .765
   call     dbFetchEX
.765:
   mov      8(%r14), %r13
   mov      16(%rbp), %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      msgErrYX
   mov      8(%rbp), %rax
   call     evMethodACXYZ_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doTry
doTry:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jnz      doTry_90
   testb    $0x08, %bl
   jz       doTry_90
   testb    $0x08, -8(%rbx)
   jz       .766
   call     isLifeE_F
   jnz      doTry_90
   call     dbFetchEX
.766:
   mov      8(%r14), %r13
   mov      16(%rbp), %r14
   mov      $Nil, %r15
   call     methodEY_FCYZ
   jnz      doTry_90
   mov      8(%rbp), %rax
   call     evMethodACXYZ_E
   jmp      .768
doTry_90:
   mov      $Nil, %rbx
.768:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSuper
doSuper:
   push     %r13
   push     %r14
   push     %r15
   push     %rbx
   mov      EnvMeth, %rax
   mov      8(%rax), %r14
   mov      16(%rax), %r13
   cmp      $Nil, %r13
   cmovnzq  (%r13), %r13
   cmovzq   This, %r13
   mov      (%r13), %r13
.769:
   testb    $0x0E, (%r13)
   jnz      .771
   mov      8(%r13), %r13
   jmp      .769
.771:
   testb    $0x0E, %r13b
   jnz      .772
   mov      (%r13), %rbx
   mov      %r13, %r15
   call     methodEY_FCYZ
   jnz      .773
   pop      %rbx
   push     %r15
   push     %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   call     evExprCE_E
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.773:
   mov      8(%r13), %r13
   jmp      .771
.772:
   mov      %r14, %rbx
   pop      %r13
   mov      $SuperErr, %r14
   jmp      errEXYZ
SuperErr:
   .asciz   "Bad super"

   .balign  16
   nop
   nop
   .globl  doExtra
doExtra:
   push     %r13
   push     %r14
   push     %r15
   push     %rbx
   mov      EnvMeth, %r10
   mov      8(%r10), %r14
   mov      This, %r13
   call     extraXY_FCYZ
   jnz      .774
   pop      %rbx
   push     %r15
   push     %r14
   pushq    EnvMeth
   mov      %rsp, EnvMeth
   call     evExprCE_E
   popq     EnvMeth
   pop      %rax
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.774:
   mov      %r14, %rbx
   pop      %r13
   mov      $ExtraErr, %r14
   jmp      errEXYZ
ExtraErr:
   .asciz   "Bad extra"

   .balign  16
   .globl  extraXY_FCYZ
extraXY_FCYZ:
   mov      (%r13), %r13
.775:
   testb    $0x0E, (%r13)
   jnz      .777
   mov      8(%r13), %r13
   jmp      .775
.777:
   testb    $0x0E, %r13b
   jnz      .778
   mov      EnvMeth, %r10
   cmp      16(%r10), %r13
   jnz      .779
extraXY_FCYZ_10:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .781
   mov      (%r13), %rbx
   mov      %r13, %r15
   call     methodEY_FCYZ
   jnz      extraXY_FCYZ_10
.781:
   rep
   ret
.779:
   push     %r13
   mov      (%r13), %r13
   cmp      StkLimit, %rsp
   jc       stkErr
   call     extraXY_FCYZ
   pop      %r13
   jz       ret
   ja       extraXY_FCYZ_10
   mov      8(%r13), %r13
   jmp      .777
.778:
   stc
   ret

   .balign  16
   nop
   nop
   .globl  doWith
doWith:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .782
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    This
   pushq    $This
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      %rbx, This
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rax
   pop      %rax
   popq     This
   pop      %rbp
   popq     EnvBind
.782:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doBind
doBind:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      argErrEX
   mov      8(%r13), %r13
   cmp      $Nil, %rbx
   jnz      .783
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.783:
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %bl
   jz       .785
   pushq    (%rbx)
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret
.785:
   mov      (%rbx), %rax
   testb    $0x06, %al
   jnz      argErrAX
   mov      (%rax), %rdx
   testb    $0x08, %al
   jz       .786
   push     %rdx
   push     %rax
   jmp      .787
.786:
   pushq    (%rdx)
   push     %rdx
   mov      8(%rax), %r10
   mov      %r10, (%rdx)
.787:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .785
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
.788:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .788
   pop      %rbp
   popq     EnvBind
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doJob
doJob:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .789
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %rax
.790:
   mov      (%rax), %rdx
   mov      (%rdx), %r10
   pushq    (%r10)
   pushq    (%rdx)
   mov      (%rdx), %r11
   mov      8(%rdx), %r10
   mov      %r10, (%r11)
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .790
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
.789:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rdx
   pop      %rbp
   cmp      $Nil, %rdx
   jz       .791
   pop      %rax
   mov      (%rbp), %r10
   lea      -16(%r10), %r13
.792:
   mov      (%r13), %rax
   mov      (%rdx), %r11
   mov      (%rax), %r10
   mov      %r10, 8(%r11)
   mov      8(%r13), %r10
   mov      %r10, (%rax)
   mov      8(%rdx), %rdx
   sub      $16, %r13
   cmp      %rbp, %r13
   jnc      .792
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvBind
.791:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLet
doLet:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %r14b
   jz       .794
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r14)
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret
.794:
   mov      (%r14), %rax
   pushq    (%rax)
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%r14), %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r10
   mov      8(%r10), %r14
   testb    $0x0E, %r14b
   jnz      .795
   pop      %rax
   pop      %rbp
   jmp      .794
.795:
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
.796:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .796
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLetQ
doLetQ:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .797
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      %rbx, (%r14)
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
.797:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doUse
doUse:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x08, %r14b
   jz       .799
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret
.799:
   mov      (%r14), %rax
   pushq    (%rax)
   push     %rax
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .799
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %rax
   pop      %rbp
.800:
   pop      %r13
   popq     (%r13)
   cmp      %rbp, %rsp
   jnz      .800
   pop      %rbp
   popq     EnvBind
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAnd
doAnd:
   push     %r13
   mov      8(%rbx), %r13
.801:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .802
   mov      %rbx, At
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .801
.802:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOr
doOr:
   push     %r13
   mov      8(%rbx), %r13
.803:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .804
   mov      %rbx, At
   pop      %r13
   ret
.804:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .803
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doNand
doNand:
   push     %r13
   mov      8(%rbx), %r13
.805:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .806
   mov      $TSym, %rbx
   pop      %r13
   ret
.806:
   mov      %rbx, At
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .805
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doNor
doNor:
   push     %r13
   mov      8(%rbx), %r13
.807:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .808
   mov      %rbx, At
   mov      $Nil, %rbx
   pop      %r13
   ret
.808:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .807
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doXor
doXor:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .809
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $TSym, %r10
   cmovnzq  %r10, %rbx
   ret
.809:
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doBool
doBool:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $TSym, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doNot
doNot:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       retT
   mov      %rbx, At
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doNil
doNil:
   push     %r13
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doT
doT:
   push     %r13
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doProg
doProg:
   push     %r13
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doProg1
doProg1:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doProg2
doProg2:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doIf
doIf:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .810
   mov      %rbx, At
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret
.810:
   xchg     (%rsp), %r13
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doIf2
doIf2:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .811
   xchg     (%rsp), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .812
   mov      8(%r13), %r10
   mov      8(%r10), %r10
   mov      8(%r10), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.812:
   mov      %rbx, At
   mov      8(%r13), %r10
   mov      8(%r10), %r10
   mov      8(%r10), %r13
   mov      (%r13), %rbx
   pop      %r13
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret
.811:
   mov      %rbx, At
   xchg     (%rsp), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .813
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   mov      (%r13), %rbx
   pop      %r13
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret
.813:
   mov      %rbx, At
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   pop      %r13
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doIfn
doIfn:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .814
   pop      %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret
.814:
   mov      %rbx, At
   xchg     (%rsp), %r13
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doWhen
doWhen:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .815
   pop      %rax
   ret
.815:
   mov      %rbx, At
   xchg     (%rsp), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doUnless
doUnless:
   mov      8(%rbx), %rbx
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .816
   mov      %rbx, At
   pop      %rax
   mov      $Nil, %rbx
   ret
.816:
   xchg     (%rsp), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCond
doCond:
   push     %r13
   mov      %rbx, %r13
.817:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .818
   mov      (%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .817
   mov      %rbx, At
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.818:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doNond
doNond:
   push     %r13
   mov      %rbx, %r13
.820:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .821
   mov      (%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .822
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.822:
   mov      %rbx, At
   jmp      .820
.821:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCase
doCase:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
.823:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .824
   mov      (%r13), %r10
   mov      (%r10), %rdx
   cmp      $TSym, %rdx
   jz       doCase_10
   mov      At, %rax
   mov      %rdx, %rbx
   call     equalAE_F
   jnz      .825
doCase_10:
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.825:
   testb    $0x0E, %dl
   jnz      .823
.827:
   mov      At, %rax
   mov      (%rdx), %rbx
   call     equalAE_F
   jnz      .828
   mov      (%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.828:
   mov      8(%rdx), %rdx
   testb    $0x0E, %dl
   jz       .827
   jmp      .823
.824:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doState
doState:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     needVarEX
.829:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .830
   mov      (%r14), %r13
   mov      (%r13), %rbx
   cmp      $TSym, %rbx
   jz       doState_10
   mov      8(%rbp), %r10
   mov      (%r10), %rax
   cmp      %rbx, %rax
   jz       doState_10
.831:
   testb    $0x0E, %bl
   jnz      .832
   cmp      (%rbx), %rax
   jz       .832
   mov      8(%rbx), %rbx
   jmp      .831
.832:
   jnz      .829
doState_10:
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .829
   mov      8(%rbp), %r11
   mov      %rbx, (%r11)
   mov      %rbx, At
   mov      (%rbp), %rsp
   pop      %rbp
   mov      8(%r13), %r13
   pop      %r14
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   ret
.830:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doWhile
doWhile:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.835:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .836
   mov      %rbx, At
   mov      8(%r13), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      %rbx, 8(%rbp)
   jmp      .835
.836:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doUntil
doUntil:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.837:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .838
   mov      8(%r13), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      %rbx, 8(%rbp)
   jmp      .837
.838:
   mov      %rbx, At
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAt
doAt:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      cellErrEX
   mov      (%rbx), %rax
   testb    $0x02, %al
   jz       cntErrAX
   mov      8(%rbx), %rdx
   testb    $0x02, %dl
   jz       cntErrCX
   add      $16, %rax
   cmp      %rdx, %rax
   jnc      .839
   mov      %rax, (%rbx)
   mov      $Nil, %rbx
   jmp      .840
.839:
   movq     $2, (%rbx)
   mov      8(%r14), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
.840:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDo
doDo:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .841
   testb    $0x02, %bl
   jz       loopX
   shr      $4, %rbx
   jbe      .842
   push     %rbx
.843:
   mov      %r13, %r14
   call     loopY_FE
   jz       .844
   decq     (%rsp)
   jnz      .843
.844:
   pop      %rax
   jmp      .841
.842:
   mov      $Nil, %rbx
.841:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLoop
doLoop:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
loopX:
   mov      %r13, %r14
.847:
   mov      (%r14), %rbx
   testb    $0x0E, %bl
   jnz      .848
   mov      (%rbx), %rax
   cmp      $Nil, %rax
   jnz      .849
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .850
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.850:
   mov      %rbx, At
   jmp      .848
.849:
   cmp      $TSym, %rax
   jnz      .852
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .848
   mov      %rbx, At
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.852:
   call     evListE_E
.848:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .847
   jmp      loopX

   .balign  16
   nop
   nop
   .globl  doFor
doFor:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %r14
   mov      8(%r13), %r13
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %r14b
   jz       .855
   pushq    (%r14)
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   mov      %rbx, %rax
   mov      $Nil, %rbx
   testb    $0x06, %al
   jz       .861
   testb    $8, %al
   jnz      .860
   movq     $2, (%r14)
.858:
   mov      40(%rbp), %r10
   mov      (%r10), %rax
   add      $16, %rax
   cmp      8(%rbp), %rax
   ja       .860
   mov      40(%rbp), %r11
   mov      %rax, (%r11)
   mov      %r13, %r14
   call     loopY_FE
   jnz      .858
   jmp      .860
.861:
   mov      8(%rbp), %rax
   testb    $0x0E, %al
   jnz      .860
   mov      8(%rax), %r10
   mov      %r10, 8(%rbp)
   mov      40(%rbp), %r11
   mov      (%rax), %r10
   mov      %r10, (%r11)
   mov      %r13, %r14
   call     loopY_FE
   jnz      .861
.860:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   jmp      .863
.855:
   mov      8(%r14), %r15
   testb    $0x0E, %r15b
   jz       .864
   pushq    (%r15)
   push     %r15
   mov      (%r14), %r15
   pushq    (%r15)
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   movq     $2, (%r15)
   mov      8(%r13), %r13
.865:
   mov      8(%rbp), %rax
   testb    $0x0E, %al
   jnz      .866
   mov      8(%rax), %r10
   mov      %r10, 8(%rbp)
   mov      56(%rbp), %r11
   mov      (%rax), %r10
   mov      %r10, (%r11)
   mov      40(%rbp), %r11
   addq     $16, (%r11)
   mov      %r13, %r14
   call     loopY_FE
   jnz      .865
.866:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
   jmp      .863
.864:
   mov      (%r14), %r15
   mov      8(%r14), %r14
   testb    $0x0E, %r15b
   jz       .868
   pushq    (%r15)
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   pushq    8(%r14)
.869:
   mov      (%rsp), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .870
   mov      8(%rbp), %rbx
   jmp      .871
.870:
   mov      %rbx, At
   mov      %r13, %r14
   call     loopY_FE
   jz       .871
   mov      %rbx, 8(%rbp)
   mov      (%rsp), %r10
   mov      8(%r10), %r14
   testb    $0x0E, %r14b
   jnz      .869
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      40(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      .869
.871:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   jmp      .863
.868:
   mov      8(%r15), %rdx
   pushq    (%rdx)
   push     %rdx
   mov      (%r15), %rdx
   pushq    (%rdx)
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   push     %r12
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r15), %r11
   mov      %rbx, (%r11)
   mov      (%r15), %r11
   movq     $2, (%r11)
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   pushq    8(%r14)
.874:
   mov      (%rsp), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .875
   mov      8(%rbp), %rbx
   jmp      .876
.875:
   mov      %rbx, At
   mov      40(%rbp), %r11
   addq     $16, (%r11)
   mov      %r13, %r14
   call     loopY_FE
   jz       .876
   mov      %rbx, 8(%rbp)
   mov      (%rsp), %r10
   mov      8(%r10), %r14
   testb    $0x0E, %r14b
   jnz      .874
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   mov      56(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      .874
.876:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %rax
   pop      %rbp
   pop      %r13
   popq     (%r13)
.863:
   pop      %r13
   popq     (%r13)
   pop      %rbp
   popq     EnvBind
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  loopY_FE
loopY_FE:
.878:
   mov      (%r14), %rbx
   testb    $0x06, %bl
   jnz      .879
   testb    $0x08, %bl
   jz       .880
   mov      (%rbx), %rbx
   jmp      .879
.880:
   mov      (%rbx), %rax
   cmp      $Nil, %rax
   jnz      .882
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .883
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   or       %r12, %r12
   ret
.883:
   mov      %rbx, At
   mov      $Nil, %rbx
   jmp      .879
.882:
   cmp      $TSym, %rax
   jnz      .885
   mov      8(%rbx), %r15
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .879
   mov      %rbx, At
   mov      8(%r15), %r14
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   or       %r12, %r12
   ret
.885:
   call     evListE_E
.879:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .878
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doCatch
doCatch:
   push     %r13
   push     %r14
   push     %r15
   push     %rbp
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   sub      $EnvEnd-Env, %rsp
   lea      Env, %rsi
   lea      EnvEnd, %rcx
   mov      %rsp, %rdi
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   pushq    $2
   push     %rbx
   pushq    Catch
   mov      %rsp, Catch
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
caught:
   popq     Catch
   add      $16+(EnvEnd-Env), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doThrow
doThrow:
   mov      %rbx, %r13
   mov      8(%r13), %r14
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r15
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      Catch, %rdx
.888:
   cmp      %r12, %rdx
   jz       throwErrZX
   cmpq     $TSym, 8(%rdx)
   jz       .889
   cmp      8(%rdx), %r15
   jz       .889
   mov      (%rdx), %rdx
   jmp      .888
.889:
   push     %rbx
   call     unwindC_Z
   pop      %rbx
   mov      %r15, %rsp
   jmp      caught

   .globl  throwErrZX
throwErrZX:
   mov      %r15, %rbx
   mov      $ThrowErr, %r14
   jmp      errEXYZ
ThrowErr:
   .asciz   "Tag not found"

   .balign  16
   nop
   nop
   .globl  doFinally
doFinally:
   push     %r13
   sub      $EnvEnd-Env, %rsp
   lea      Env, %rsi
   lea      EnvEnd, %rcx
   mov      %rsp, %rdi
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   mov      8(%rbx), %r13
   pushq    (%r13)
   mov      8(%r13), %r13
   push     %r12
   pushq    Catch
   mov      %rsp, Catch
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      40(%rsp), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Catch
   add      $16+(EnvEnd-Env), %rsp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCo
doCo:
   push     %r13
   mov      8(%rbx), %r13
   call     evSymX_E
   testb    $0x0E, 8(%r13)
   jnz      .890
   push     %r14
   push     %r15
   push     %rbp
   sub      $EnvMid-EnvCo, %rsp
   mov      Stack0, %r14
   mov      Stacks, %rdx
.891:
   sub      StkSize, %r14
   shr      $1, %rdx
   jnc      .892
   cmp      -8(%r14), %rbx
   jnz      .891
   cmp      %r12, -16(%r14)
   jz       reentErrEX
   push     %r14
   pushq    StkLimit
   pushq    EnvCo7
   mov      %rsp, EnvCo7
   mov      %rsp, %r15
   lea      EnvCo, %rsi
   lea      EnvMid, %rcx
   lea      24(%r15), %rdi
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
resumeCoroutine:
   mov      -16(%r14), %rsp
   mov      %r12, -16(%r14)
   lea      4096(%r14), %rax
   sub      StkSize, %rax
   mov      %rax, StkLimit
   lea      EnvCo, %rdi
   lea      EnvMid, %rcx
   lea      -16-(EnvMid-EnvCo)(%r14), %rsi
   sub      %rdi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   mov      EnvBind, %r13
   mov      24+(EnvBind-EnvCo)(%r15), %rdx
.893:
   cmp      %r12, %r13
   jz       .894
   mov      (%r13), %r14
   cmp      %r12, -8(%r13)
   jnz      .895
   lea      -16(%r14), %rax
.896:
   mov      (%rax), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%rax)
   mov      %r10, (%r11)
   sub      $16, %rax
   cmp      %r13, %rax
   jnc      .896
.895:
   mov      8(%r14), %rax
   mov      %rdx, 8(%r14)
   mov      %r13, %rdx
   mov      %rax, %r13
   jmp      .893
.894:
   mov      %rdx, EnvBind
   mov      $EnvInFrames, %r13
   mov      24+(EnvInFrames-EnvCo)(%r15), %rdx
   call     joinLocalCX
   mov      $EnvOutFrames, %r13
   mov      24+(EnvOutFrames-EnvCo)(%r15), %rdx
   call     joinLocalCX
   mov      $EnvCtlFrames, %r13
   mov      24+(EnvCtlFrames-EnvCo)(%r15), %rdx
   call     joinLocalCX
   mov      $EnvMeth, %r13
   mov      24+(EnvMeth-EnvCo)(%r15), %rdx
   call     joinLocalCX
   mov      $EnvApply, %r13
.897:
   cmp      %r12, (%r13)
   jz       .898
   mov      (%r13), %r10
   mov      (%r10), %r13
   jmp      .897
.898:
   mov      24+(EnvApply-EnvCo)(%r15), %r10
   mov      %r10, (%r13)
   pop      %r13
   cmp      %r12, %r13
   jz       .899
   mov      (%r13), %r14
.900:
   mov      (%r14), %rax
   cmp      %r12, %rax
   jz       .901
   mov      (%rax), %r14
   jmp      .900
.901:
   mov      24+(EnvMid-EnvCo)(%r15), %r10
   mov      %r10, (%r14)
   mov      %r13, %rbp
.899:
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.892:
   jnz      .891
   mov      Stack0, %r14
   mov      $1, %r15
   mov      Stacks, %rdx
.902:
   sub      StkSize, %r14
   test     %r15, %rdx
   jz       .903
   add      %r15, %r15
   jc       stkErrEX
   jmp      .902
.903:
   or       %r15, Stacks
   push     %r14
   pushq    StkLimit
   pushq    EnvCo7
   mov      %rsp, EnvCo7
   lea      EnvCo, %rsi
   lea      EnvMid, %rcx
   lea      24(%rsp), %rdi
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   mov      %r12, EnvMake
   mov      %r12, EnvYoke
   lea      4096(%r14), %rax
   sub      StkSize, %rax
   mov      %rax, StkLimit
   mov      %r14, %rsp
   push     %rbx
   push     %r12
   sub      $EnvMid-EnvCo, %rsp
   mov      8(%r13), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   xor      %r15, Stacks
   mov      EnvCo7, %rsp
   lea      EnvCo, %rdi
   lea      EnvMid, %rcx
   lea      24(%rsp), %rsi
   sub      %rdi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   popq     EnvCo7
   popq     StkLimit
   add      $8+(EnvMid-EnvCo), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.890:
   mov      Stack0, %r13
   mov      Stacks, %rdx
   mov      $1, %rax
.904:
   sub      StkSize, %r13
   shr      $1, %rdx
   jnc      .905
   cmp      -8(%r13), %rbx
   jnz      .905
   cmp      %r12, -16(%r13)
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .907
   xor      %rax, Stacks
   mov      $TSym, %rbx
.907:
   pop      %r13
   ret
.905:
   jz       .908
   add      %rax, %rax
   jmp      .904
.908:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doYield
doYield:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      EnvCo7, %r15
   cmp      %r12, %r15
   jz       yieldErrX
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %r12, %r14
   cmp      $Nil, %rbx
   jz       .909
   mov      Stack0, %r14
   mov      Stacks, %rdx
.910:
   sub      StkSize, %r14
   shr      $1, %rdx
   jnc      .911
   cmp      -8(%r14), %rbx
   jnz      .910
   cmp      %r12, -16(%r14)
   jz       reentErrEX
   jmp      .909
.911:
   jz       yieldErrEX
   jmp      .910
.909:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   cmp      %r12, %rbp
   jz       doYield_10
   mov      24+(EnvMid-EnvCo)(%r15), %rdx
   cmp      %rdx, %rbp
   cmovzq   %r12, %rbp
   jz       doYield_10
   mov      (%rbp), %r13
.915:
   mov      (%r13), %rax
   cmp      %r12, %rax
   jz       doYield_10
   cmp      %rdx, %rax
   jz       .916
   mov      %rax, %r13
   jmp      .915
.916:
   mov      %r12, (%r13)
doYield_10:
   push     %rbp
   push     %r14
   mov      $EnvApply, %r13
.917:
   mov      (%r13), %rax
   cmp      24+(EnvApply-EnvCo)(%r15), %rax
   jz       .918
   mov      (%rax), %r10
   lea      8(%r10), %r13
   jmp      .917
.918:
   mov      %r12, (%r13)
   mov      $EnvMeth, %r13
   mov      24+(EnvMeth-EnvCo)(%r15), %rdx
   call     cutLocalCX
   mov      $EnvCtlFrames, %r13
   mov      24+(EnvCtlFrames-EnvCo)(%r15), %rdx
   call     cutLocalCX
   mov      $EnvOutFrames, %r13
   mov      24+(EnvOutFrames-EnvCo)(%r15), %rdx
   call     cutLocalCX
   mov      $EnvInFrames, %r13
   mov      24+(EnvInFrames-EnvCo)(%r15), %rdx
   call     cutLocalCX
   mov      %r12, %rdx
   mov      EnvBind, %r13
   cmp      %r12, %r13
   jz       .919
.920:
   cmp      24+(EnvBind-EnvCo)(%r15), %r13
   jz       .919
   mov      %r13, %r14
   cmp      %r12, -8(%r13)
   jnz      .922
   add      $8, %r13
.923:
   mov      (%r13), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%r13)
   mov      %r10, (%r11)
   add      $16, %r13
   cmp      (%r14), %r13
   jnz      .923
.922:
   mov      (%r14), %rax
   mov      8(%rax), %r13
   mov      %rdx, 8(%rax)
   mov      %r14, %rdx
   jmp      .920
.919:
   mov      %rdx, EnvBind
   pop      %r14
   mov      16(%r15), %r13
   mov      %rsp, -16(%r13)
   lea      EnvCo, %rsi
   lea      EnvMid, %rcx
   lea      -16-(EnvMid-EnvCo)(%r13), %rdi
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   cmp      %r12, %r14
   jnz      .924
   mov      %r15, %rsp
   lea      EnvCo, %rdi
   lea      EnvMid, %rcx
   lea      24(%r15), %rsi
   sub      %rdi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   popq     EnvCo7
   popq     StkLimit
   add      $8+(EnvMid-EnvCo), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.924:
   mov      %r14, 16(%r15)
   jmp      resumeCoroutine

   .balign  16
   .globl  cutLocalCX
cutLocalCX:
.925:
   mov      (%r13), %rax
   cmp      %r12, %rax
   jz       ret
   cmp      %rdx, %rax
   jnz      .926
   mov      %r12, (%r13)
   ret
.926:
   mov      %rax, %r13
   jmp      .925

   .balign  16
   .globl  joinLocalCX
joinLocalCX:
.927:
   cmp      %r12, (%r13)
   jnz      .928
   mov      %rdx, (%r13)
   ret
.928:
   mov      (%r13), %r13
   jmp      .927

   .balign  16
   nop
   nop
   .globl  doBreak
doBreak:
   mov      8(%rbx), %rbx
   cmpq     $Nil, Dbg
   jz       .929
   call     brkLoadE_E
.929:
   test     $0x06, %bl
   jnz      ret
   test     $0x08, %bl
   jz       evListE_E
   mov      (%rbx), %rbx
   ret

   .globl  brkLoadE_E
brkLoadE_E:
   cmp      %r12, Break
   jnz      .930
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .930
   mov      %rdx, %r12
   mov      $1, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .930
   push     %r13
   push     %r14
   pushq    EnvBind
   push     %rbp
   mov      %rsp, %rbp
   pushq    Up
   pushq    $Up
   mov      %rbx, Up
   pushq    Run
   pushq    $Run
   movq     $Nil, Run
   pushq    At
   pushq    $At
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbp, EnvBind
   mov      %rbp, Break
   push     %r12
   sub      $32, %rsp
   mov      %rsp, %r14
   movq     $1, 8(%r14)
   mov      %r12, 16(%r14)
   call     pushOutFilesY
   call     printE
   call     newline
   mov      $33, %al
   mov      $Nil, %rbx
   mov      %r12, %r13
   call     loadBEX_E
   call     popOutFiles
   add      $56, %rsp
   popq     At
   pop      %rax
   popq     Run
   pop      %rax
   mov      Up, %rbx
   popq     Up
   pop      %rbp
   popq     EnvBind
   mov      %r12, Break
   pop      %r14
   pop      %r13
.930:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doE
doE:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   cmp      %r12, Break
   jz       brkErrX
   push     %rbp
   mov      %rsp, %rbp
   pushq    Dbg
   pushq    At
   pushq    Run
   push     %rbp
   mov      %rsp, %rbp
   movq     $Nil, Dbg
   mov      Break, %rdx
   mov      16(%rdx), %r10
   mov      %r10, At
   mov      32(%rdx), %r10
   mov      %r10, Run
   call     popOutFiles
   mov      EnvInFrames, %r14
   call     popInFiles
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .933
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   jmp      .934
.933:
   mov      Up, %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.934:
   call     pushInFilesY
   mov      Break, %r10
   lea      -40(%r10), %r14
   call     pushOutFilesY
   pop      %rbp
   popq     Run
   popq     At
   popq     Dbg
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doTrace
doTrace:
   push     %r13
   mov      8(%rbx), %r13
   cmpq     $Nil, Dbg
   jnz      .935
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   jmp      .936
.935:
   push     %r14
   push     %r15
   pushq    OutFile
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   pushq    PutB
   movq     $putStdoutB, PutB
   mov      (%r13), %r14
   mov      8(%r13), %r13
   mov      8(%r13), %r15
   incq     EnvTrace
   mov      EnvTrace, %rdx
   call     traceCY
   mov      $trc1, %rdx
   call     outStringC
   mov      (%r13), %r13
.937:
   testb    $0x0E, %r13b
   jnz      .938
   call     space
   mov      (%r13), %rbx
   mov      (%rbx), %rbx
   call     printE
   mov      8(%r13), %r13
   jmp      .937
.938:
   cmp      $Nil, %r13
   jz       .939
   cmp      $At, %r13
   jz       .940
   call     space
   mov      (%r13), %rbx
   call     printE
   jmp      .939
.940:
   mov      EnvNext, %r13
.942:
   cmp      EnvArgs, %r13
   jz       .939
   call     space
   sub      $8, %r13
   mov      (%r13), %rbx
   call     printE
   jmp      .942
.939:
   call     newline
   mov      (%rsp), %r10
   mov      %r10, PutB
   mov      8(%rsp), %r10
   mov      %r10, OutFile
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   movq     $putStdoutB, PutB
   mov      EnvTrace, %rdx
   decq     EnvTrace
   call     traceCY
   mov      $trc2, %rdx
   call     outStringC
   call     printE_E
   call     newline
   popq     PutB
   popq     OutFile
   pop      %r15
   pop      %r14
.936:
   pop      %r13
   ret
trc1:
   .asciz   " :"
trc2:
   .asciz   " = "

   .globl  traceCY
traceCY:
   cmp      $64, %rdx
   jbe      .945
   mov      $64, %rdx
.945:
   call     space
   sub      $1, %rdx
   jg       .945
   push     %rbx
   testb    $0x0E, %r14b
   jz       .946
   mov      %r14, %rbx
   call     printE
   jmp      .947
.946:
   mov      (%r14), %rbx
   call     printE
   call     space
   mov      8(%r14), %rbx
   call     printE
   call     space
   mov      This, %rbx
   call     printE
.947:
   pop      %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doSys
doSys:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   call     evSymX_E
   call     bufStringE_SZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .948
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     getenv
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %rbx
   call     mkStrE_E
   jmp      .949
.948:
   push     %r15
   call     evSymX_E
   lea      8(%rsp), %r13
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %r13, %rdi
   mov      %rsp, %rsi
   mov      $1, %rdx
   call     setenv
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      %r15, %rsp
   pop      %r15
.949:
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCall
doCall:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   push     %rbx
   push     %r12
   call     evSymX_E
   call     pathStringE_SZ
.950:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .951
   push     %r15
   call     evSymX_E
   call     bufStringE_SZ
   jmp      .950
.951:
   push     %r15
   mov      %rsp, %r15
   mov      %r15, %r13
   push     %r12
.952:
   lea      8(%r13), %rax
   push     %rax
   mov      (%r13), %r13
   cmp      %r12, (%r13)
   jnz      .952
   mov      8(%r13), %r13
   call     flushAll
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .953
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   call     getpgrp
   xor      %rdi, %rdi
   mov      %rax, %rsi
   call     tcsetpgrp
   mov      (%rsp), %rdi
   mov      %rsp, %rsi
   call     execvp
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      execErrS
.953:
   js       forkErrX
.954:
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .954
   mov      %rax, %r15
   mov      %rdx, %r12
   mov      %r15, %rdi
   xor      %rsi, %rsi
   call     setpgid
   xor      %rdi, %rdi
   mov      %r15, %rsi
   call     tcsetpgrp
   mov      %r12, %rdx
   xor      %r12, %r12
.956:
   mov      %rdx, %r12
   mov      %r15, %rdi
   mov      %rsp, %rsi
   mov      $2, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .957
   call     errno_A
   cmp      $4, %rax
   jnz      waitPidErrX
   cmp      %r12, Signal
   jz       .956
   call     sighandlerX
   jmp      .956
.957:
   mov      %rdx, %r12
   call     getpgrp
   xor      %rdi, %rdi
   mov      %rax, %rsi
   call     tcsetpgrp
   mov      %r12, %rdx
   xor      %r12, %r12
   call     wifstoppedS_F
   jz       .959
   movl     (%rsp), %eax
   or       %rax, %rax
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   pop      %r13
   pop      %r15
   pop      %r13
   ret
.959:
   mov      $43, %al
   mov      $Nil, %rbx
   call     loadBEX_E
   mov      %rdx, %r12
   xor      %rdi, %rdi
   mov      %r15, %rsi
   call     tcsetpgrp
   mov      %r15, %rdi
   mov      $18, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .956

   .balign  16
   nop
   nop
   .globl  doTick
doTick:
   push     %r13
   pushq    TickU
   pushq    TickS
   mov      %rdx, %r12
   mov      $Tms, %rdi
   call     times
   mov      %r12, %rdx
   xor      %r12, %r12
   pushq    Tms+0
   pushq    Tms+8
   mov      8(%rbx), %rbx
   pushq    (%rbx)
   mov      8(%rbx), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   pop      %r13
   mov      %rdx, %r12
   mov      $Tms, %rdi
   call     times
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      Tms+0, %rax
   sub      8(%rsp), %rax
   sub      TickU, %rax
   add      24(%rsp), %rax
   add      %rax, TickU
   shl      $4, %rax
   add      %rax, (%r13)
   mov      Tms+8, %rax
   sub      (%rsp), %rax
   sub      TickS, %rax
   add      16(%rsp), %rax
   add      %rax, TickS
   shl      $4, %rax
   add      %rax, 8(%r13)
   add      $32, %rsp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doIpid
doIpid:
   mov      EnvInFrames, %rdx
   cmp      %r12, %rdx
   jz       .960
   mov      16(%rdx), %rbx
   cmp      $1, %rbx
   jbe      .960
   shl      $4, %rbx
   orb      $2, %bl
   ret
.960:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doOpid
doOpid:
   mov      EnvOutFrames, %rdx
   cmp      %r12, %rdx
   jz       .962
   mov      16(%rdx), %rbx
   cmp      $1, %rbx
   jbe      .962
   shl      $4, %rbx
   orb      $2, %bl
   ret
.962:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doKill
doKill:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .964
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $15, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .965
.964:
   push     %rbx
   call     evCntXY_FE
   mov      %rdx, %r12
   pop      %rdi
   mov      %rbx, %rsi
   call     kill
   mov      %r12, %rdx
   xor      %r12, %r12
.965:
   cmp      %r12d, %eax
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFork
doFork:
   push     %r13
   mov      %rbx, %r13
   call     forkLispX_FE
   jnc      .966
   mov      $Nil, %rbx
   jmp      .967
.966:
   shl      $4, %rbx
   orb      $2, %bl
.967:
   pop      %r13
   ret

   .balign  16
   .globl  forkLispX_FE
forkLispX_FE:
   call     flushAll
   cmp      %r12, Spkr
   jnz      .968
   mov      %rdx, %r12
   mov      $SpMiPipe, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movl     SpMiPipe, %eax
   mov      %rax, Spkr
   call     closeOnExecAX
   movl     SpMiPipe+4, %eax
   call     closeOnExecAX
.968:
   push     %rax
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   mov      %rdx, %r12
   lea      8(%rsp), %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movl     (%rsp), %eax
   call     closeOnExecAX
   movl     4(%rsp), %eax
   call     closeOnExecAX
   movl     8(%rsp), %eax
   call     closeOnExecAX
   movl     12(%rsp), %eax
   call     closeOnExecAX
   mov      %r12, %rdx
   mov      Child, %rax
.969:
   cmp      Children, %rdx
   jz       .970
   cmp      %r12, (%rax)
   jz       .970
   add      $48, %rax
   add      $48, %rdx
   jmp      .969
.970:
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       forkErrX
   jnz      .971
   mov      %rdx, Slot
   mov      %r12, Spkr
   movl     SpMiPipe+4, %eax
   mov      %rax, Mic
   movl     4(%rsp), %eax
   call     closeAX
   movl     8(%rsp), %eax
   call     closeAX
   movl     SpMiPipe, %eax
   call     closeAX
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .972
   call     closeAX
   mov      Hear, %rax
   call     closeInFileA
   mov      Hear, %rax
   call     closeOutFileA
.972:
   movl     (%rsp), %eax
   mov      %rax, Hear
   call     initInFileA_A
   mov      Tell, %rax
   cmp      %r12, %rax
   jz       .973
   call     closeAX
.973:
   movl     12(%rsp), %eax
   mov      %rax, Tell
   mov      Child, %rbx
   mov      Children, %rdx
.974:
   sub      $48, %rdx
   jc       .975
   cmp      %r12, (%rbx)
   jz       .976
   mov      %rdx, %r12
   mov      8(%rbx), %rdi
   call     close
   mov      16(%rbx), %rdi
   call     close
   mov      40(%rbx), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.976:
   add      $48, %rbx
   jmp      .974
.975:
   mov      %r12, Children
   mov      %rdx, %r12
   mov      Child, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Child
   mov      EnvInFrames, %rax
.977:
   cmp      %r12, %rax
   jz       .978
   mov      %r12, 16(%rax)
   mov      (%rax), %rax
   jmp      .977
.978:
   mov      EnvOutFrames, %rax
.979:
   cmp      %r12, %rax
   jz       .980
   mov      %r12, 16(%rax)
   mov      (%rax), %rax
   jmp      .979
.980:
   mov      Catch, %rax
.981:
   cmp      %r12, %rax
   jz       .982
   movq     $2, 16(%rax)
   mov      (%rax), %rax
   jmp      .981
.982:
   mov      %rdx, %r12
   mov      Termio, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Termio
   mov      Repl, %r10b
   mov      %r10b, PRepl
   mov      Pid, %r10
   mov      %r10, PPid
   mov      %rdx, %r12
   call     getpid
   mov      %r12, %rdx
   xor      %r12, %r12
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, Pid
   mov      Fork, %rbx
   call     execE
   movq     $Nil, Fork
   pop      %rax
   pop      %rax
   stc
   ret
.971:
   cmp      Children, %rdx
   cmovnzq  %rax, %rbx
   jnz      .983
   push     %rax
   mov      Child, %rax
   mov      %rdx, %rbx
   add      $384, %rbx
   mov      %rbx, Children
   call     allocAE_A
   mov      %rax, Child
   add      %rbx, %rax
   mov      $8, %rbx
.984:
   sub      $48, %rax
   mov      %r12, (%rax)
   dec      %rbx
   jnz      .984
   pop      %rbx
.983:
   add      Child, %rdx
   mov      %rbx, (%rdx)
   movl     (%rsp), %eax
   call     closeAX
   movl     4(%rsp), %eax
   mov      %rax, 16(%rdx)
   call     nonblockingA_A
   movl     8(%rsp), %eax
   mov      %rax, 8(%rdx)
   movl     12(%rsp), %eax
   call     closeAX
   mov      %r12, 24(%rdx)
   mov      %r12, 32(%rdx)
   mov      %r12, 40(%rdx)
   pop      %rax
   pop      %rax
   clc
   ret

   .balign  16
   nop
   nop
   .globl  doBye
doBye:
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .985
   mov      %r12, %rbx
   jmp      byeE
.985:
   call     xCntEX_FE
   jmp      byeE

   .balign  16
   .globl  cmpLongAX_F
cmpLongAX_F:
   push     %r13
.987:
   mov      -4(%r13), %r10
   cmp      %r10, -4(%rax)
   jz       .988
   pop      %r13
   ret
.988:
   mov      4(%rax), %rax
   mov      4(%r13), %r13
   testb    $0x04, %al
   jnz      .989
   testb    $0x04, %r13b
   jz       .990
   stc
   pop      %r13
   ret
.990:
   cmp      %r13, %rax
   pop      %r13
   ret
.989:
   testb    $0x02, %r13b
   jz       .987
   clc
   pop      %r13
   ret

   .balign  16
   .globl  isInternEXY_F
isInternEXY_F:
   testb    $0x02, %r13b
   jz       .991
   mov      (%r14), %r14
.992:
   testb    $0x0E, %r14b
   jnz      ret
   mov      (%r14), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   cmp      %r13, %rax
   jz       .993
   mov      8(%r14), %r14
   cmovcq   8(%r14), %r14
   cmovncq  (%r14), %r14
   jmp      .992
.993:
   cmp      (%r14), %rbx
   ret
.991:
   mov      8(%r14), %r14
.994:
   testb    $0x0E, %r14b
   jnz      ret
   mov      (%r14), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   call     cmpLongAX_F
   jz       .995
   mov      8(%r14), %r14
   cmovcq   8(%r14), %r14
   cmovncq  (%r14), %r14
   jmp      .994
.995:
   cmp      (%r14), %rbx
   ret

   .balign  16
   .globl  internEXY_FE
internEXY_FE:
   testb    $0x02, %r13b
   jz       .996
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jz       .999
   cmp      %r12, %rbx
   jnz      .998
   call     consSymX_E
.998:
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, (%r14)
   stc
   ret
.999:
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   cmp      %r13, %rax
   jnz      .1000
   mov      (%rdx), %rbx
   clc
   ret
.1000:
   jnc      .1001
   testb    $0x0E, 8(%rdx)
   jz       .1002
   cmp      %r12, %rbx
   jnz      .1003
   call     consSymX_E
.1003:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   movq     $Nil, (%r13)
   mov      %rax, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.1002:
   mov      8(%rdx), %rdx
   testb    $0x0E, 8(%rdx)
   cmovzq   8(%rdx), %rdx
   jz       .999
   cmp      %r12, %rbx
   jnz      .1005
   call     consSymX_E
.1005:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   stc
   ret
.1001:
   testb    $0x0E, 8(%rdx)
   jz       .1007
   cmp      %r12, %rbx
   jnz      .1008
   call     consSymX_E
.1008:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.1007:
   mov      8(%rdx), %rdx
   testb    $0x0E, (%rdx)
   cmovzq   (%rdx), %rdx
   jz       .999
   cmp      %r12, %rbx
   jnz      .1010
   call     consSymX_E
.1010:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%rdx)
   stc
   ret
.996:
   mov      8(%r14), %rdx
   testb    $0x0E, %dl
   jz       .1013
   cmp      %r12, %rbx
   jnz      .1012
   call     consSymX_E
.1012:
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, 8(%r14)
   stc
   ret
.1013:
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   call     cmpLongAX_F
   jnz      .1014
   mov      (%rdx), %rbx
   clc
   ret
.1014:
   jnc      .1015
   testb    $0x0E, 8(%rdx)
   jz       .1016
   cmp      %r12, %rbx
   jnz      .1017
   call     consSymX_E
.1017:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   movq     $Nil, (%r13)
   mov      %rax, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.1016:
   mov      8(%rdx), %rdx
   testb    $0x0E, 8(%rdx)
   cmovzq   8(%rdx), %rdx
   jz       .1013
   cmp      %r12, %rbx
   jnz      .1019
   call     consSymX_E
.1019:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   stc
   ret
.1015:
   testb    $0x0E, 8(%rdx)
   jz       .1021
   cmp      %r12, %rbx
   jnz      .1022
   call     consSymX_E
.1022:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   mov      %r13, 8(%rdx)
   stc
   ret
.1021:
   mov      8(%rdx), %rdx
   testb    $0x0E, (%rdx)
   cmovzq   (%rdx), %rdx
   jz       .1013
   cmp      %r12, %rbx
   jnz      .1024
   call     consSymX_E
.1024:
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%rdx)
   stc
   ret

   .balign  16
   .globl  findSymX_E
findSymX_E:
   mov      %r12, %rbx
   mov      $Intern, %r14
   call     internEXY_FE
   jnc      Ret
   movq     $Nil, (%rbx)
   ret

   .balign  16
   .globl  externX_E
externX_E:
   mov      $3, %rdx
   call     needC
   push     %r13
   mov      $6364136223846793005, %rax
   mulq     %r13
   mov      %rax, %rbx
   mov      $Extern, %r13
.1025:
   mov      (%r13), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   mov      $4611686018427387895, %r10
   and      %r10, %rax
   mov      $6364136223846793005, %r10
   mul      %r10
   cmp      %rbx, %rax
   jnz      .1026
   pop      %rax
   mov      (%r13), %rbx
   ret
.1026:
   jnc      .1027
   testb    $0x0E, 8(%r13)
   jz       .1028
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   movq     $Nil, (%rdx)
   mov      %rax, 8(%rdx)
   mov      %rdx, 8(%r13)
   ret
.1028:
   mov      8(%r13), %r13
   testb    $0x0E, 8(%r13)
   cmovzq   8(%r13), %r13
   jz       .1025
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   ret
.1027:
   testb    $0x0E, 8(%r13)
   jz       .1031
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   ret
.1031:
   mov      8(%r13), %r13
   testb    $0x0E, (%r13)
   cmovzq   (%r13), %r13
   jz       .1025
   call     cons_E
   popq     (%rbx)
   orb      $8, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%r13)
   ret

   .balign  16
   .globl  uninternXY
uninternXY:
   cmp      $2, %r13
   jz       ret
   testb    $0x02, %r13b
   jz       .1033
.1034:
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jnz      ret
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   cmp      %r13, %rax
   jnz      .1035
   mov      8(%rdx), %rax
   testb    $0x0E, (%rax)
   jz       .1036
   mov      8(%rax), %r10
   mov      %r10, (%r14)
   ret
.1036:
   testb    $0x0E, 8(%rax)
   jz       .1037
   mov      (%rax), %r10
   mov      %r10, (%r14)
   ret
.1037:
   mov      8(%rax), %rax
   mov      8(%rax), %r14
   testb    $0x0E, (%r14)
   jz       .1038
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %r11
   mov      8(%r14), %r10
   mov      %r10, 8(%r11)
   ret
.1038:
   mov      (%r14), %r14
.1039:
   mov      8(%r14), %r13
   testb    $0x0E, (%r13)
   jnz      .1040
   mov      %r14, %rax
   mov      (%r13), %r14
   jmp      .1039
.1040:
   mov      (%r14), %r10
   mov      %r10, (%rdx)
   mov      8(%rax), %r11
   mov      8(%r13), %r10
   mov      %r10, (%r11)
   ret
.1035:
   mov      8(%rdx), %rdx
   jnc      .1041
   testb    $0x0E, %dl
   jnz      ret
   lea      8(%rdx), %r14
   jmp      .1034
.1041:
   testb    $0x0E, %dl
   jnz      ret
   mov      %rdx, %r14
   jmp      .1034
.1033:
   lea      8(%r14), %r14
.1043:
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jnz      ret
   mov      (%rdx), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   call     cmpLongAX_F
   jnz      .1044
   mov      8(%rdx), %rax
   testb    $0x0E, (%rax)
   jz       .1045
   mov      8(%rax), %r10
   mov      %r10, (%r14)
   ret
.1045:
   testb    $0x0E, 8(%rax)
   jz       .1046
   mov      (%rax), %r10
   mov      %r10, (%r14)
   ret
.1046:
   mov      8(%rax), %rax
   mov      8(%rax), %r14
   testb    $0x0E, (%r14)
   jz       .1047
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %r11
   mov      8(%r14), %r10
   mov      %r10, 8(%r11)
   ret
.1047:
   mov      (%r14), %r14
.1048:
   mov      8(%r14), %r13
   testb    $0x0E, (%r13)
   jz       .1049
   mov      %r14, %rax
   mov      (%r13), %r14
   jmp      .1048
.1049:
   mov      (%r14), %r10
   mov      %r10, (%rdx)
   mov      8(%rax), %r11
   mov      8(%r13), %r10
   mov      %r10, (%r11)
   ret
.1044:
   mov      8(%rdx), %rdx
   jnc      .1050
   testb    $0x0E, %dl
   jnz      ret
   lea      8(%rdx), %r14
   jmp      .1043
.1050:
   testb    $0x0E, %dl
   jnz      ret
   mov      %rdx, %r14
   jmp      .1043

   .balign  16
   .globl  nameA_A
nameA_A:
   andb     $~8, %al
.1052:
   testb    $0x06, %al
   jnz      ret
   mov      8(%rax), %rax
   jmp      .1052

   .balign  16
   .globl  nameE_E
nameE_E:
   andb     $~8, %bl
.1053:
   testb    $0x06, %bl
   jnz      ret
   mov      8(%rbx), %rbx
   jmp      .1053

   .balign  16
   .globl  nameX_X
nameX_X:
   andb     $~8, %r13b
.1054:
   testb    $0x06, %r13b
   jnz      ret
   mov      8(%r13), %r13
   jmp      .1054

   .balign  16
   .globl  nameY_Y
nameY_Y:
   andb     $~8, %r14b
.1055:
   testb    $0x06, %r14b
   jnz      ret
   mov      8(%r14), %r14
   jmp      .1055

   .balign  16
   nop
   nop
   .globl  doName
doName:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1056
   cmp      $Nil, %rbx
   jz       .1060
   mov      -8(%rbx), %r13
   testb    $0x08, %r13b
   jnz      .1058
   call     nameX_X
   call     consSymX_E
   jmp      .1060
.1058:
   call     nameX_X
   call     packExtNmX_E
   jmp      .1060
.1056:
   cmp      $Nil, %rbx
   jz       renErrEX
   testb    $0x08, -8(%rbx)
   jnz      renErrEX
   push     %r13
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Intern, %r14
   call     isInternEXY_F
   pop      %r14
   pop      %r13
   jz       renErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      8(%rbp), %rbx
   lea      -8(%rbx), %r14
.1061:
   testb    $0x06, (%r14)
   jnz      .1062
   mov      (%r14), %r10
   lea      8(%r10), %r14
   jmp      .1061
.1062:
   mov      %r13, (%r14)
   mov      (%rbp), %rsp
   pop      %rbp
.1060:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  mkCharA_A
mkCharA_A:
   cmp      $128, %rax
   jc       .1063
   cmp      $2048, %rax
   jnc      .1064
   mov      %al, Buf
   shr      $6, %rax
   and      $31, %al
   orb      $192, %al
   xchg     Buf, %al
   and      $63, %rax
   orb      $128, %al
   shl      $8, %rax
   mov      Buf, %al
   jmp      .1063
.1064:
   cmp      $65536, %rax
   jnz      .1066
   mov      $255, %al
   movzx    %al, %rax
   jmp      .1063
.1066:
   push     %rdx
   mov      %rax, %rdx
   shr      $12, %rax
   and      $15, %al
   orb      $224, %al
   mov      %al, Buf
   mov      %rdx, %rax
   shr      $6, %rax
   and      $63, %rax
   orb      $128, %al
   shl      $8, %rax
   xchg     %rdx, %rax
   and      $63, %rax
   orb      $128, %al
   shl      $16, %rax
   or       %rdx, %rax
   mov      Buf, %al
   pop      %rdx
.1063:
   shl      $4, %rax
   orb      $2, %al
   push     %rax
   call     cons_A
   popq     (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   ret

   .balign  16
   .globl  mkStrE_E
mkStrE_E:
   cmp      %r12, %rbx
   jz       retNil
   cmp      %r12b, (%rbx)
   jz       retNil
   push     %rdx
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.1068:
   mov      (%rbx), %al
   call     byteSymBCX_CX
   inc      %rbx
   cmp      %r12b, (%rbx)
   jnz      .1068
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   pop      %rdx
   ret

   .balign  16
   .globl  mkStrEZ_A
mkStrEZ_A:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.1069:
   mov      (%rbx), %al
   call     byteSymBCX_CX
   cmp      %r15, %rbx
   jz       .1070
   inc      %rbx
   cmp      %r12b, (%rbx)
   jnz      .1069
.1070:
   call     cons_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .globl  firstByteA_B
firstByteA_B:
   call     nameA_A
   testb    $0x02, %al
   jz       .1071
   shr      $4, %rax
   jmp      .1072
.1071:
   mov      -4(%rax), %rax
.1072:
   rep
   ret

   .balign  16
   .globl  firstCharE_A
firstCharE_A:
   mov      %r12, %rax
   cmp      $Nil, %rbx
   jz       .1073
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
   call     symCharCX_FACX
   pop      %r13
.1073:
   rep
   ret

   .balign  16
   .globl  isBlankE_F
isBlankE_F:
   testb    $0x06, %bl
   jnz      ret
   testb    $0x08, %bl
   jz       retnz
   cmp      $Nil, %rbx
   jz       ret
   testb    $0x08, -8(%rbx)
   jnz      ret
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
.1074:
   call     symByteCX_FACX
   jz       .1075
   cmp      $32, %al
   jbe      .1074
.1075:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSpQ
doSpQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     isBlankE_F
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doPatQ
doPatQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doFunQ
doFunQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     funqE_FE
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doGetd
doGetd:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .1076
   testb    $0x08, %bl
   jz       .1076
   push     %rbx
   mov      (%rbx), %rbx
   call     funqE_FE
   pop      %rbx
   jnz      .1078
   mov      (%rbx), %rbx
   ret
.1078:
   cmpq     $Nil, (%rbx)
   jnz      .1076
   mov      %rbx, %rdx
   call     sharedLibC_FA
   jz       .1076
   mov      %rax, %rbx
   ret
.1076:
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doAll
doAll:
   push     %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1081
   cmpq     $Nil, (%rbx)
   jnz      .1082
   cmpq     $Nil, 8(%rbx)
   cmovzq   Intern, %rbx
   cmovnzq  Intern+8, %rbx
   jmp      .1085
.1082:
   cmpq     $TSym, (%rbx)
   mov      $Extern, %r10
   cmovnzq  %r10, %rbx
   jnz      .1085
   cmpq     $Nil, 8(%rbx)
   cmovzq   Transient, %rbx
   cmovnzq  Transient+8, %rbx
   jmp      .1085
.1081:
   cmp      $Nil, %rbx
   jnz      .1086
   mov      Intern+8, %r13
   call     consTreeXE_E
   mov      Intern, %r13
   jmp      .1087
.1086:
   cmp      $TSym, %rbx
   jnz      .1088
   mov      $Nil, %rbx
   mov      Transient+8, %r13
   call     consTreeXE_E
   mov      Transient, %r13
   jmp      .1087
.1088:
   mov      $Nil, %rbx
   mov      $Extern, %r13
.1087:
   call     consTreeXE_E
.1085:
   pop      %r13
   ret

   .balign  16
   .globl  consTreeXE_E
consTreeXE_E:
   testb    $0x0E, %r13b
   jnz      ret
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
.1091:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .1092
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      8(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rdx, 8(%rbp)
   jmp      .1091
.1092:
   mov      %r13, 16(%rbp)
.1093:
   call     consE_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .1096
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   orb      $8, %dl
   mov      %rdx, 8(%rbp)
   mov      %r13, 16(%rbp)
   jmp      .1091
.1096:
   mov      8(%rbp), %rax
   cmp      $Nil, %rax
   jz       consTreeXE_E_90
   testb    $0x08, %al
   jnz      .1097
   mov      8(%rax), %rdx
   mov      8(%rdx), %r10
   mov      %r10, 8(%rbp)
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   mov      %r13, 16(%rbp)
   jmp      .1093
.1097:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r10
   mov      %r10, 8(%rbp)
   mov      %r13, (%rdx)
   mov      %rax, %r13
   mov      %r13, 16(%rbp)
   jmp      .1096
consTreeXE_E_90:
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .globl  doIntern
doIntern:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       .1099
   push     %r14
   mov      $Intern, %r14
   call     internEXY_FE
   pop      %r14
   pop      %r13
   ret
.1099:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doExtern
doExtern:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       doExtern_90
   mov      %r12, %rdx
   call     symCharCX_FACX
   cmp      $123, %al
   jnz      .1101
   call     symCharCX_FACX
.1101:
   mov      %r12, %rbx
.1102:
   cmp      $64, %al
   jc       .1103
   cmp      $79, %al
   ja       doExtern_90
   sub      $64, %al
   shl      $4, %rbx
   add      %rax, %rbx
   call     symCharCX_FACX
   jz       doExtern_90
   jmp      .1102
.1103:
   cmp      $48, %al
   jc       doExtern_90
   cmp      $55, %al
   ja       doExtern_90
   sub      $48, %al
   movzx    %al, %rax
   mov      %rax, %r14
.1104:
   call     symCharCX_FACX
   jz       .1105
   cmp      $125, %al
   jz       .1105
   cmp      $48, %al
   jc       doExtern_90
   cmp      $55, %al
   ja       doExtern_90
   sub      $48, %al
   shl      $3, %r14
   add      %rax, %r14
   jmp      .1104
.1105:
   mov      %r14, %rdx
   call     extNmCE_X
   call     externX_E
   call     isLifeE_F
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   pop      %r14
   pop      %r13
   ret
doExtern_90:
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doHide
doHide:
   mov      $Nil, %rax
   mov      %rax, Transient
   mov      %rax, Transient+8
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r15
.1106:
   testb    $0x0E, %r15b
   jnz      .1107
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Transient, %r14
   call     internEXY_FE
   pop      %r13
   mov      8(%r15), %r15
   jmp      .1106
.1107:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doBoxQ
doBoxQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   call     nameA_A
   cmp      $2, %rax
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doStrQ
doStrQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   testb    $0x08, -8(%rbx)
   jnz      retNil
   push     %r13
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Intern, %r14
   call     isInternEXY_F
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doExtQ
doExtQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jz       retNil
   call     isLifeE_F
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doTouch
doTouch:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .1108
   call     dbTouchEX
.1108:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doZap
doZap:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jz       .1109
   call     dbZapE
   jmp      .1110
.1109:
   cmp      $Nil, %rbx
   jc       .1111
   cmp      $Bye, %rbx
   jbe      protErrEX
.1111:
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      $Intern, %r14
   call     uninternXY
   pop      %r14
.1110:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doChop
doChop:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       .1112
   cmp      $Nil, %rbx
   jz       .1112
   push     %r13
   call     xSymE_E
   mov      -8(%rbx), %r13
   call     nameX_X
   testb    $0x08, -8(%rbx)
   jnz      .1114
   mov      %r12, %rdx
   call     symCharCX_FACX
   jz       .1115
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   call     mkCharA_A
   call     consA_Y
   mov      %rax, (%r14)
   movq     $Nil, 8(%r14)
   mov      (%rsp), %rbp
   movq     %r14, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1116:
   call     symCharCX_FACX
   jz       .1117
   call     mkCharA_A
   call     consA_E
   mov      %rax, (%rbx)
   movq     $Nil, 8(%rbx)
   mov      %rbx, 8(%r14)
   mov      %rbx, %r14
   jmp      .1116
.1117:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   jmp      .1119
.1115:
   mov      $Nil, %rbx
   jmp      .1119
.1114:
   call     chopExtNmX_E
.1119:
   pop      %r13
.1112:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doPack
doPack:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.1120:
   call     packECX_CX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1121
   mov      %rdx, %r15
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 24(%rbp)
   mov      %r15, %rdx
   jmp      .1120
.1121:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  packECX_CX
packECX_CX:
   testb    $0x0E, %bl
   jnz      .1122
.1123:
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     packECX_CX
   pop      %rbx
   testb    $0x0E, %bl
   jz       .1123
.1122:
   cmp      $Nil, %rbx
   jz       ret
   testb    $0x06, %bl
   jnz      .1124
   testb    $0x08, -8(%rbx)
   jz       packECX_CX_10
   mov      $123, %al
   call     byteSymBCX_CX
   push     %rdx
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   call     packExtNmX_E
   mov      %rbx, 16(%rbp)
   pop      %r13
   pop      %rdx
   call     packECX_CX_10
   mov      $125, %al
   jmp      byteSymBCX_CX
.1124:
   mov      %r12, %rax
   call     fmtNum0AE_E
   mov      %rbx, 16(%rbp)
packECX_CX_10:
   push     %rdx
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
.1127:
   call     symByteCX_FACX
   jz       .1128
   xchg     8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     byteSymBCX_CX
   xchg     (%rsp), %r13
   xchg     8(%rsp), %rdx
   jmp      .1127
.1128:
   pop      %r13
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .globl  doGlue
doGlue:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $2
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %bl
   jnz      .1129
   mov      %rbx, %r14
.1130:
   mov      (%r14), %rbx
   call     packECX_CX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1131
   mov      32(%rbp), %rbx
   call     packECX_CX
   jmp      .1130
.1131:
   mov      8(%rbp), %r13
   call     consSymX_E
.1129:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doText
doText:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   call     evSymX_E
   cmp      $Nil, %rbx
   jz       .1132
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.1133:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1134
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1133
.1134:
   pushq    $2
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $4
   push     %r13
   mov      (%rbp), %r10
   mov      -8(%r10), %r13
   mov      %r12, %rdx
.1135:
   call     symByteCX_FACX
   jz       .1136
   cmp      $64, %al
   jz       .1137
doText_10:
   xchg     8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     byteSymBCX_CX
   xchg     (%rsp), %r13
   xchg     8(%rsp), %rdx
   jmp      .1135
.1137:
   call     symByteCX_FACX
   jz       .1136
   cmp      $64, %al
   jz       doText_10
   sub      $48, %al
   jbe      .1135
   cmp      $8, %al
   jbe      .1139
   sub      $7, %al
.1139:
   shl      $3, %rax
   mov      (%rbp), %r10
   lea      -8(%r10), %rbx
   sub      %rax, %rbx
   lea      16(%rbp), %rax
   cmp      %rax, %rbx
   jbe      .1135
   mov      (%rbx), %rbx
   xchg     8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     packECX_CX
   xchg     (%rsp), %r13
   xchg     8(%rsp), %rdx
   jmp      .1135
.1136:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1132:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  preCEXY_F
preCEXY_F:
.1141:
   call     symByteCX_FACX
   jz       ret
   mov      %al, Buf
   xchg     %rbx, %rdx
   xchg     %r14, %r13
   call     symByteCX_FACX
   jz       retnz
   cmp      %al, Buf
   jnz      ret
   xchg     %rbx, %rdx
   xchg     %r14, %r13
   jmp      .1141

   .balign  16
   .globl  subStrAE_F
subStrAE_F:
   cmp      $Nil, %rax
   jz       ret
   mov      -8(%rax), %rax
   call     nameA_A
   cmpq     $2, %rax
   jz       ret
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jz       retnz
   push     %r13
   push     %r14
   push     %r15
   push     %rax
   mov      %rbx, %r15
   push     %r12
.1142:
   mov      8(%rsp), %r13
   mov      %r12, %rdx
   mov      %r15, %r14
   mov      (%rsp), %rbx
   call     preCEXY_F
   jz       .1143
   mov      (%rsp), %rax
   shr      $8, %rax
   jnz      .1144
   cmpq     $2, %r15
   jnz      .1145
   cmp      %rsp, %r12
   jmp      .1143
.1145:
   testb    $0x02, %r15b
   jz       .1146
   mov      %r15, %rax
   shr      $4, %rax
   mov      $2, %r15
   jmp      .1144
.1146:
   mov      -4(%r15), %rax
   mov      4(%r15), %r15
.1144:
   mov      %rax, (%rsp)
   jmp      .1142
.1143:
   pop      %rax
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPreQ
doPreQ:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   call     evSymX_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   call     evSymX_E
   mov      8(%rbp), %r13
   cmp      $Nil, %r13
   jz       .1148
   mov      %rbx, %r15
   mov      -8(%r13), %r13
   call     nameX_X
   mov      %r12, %rdx
   mov      -8(%rbx), %rbx
   call     nameE_E
   mov      %rbx, %r14
   mov      %r12, %rbx
   call     preCEXY_F
   mov      $Nil, %rbx
   cmovzq   %r15, %rbx
.1148:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSubQ
doSubQ:
   push     %r13
   mov      8(%rbx), %r13
   call     evSymX_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r13
   call     evSymX_E
   mov      8(%rbp), %rax
   mov      %rbx, %r13
   call     subStrAE_F
   mov      $Nil, %rbx
   cmovzq   %r13, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doVal
doVal:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   testb    $0x08, %bl
   jz       .1149
   testb    $0x08, -8(%rbx)
   jz       .1149
   call     dbFetchEX
.1149:
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSet
doSet:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
.1151:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1152
   testb    $0x08, -8(%rbx)
   jz       .1152
   call     dbTouchEX
.1152:
   mov      %rbx, 8(%rbp)
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1151
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSetq
doSetq:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
.1154:
   mov      (%r14), %rbx
   call     needVarEX
   mov      %rbx, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1154
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doXchg
doXchg:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
.1155:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1156
   testb    $0x08, -8(%rbx)
   jz       .1156
   call     dbTouchEX
.1156:
   mov      %rbx, 8(%rbp)
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1158
   testb    $0x08, -8(%rbx)
   jz       .1158
   call     dbTouchEX
.1158:
   mov      8(%rbp), %rdx
   mov      (%rdx), %rax
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   mov      %rax, (%rbx)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1155
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOn
doOn:
   push     %r13
   mov      8(%rbx), %r13
.1160:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $TSym, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1160
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOff
doOff:
   push     %r13
   mov      8(%rbx), %r13
.1161:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $Nil, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1161
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOnOff
doOnOff:
   push     %r13
   mov      8(%rbx), %r13
.1162:
   mov      (%r13), %rbx
   call     needVarEX
   cmpq     $Nil, (%rbx)
   mov      $TSym, %rax
   mov      $Nil, %r10
   cmovnzq  %r10, %rax
   mov      %rax, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1162
   mov      %rax, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doZero
doZero:
   push     %r13
   mov      8(%rbx), %r13
.1163:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $2, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1163
   mov      $2, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOne
doOne:
   push     %r13
   mov      8(%rbx), %r13
.1164:
   mov      (%r13), %rbx
   call     needVarEX
   movq     $18, (%rbx)
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1164
   mov      $18, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDefault
doDefault:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
.1165:
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   call     needVarEX
   mov      %rbx, %r15
   cmpq     $Nil, (%r15)
   jnz      .1166
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, (%r15)
.1166:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1165
   mov      (%r15), %rbx
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPush
doPush:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1167
   testb    $0x08, -8(%rbx)
   jz       .1167
   call     dbTouchEX
.1167:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
.1169:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%rbp), %rdx
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%rdx)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1169
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPush1
doPush1:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1170
   testb    $0x08, -8(%rbx)
   jz       .1170
   call     dbTouchEX
.1170:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
.1172:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r10
   mov      (%r10), %rdx
.1173:
   testb    $0x0E, %dl
   jnz      .1174
   mov      (%rdx), %rax
   mov      %rbx, %r15
   call     equalAE_F
   mov      %r15, %rbx
   jz       doPush1_10
   mov      8(%rdx), %rdx
   jmp      .1173
.1174:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%rbp), %rdx
   mov      (%rdx), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%rdx)
doPush1_10:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1172
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPop
doPop:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1175
   testb    $0x08, -8(%rbx)
   jz       .1175
   call     dbTouchEX
.1175:
   mov      %rbx, %rax
   mov      (%rax), %rbx
   testb    $0x0E, %bl
   jnz      .1177
   mov      8(%rbx), %r10
   mov      %r10, (%rax)
   mov      (%rbx), %rbx
.1177:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCut
doCut:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   jle      .1178
   mov      8(%r14), %r10
   mov      (%r10), %r14
   xchg     %r14, %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1179
   testb    $0x08, -8(%rbx)
   jz       .1179
   call     dbTouchEX
.1179:
   testb    $0x0E, (%rbx)
   cmovnzq  (%rbx), %rbx
   jnz      .1181
   call     consE_X
   mov      (%rbx), %rdx
   mov      (%rdx), %r10
   mov      %r10, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.1182:
   mov      8(%rdx), %rdx
   testb    $0x0E, %dl
   jnz      .1183
   dec      %r14
   jz       .1183
   call     cons_A
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   mov      8(%r13), %r13
   jmp      .1182
.1183:
   mov      16(%rbp), %r11
   mov      %rdx, (%r11)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1181:
   pop      %r14
   pop      %r13
   ret
.1178:
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDel
doDel:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     needVarEX
   testb    $0x08, %bl
   jz       .1184
   testb    $0x08, -8(%rbx)
   jz       .1184
   call     dbTouchEX
.1184:
   mov      8(%rbp), %r10
   mov      (%r10), %rbx
   testb    $0x0E, %bl
   jnz      doDel_90
   mov      %rbx, %r14
   mov      (%r14), %rbx
   mov      16(%rbp), %rax
   call     equalAE_F
   jnz      .1187
   mov      8(%r14), %rbx
   mov      8(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      doDel_90
.1187:
   call     cons_Z
   mov      (%r14), %r10
   mov      %r10, (%r15)
   movq     $Nil, 8(%r15)
   mov      (%rsp), %rbp
   movq     %r15, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1189:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1190
   mov      (%r14), %rbx
   mov      24(%rbp), %rax
   call     equalAE_F
   jnz      .1191
   mov      8(%r14), %r10
   mov      %r10, 8(%r15)
   mov      8(%rbp), %rbx
   mov      16(%rbp), %r11
   mov      %rbx, (%r11)
   jmp      doDel_90
.1191:
   call     cons_A
   mov      (%r14), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      8(%r15), %r15
   jmp      .1189
.1190:
   mov      16(%rbp), %r10
   mov      (%r10), %rbx
doDel_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doQueue
doQueue:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1192
   testb    $0x08, -8(%rbx)
   jz       .1192
   call     dbTouchEX
.1192:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      8(%rbp), %r13
   mov      (%r13), %r14
   testb    $0x0E, %r14b
   jz       .1196
   mov      %rdx, (%r13)
   jmp      .1195
.1196:
   testb    $0x0E, 8(%r14)
   jnz      .1197
   mov      8(%r14), %r14
   jmp      .1196
.1197:
   mov      %rdx, 8(%r14)
.1195:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFifo
doFifo:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   testb    $0x08, %bl
   jz       .1198
   testb    $0x08, -8(%rbx)
   jz       .1198
   call     dbTouchEX
.1198:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1200
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%rbp), %rdx
   mov      (%rdx), %r13
   testb    $0x0E, %r13b
   jnz      .1201
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r13)
   jmp      .1202
.1201:
   mov      %rax, 8(%rax)
   mov      %r13, (%rdx)
.1202:
   mov      %rax, %r13
.1203:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1204
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r13)
   mov      %rax, %r13
   jmp      .1203
.1204:
   mov      8(%rbp), %r11
   mov      %r13, (%r11)
   jmp      .1205
.1200:
   mov      8(%rbp), %rdx
   mov      (%rdx), %r13
   testb    $0x0E, %r13b
   jz       .1206
   mov      $Nil, %rbx
   jmp      .1205
.1206:
   cmp      8(%r13), %r13
   jnz      .1208
   mov      (%r13), %rbx
   movq     $Nil, (%rdx)
   jmp      .1205
.1208:
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   mov      8(%r13), %r10
   mov      8(%r10), %r10
   mov      %r10, 8(%r13)
.1205:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doIdx
doIdx:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     needVarEX
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   testb    $0x0E, %r13b
   jz       .1210
   mov      (%rbx), %r13
   mov      $Nil, %rbx
   call     consTreeXE_E
   jmp      .1211
.1210:
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1212
   mov      16(%rbp), %r13
   call     idxGetXY_E
   jmp      .1213
.1212:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %r13
   cmp      $Nil, %rbx
   jz       .1214
   call     idxPutXY_E
   jmp      .1213
.1214:
   call     idxDelXY_E
.1213:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
.1211:
   pop      %r13
   ret

   .balign  16
   .globl  idxGetXY_E
idxGetXY_E:
   mov      (%r13), %r13
.1216:
   testb    $0x0E, %r13b
   mov      $Nil, %rbx
   jnz      .1217
   mov      %r14, %rax
   mov      (%r13), %rbx
   call     compareAE_F
   mov      %r13, %rbx
   jz       .1217
   mov      8(%r13), %r13
   cmovcq   (%r13), %r13
   cmovncq  8(%r13), %r13
   jmp      .1216
.1217:
   rep
   ret

   .balign  16
   .globl  idxPutXY_E
idxPutXY_E:
   testb    $0x0E, (%r13)
   jz       .1218
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%r13)
   mov      $Nil, %rbx
   jmp      .1219
.1218:
   mov      (%r13), %r13
.1220:
   mov      %r14, %rax
   mov      (%r13), %rbx
   call     compareAE_F
   mov      %r13, %rbx
   jz       .1219
   mov      8(%r13), %rax
   jc       .1222
   testb    $0x0E, %al
   jz       .1223
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   movq     $Nil, (%rdx)
   mov      %rax, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      $Nil, %rbx
   jmp      .1219
.1223:
   mov      %rax, %r13
   testb    $0x0E, 8(%r13)
   cmovzq   8(%r13), %r13
   jz       .1220
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   mov      $Nil, %rbx
   jmp      .1219
.1222:
   testb    $0x0E, %al
   jz       .1226
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      $Nil, %rbx
   jmp      .1219
.1226:
   mov      %rax, %r13
   testb    $0x0E, (%r13)
   cmovzq   (%r13), %r13
   jz       .1220
   call     cons_A
   mov      %r14, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, (%r13)
   mov      $Nil, %rbx
.1219:
   rep
   ret

   .balign  16
   .globl  idxDelXY_E
idxDelXY_E:
.1228:
   testb    $0x0E, (%r13)
   mov      $Nil, %rbx
   jnz      .1229
   mov      %r14, %rax
   mov      (%r13), %r10
   mov      (%r10), %rbx
   call     compareAE_F
   jnz      .1230
   mov      (%r13), %rdx
   mov      %rdx, %rbx
   mov      8(%rdx), %rax
   testb    $0x0E, (%rax)
   jz       .1231
   mov      8(%rax), %r10
   mov      %r10, (%r13)
   ret
.1231:
   testb    $0x0E, 8(%rax)
   jz       .1232
   mov      (%rax), %r10
   mov      %r10, (%r13)
   ret
.1232:
   mov      8(%rax), %rax
   mov      8(%rax), %r13
   testb    $0x0E, (%r13)
   jz       .1233
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      8(%rdx), %r11
   mov      8(%r13), %r10
   mov      %r10, 8(%r11)
   ret
.1233:
   push     %rbx
   mov      (%r13), %r13
.1234:
   mov      8(%r13), %rbx
   testb    $0x0E, (%rbx)
   jnz      .1235
   mov      %r13, %rax
   mov      (%rbx), %r13
   jmp      .1234
.1235:
   mov      (%r13), %r10
   mov      %r10, (%rdx)
   mov      8(%rax), %r11
   mov      8(%rbx), %r10
   mov      %r10, (%r11)
   pop      %rbx
   ret
.1230:
   mov      $Nil, %rbx
   mov      (%r13), %r10
   mov      8(%r10), %r13
   jc       .1236
   testb    $0x0E, %r13b
   jnz      .1229
   lea      8(%r13), %r13
   jmp      .1228
.1236:
   testb    $0x0E, %r13b
   jz       .1228
.1229:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doLup
doLup:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1238
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1239
   pop      %r13
   pop      %rbp
   push     %r14
   mov      %rbx, %r14
.1240:
   mov      (%r13), %rbx
   cmp      $TSym, %rbx
   jnz      .1241
   mov      8(%r13), %r10
   mov      (%r10), %r13
   jmp      .1242
.1241:
   testb    $0x0E, %bl
   jz       .1243
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   jmp      .1242
.1243:
   mov      %r14, %rax
   mov      (%rbx), %rbx
   call     compareAE_F
   jnz      .1245
   mov      (%r13), %rbx
   pop      %r14
   pop      %r13
   ret
.1245:
   mov      8(%r13), %r13
   cmovcq   (%r13), %r13
   cmovncq  8(%r13), %r13
.1242:
   testb    $0x0E, %r13b
   jz       .1240
   mov      $Nil, %rbx
   pop      %r14
   jmp      .1238
.1239:
   push     %rbx
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $Nil
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      40(%rbp), %r13
.1248:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .1249
   mov      (%r13), %rbx
   cmp      $TSym, %rbx
   jz       .1249
   testb    $0x0E, %bl
   jnz      doLup_10
   mov      24(%rbp), %rax
   mov      (%rbx), %rbx
   call     compareAE_F
   jc       .1249
doLup_10:
   mov      %r13, %rdx
   mov      8(%r13), %rax
   mov      8(%rax), %r13
   mov      16(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rdx, 16(%rbp)
   jmp      .1248
.1249:
   mov      %r13, 40(%rbp)
.1250:
   mov      (%r13), %rbx
   testb    $0x0E, %bl
   jnz      .1256
   mov      32(%rbp), %rax
   mov      (%rbx), %rbx
   call     compareAE_F
   ja       .1256
   mov      24(%rbp), %rax
   mov      (%r13), %r10
   mov      (%r10), %rbx
   call     compareAE_F
   jc       .1253
   call     cons_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%rbp)
.1253:
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .1256
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      16(%rbp), %r10
   mov      %r10, (%rax)
   orb      $8, %dl
   mov      %rdx, 16(%rbp)
   mov      %r13, 40(%rbp)
   jmp      .1248
.1256:
   mov      16(%rbp), %rax
   cmp      $Nil, %rax
   jnz      .1257
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1257:
   testb    $0x08, %al
   jnz      .1258
   mov      8(%rax), %rdx
   mov      8(%rdx), %r10
   mov      %r10, 16(%rbp)
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   mov      %r13, 40(%rbp)
   jmp      .1250
.1258:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r10
   mov      %r10, 16(%rbp)
   mov      %r13, (%rdx)
   mov      %rax, %r13
   mov      %r13, 40(%rbp)
   jmp      .1256
.1238:
   pop      %r13
   ret

   .balign  16
   .globl  setAE
setAE:
   mov      %rbx, (%rax)
   ret

   .balign  16
   .globl  putACE
putACE:
   cmpq     $2, %rdx
   jz       setAE
   push     %r13
   mov      -8(%rax), %r13
   testb    $0x06, %r13b
   jnz      .1260
   andb     $~8, %r13b
   testb    $0x0E, (%r13)
   jz       .1261
   cmp      (%r13), %rdx
   jnz      .1265
   cmp      $Nil, %rbx
   jnz      .1263
putACE_10:
   mov      8(%r13), %r13
   testb    $0x08, -8(%rax)
   jz       .1264
   orb      $8, %r13b
.1264:
   mov      %r13, -8(%rax)
putACE_20:
   pop      %r13
   ret
.1263:
   cmp      $TSym, %rbx
   jz       putACE_20
   push     %rdx
   call     consE_C
   mov      %rbx, (%rdx)
   popq     8(%rdx)
   mov      %rdx, (%r13)
   pop      %r13
   ret
.1261:
   mov      (%r13), %r10
   cmp      8(%r10), %rdx
   jnz      .1265
   cmp      $Nil, %rbx
   jz       putACE_10
   cmp      $TSym, %rbx
   jz       .1267
   mov      (%r13), %r11
   mov      %rbx, (%r11)
   jmp      .1268
.1267:
   mov      %rdx, (%r13)
.1268:
   pop      %r13
   ret
.1265:
   push     %r14
.1269:
   mov      8(%r13), %r14
   testb    $0x0E, %r14b
   jnz      .1270
   testb    $0x0E, (%r14)
   jz       .1271
   cmp      (%r14), %rdx
   jnz      .1278
   cmp      $Nil, %rbx
   jnz      .1273
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   jmp      .1278
.1273:
   cmp      $TSym, %rbx
   jz       .1275
   push     %rdx
   call     consE_C
   mov      %rbx, (%rdx)
   popq     8(%rdx)
   mov      %rdx, (%r14)
.1275:
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   mov      -8(%rax), %r13
   testb    $0x08, %r13b
   jnz      .1276
   mov      %r13, 8(%r14)
   jmp      .1277
.1276:
   andb     $~8, %r13b
   mov      %r13, 8(%r14)
   orb      $8, %r14b
.1277:
   mov      %r14, -8(%rax)
   pop      %r14
   pop      %r13
   ret
.1271:
   mov      (%r14), %r10
   cmp      8(%r10), %rdx
   jnz      .1278
   cmp      $Nil, %rbx
   jnz      .1280
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   jmp      .1278
.1280:
   cmp      $TSym, %rbx
   jz       .1282
   mov      (%r14), %r11
   mov      %rbx, (%r11)
   jmp      .1283
.1282:
   mov      %rdx, (%r14)
.1283:
   mov      8(%r14), %r10
   mov      %r10, 8(%r13)
   mov      -8(%rax), %r13
   testb    $0x08, %r13b
   jnz      .1284
   mov      %r13, 8(%r14)
   jmp      .1285
.1284:
   andb     $~8, %r13b
   mov      %r13, 8(%r14)
   orb      $8, %r14b
.1285:
   mov      %r14, -8(%rax)
   pop      %r14
   pop      %r13
   ret
.1278:
   mov      %r14, %r13
   jmp      .1269
.1270:
   pop      %r14
   mov      -8(%rax), %r13
.1260:
   cmp      $Nil, %rbx
   jz       .1286
   cmp      $TSym, %rbx
   jz       .1287
   push     %rdx
   call     consE_C
   mov      %rbx, (%rdx)
   popq     8(%rdx)
.1287:
   push     %rdx
   call     consC_C
   popq     (%rdx)
   testb    $0x08, %r13b
   jnz      .1288
   mov      %r13, 8(%rdx)
   jmp      .1289
.1288:
   andb     $~8, %r13b
   mov      %r13, 8(%rdx)
   orb      $8, %dl
.1289:
   mov      %rdx, -8(%rax)
.1286:
   pop      %r13
   ret

   .balign  16
   .globl  getnECX_E
getnECX_E:
   testb    $0x06, %bl
   jnz      argErrEX
   testb    $0x0E, %bl
   jnz      .1290
   testb    $0x06, %dl
   jz       .1295
   shr      $4, %rdx
   jc       .1294
   jz       retNil
.1293:
   dec      %rdx
   jz       retE_E
   mov      8(%rbx), %rbx
   jmp      .1293
.1294:
   mov      8(%rbx), %rbx
   dec      %rdx
   jnz      .1294
   rep
   ret
.1295:
   testb    $0x0E, (%rbx)
   jnz      .1296
   mov      (%rbx), %r10
   cmp      (%r10), %rdx
   jz       .1297
.1296:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      retNil
   jmp      .1295
.1297:
   mov      (%rbx), %r10
   mov      8(%r10), %rbx
   ret
.1290:
   testb    $0x08, -8(%rbx)
   jz       .1298
   call     dbFetchEX
.1298:

   .balign  16
   .globl  getEC_E
getEC_E:
   cmpq     $2, %rdx
   jz       retE_E
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      retNil
   andb     $~8, %al
   testb    $0x0E, (%rax)
   jz       .1299
   cmp      (%rax), %rdx
   jz       retT
   jmp      .1300
.1299:
   mov      (%rax), %r10
   cmp      8(%r10), %rdx
   jnz      .1300
   mov      (%rax), %r10
   mov      (%r10), %rbx
   ret
.1300:
   push     %r13
.1302:
   mov      8(%rax), %r13
   testb    $0x0E, %r13b
   jnz      .1303
   testb    $0x0E, (%r13)
   jz       .1304
   cmp      (%r13), %rdx
   jnz      .1308
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1306
   mov      %rax, 8(%r13)
   jmp      .1307
.1306:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   orb      $8, %r13b
.1307:
   mov      %r13, -8(%rbx)
   mov      $TSym, %rbx
   pop      %r13
   ret
.1304:
   mov      (%r13), %r10
   cmp      8(%r10), %rdx
   jnz      .1308
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1310
   mov      %rax, 8(%r13)
   mov      %r13, -8(%rbx)
   mov      (%r13), %r10
   mov      (%r10), %rbx
   jmp      .1311
.1310:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   mov      (%r13), %r10
   mov      (%r10), %rax
   orb      $8, %r13b
   mov      %r13, -8(%rbx)
   mov      %rax, %rbx
.1311:
   pop      %r13
   ret
.1308:
   mov      %r13, %rax
   jmp      .1302
.1303:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   .globl  propEC_E
propEC_E:
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      retNil
   andb     $~8, %al
   testb    $0x0E, (%rax)
   jz       .1312
   cmp      (%rax), %rdx
   jnz      .1314
   mov      %rdx, %rbx
   ret
.1312:
   mov      (%rax), %r10
   cmp      8(%r10), %rdx
   jnz      .1314
   mov      (%rax), %rbx
   ret
.1314:
   push     %r13
.1316:
   mov      8(%rax), %r13
   testb    $0x0E, %r13b
   jnz      .1317
   testb    $0x0E, (%r13)
   jz       .1318
   cmp      (%r13), %rdx
   jnz      .1322
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1320
   mov      %rax, 8(%r13)
   jmp      .1321
.1320:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   orb      $8, %r13b
.1321:
   mov      %r13, -8(%rbx)
   mov      %rdx, %rbx
   pop      %r13
   ret
.1318:
   mov      (%r13), %r10
   cmp      8(%r10), %rdx
   jnz      .1322
   mov      8(%r13), %r10
   mov      %r10, 8(%rax)
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1324
   mov      %rax, 8(%r13)
   mov      %r13, -8(%rbx)
   mov      (%r13), %rbx
   jmp      .1325
.1324:
   andb     $~8, %al
   mov      %rax, 8(%r13)
   mov      (%r13), %rax
   orb      $8, %r13b
   mov      %r13, -8(%rbx)
   mov      %rax, %rbx
.1325:
   pop      %r13
   ret
.1322:
   mov      %r13, %rax
   jmp      .1316
.1317:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPut
doPut:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1326:
   mov      8(%r14), %r14
   testb    $0x0E, 8(%r14)
   jnz      .1327
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 16(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   jmp      .1326
.1327:
   mov      16(%rbp), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       protErrEX
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      16(%rbp), %rax
   testb    $0x08, -8(%rax)
   jz       .1328
   push     %rbx
   mov      %rax, %rbx
   call     dbTouchEX
   mov      %rbx, %rax
   pop      %rbx
.1328:
   mov      8(%rbp), %rdx
   call     putACE
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doGet
doGet:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1329
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1330:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1331
   mov      %rbx, 8(%rbp)
   jmp      .1330
.1331:
   mov      (%rbp), %rsp
   pop      %rbp
.1329:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doProp
doProp:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1332:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1333
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 16(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   jmp      .1332
.1333:
   mov      16(%rbp), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .1334
   call     dbFetchEX
.1334:
   mov      8(%rbp), %rdx
   call     propEC_E
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSemicol
doSemicol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1335
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1336:
   mov      (%r14), %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1337
   mov      %rbx, 8(%rbp)
   jmp      .1336
.1337:
   mov      (%rbp), %rsp
   pop      %rbp
.1335:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSetCol
doSetCol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      This, %rbx
   testb    $0x08, -8(%rbx)
   jz       .1338
   call     dbFetchEX
.1338:
   mov      (%r14), %rdx
   mov      8(%r14), %r14
   testb    $0x0E, 8(%r14)
   jnz      .1339
   call     getEC_E
.1340:
   mov      (%r14), %rdx
   mov      8(%r14), %r14
   testb    $0x0E, 8(%r14)
   jnz      .1339
   call     getnECX_E
   jmp      .1340
.1339:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       protErrEX
   testb    $0x08, -8(%rbx)
   jz       .1342
   call     dbTouchEX
.1342:
   push     %rdx
   push     %rbx
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   pop      %rdx
   call     putACE
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCol
doCol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      This, %rbx
   testb    $0x08, -8(%rbx)
   jz       .1343
   call     dbFetchEX
.1343:
   mov      (%r14), %rdx
   call     getEC_E
.1344:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1345
   mov      (%r14), %rdx
   call     getnECX_E
   jmp      .1344
.1345:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPropCol
doPropCol:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      This, %rbx
   testb    $0x08, -8(%rbx)
   jz       .1346
   call     dbFetchEX
.1346:
   mov      (%r14), %rdx
   testb    $0x0E, 8(%r14)
   jnz      .1347
   call     getEC_E
.1348:
   mov      8(%r14), %r14
   mov      (%r14), %rdx
   testb    $0x0E, 8(%r14)
   jnz      .1347
   call     getnECX_E
   jmp      .1348
.1347:
   call     propEC_E
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPutl
doPutl:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1350:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1351
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 16(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   jmp      .1350
.1351:
   mov      16(%rbp), %rbx
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       protErrEX
   testb    $0x08, -8(%rbx)
   jz       .1352
   call     dbTouchEX
.1352:
   mov      -8(%rbx), %r13
   andb     $~8, %r13b
.1353:
   testb    $0x06, %r13b
   jnz      .1354
   mov      8(%r13), %r13
   jmp      .1353
.1354:
   mov      8(%rbp), %r14
.1355:
   testb    $0x0E, %r14b
   jnz      .1356
   mov      (%r14), %rdx
   testb    $0x0E, %dl
   jz       .1357
   mov      %r13, %rax
   call     consA_X
   mov      %rdx, (%r13)
   mov      %rax, 8(%r13)
   jmp      .1358
.1357:
   cmpq     $Nil, (%rdx)
   jz       .1358
   cmpq     $TSym, (%rdx)
   jnz      .1360
   mov      8(%rdx), %rdx
.1360:
   mov      %r13, %rax
   call     consA_X
   mov      %rdx, (%r13)
   mov      %rax, 8(%r13)
.1358:
   mov      8(%r14), %r14
   jmp      .1355
.1356:
   testb    $0x08, -8(%rbx)
   jz       .1361
   orb      $8, %r13b
.1361:
   mov      %r13, -8(%rbx)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doGetl
doGetl:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1362:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1363
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   mov      %rbx, 8(%rbp)
   jmp      .1362
.1363:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       .1364
   call     dbFetchEX
.1364:
   mov      -8(%rbx), %r13
   testb    $0x06, %r13b
   jz       .1365
   mov      $Nil, %rbx
   jmp      .1366
.1365:
   andb     $~8, %r13b
   call     cons_C
   mov      (%r13), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1367:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1368
   call     cons_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1367
.1368:
   mov      8(%rbp), %rbx
.1366:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doWipe
doWipe:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1369
   testb    $0x0E, %bl
   jz       .1370
   call     wipeE
   jmp      .1369
.1370:
   push     %rbx
   mov      %rbx, %rdx
.1372:
   mov      (%rdx), %rbx
   call     wipeE
   mov      8(%rdx), %rdx
   testb    $0x0E, %dl
   jz       .1372
   pop      %rbx
.1369:
   rep
   ret

   .balign  16
   .globl  wipeE
wipeE:
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jnz      .1373
   call     nameA_A
   movq     $Nil, (%rbx)
   mov      %rax, -8(%rbx)
   ret
.1373:
   call     nameA_A
   shl      $1, %rax
   jc       .1374
   shl      $1, %rax
   jnc      .1374
   clc
   rcr      $1, %rax
   rcr      $1, %rax
   movq     $Nil, (%rbx)
   orb      $8, %al
   mov      %rax, -8(%rbx)
.1374:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doMeta
doMeta:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jnz      argErrEX
   testb    $0x08, %bl
   jz       .1376
   testb    $0x08, -8(%rbx)
   jz       .1377
   call     dbFetchEX
.1377:
   mov      (%rbx), %r10
   mov      %r10, 8(%rbp)
.1376:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %r13
   call     metaCX_E
.1378:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1379
   mov      %rbx, 8(%rbp)
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   mov      8(%rbp), %rbx
   call     getnECX_E
   jmp      .1378
.1379:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  metaCX_E
metaCX_E:
.1380:
   testb    $0x0E, %r13b
   jnz      retNil
   mov      (%r13), %rbx
   testb    $0x06, %bl
   jnz      .1381
   testb    $0x08, %bl
   jz       .1381
   call     getEC_E
   cmp      $Nil, %rbx
   jnz      Ret
   push     %r13
   mov      (%r13), %r10
   mov      (%r10), %r13
   cmp      StkLimit, %rsp
   jc       stkErr
   call     metaCX_E
   pop      %r13
   cmp      $Nil, %rbx
   jnz      Ret
.1381:
   mov      8(%r13), %r13
   jmp      .1380

   .balign  16
   .globl  caseDataA_AC
caseDataA_AC:
   mov      %rax, %rdx
   shr      $4, %rax
   andb     $~1, %al
   movzwq   CaseBlocks(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   shl      $1, %rax
   movzwq   CaseData(%rax), %rax
   ret

   .balign  16
   nop
   nop
   .globl  doLowQ
doLowQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   call     firstCharE_A
   call     caseDataA_AC
   and      $31, %al
   cmp      $2, %al
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doUppQ
doUppQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   call     firstCharE_A
   call     caseDataA_AC
   and      $31, %al
   cmp      $1, %al
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doLowc
doLowc:
   push     %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .1383
   testb    $0x08, %bl
   jz       .1383
   cmp      $Nil, %rbx
   jz       .1383
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $4
   push     %r13
   mov      16(%rbp), %r13
   mov      %r12, %rdx
.1386:
   call     symCharCX_FACX
   jz       .1387
   mov      %rdx, %rbx
   call     caseDataA_AC
   and      $65535, %rax
   shr      $6, %rax
   andb     $~1, %al
   movzwq   CaseLower(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   mov      8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     charSymACX_CX
   xchg     (%rsp), %r13
   mov      %rdx, 8(%rsp)
   mov      %rbx, %rdx
   jmp      .1386
.1387:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1383:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doUppc
doUppc:
   push     %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .1388
   testb    $0x08, %bl
   jz       .1388
   cmp      $Nil, %rbx
   jz       .1388
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $4
   push     %r13
   mov      16(%rbp), %r13
   mov      %r12, %rdx
.1391:
   call     symCharCX_FACX
   jz       .1392
   mov      %rdx, %rbx
   call     caseDataA_AC
   and      $65535, %rax
   shr      $6, %rax
   andb     $~1, %al
   movzwq   CaseUpper(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   mov      8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     charSymACX_CX
   xchg     (%rsp), %r13
   mov      %rdx, 8(%rsp)
   mov      %rbx, %rdx
   jmp      .1391
.1392:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1388:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFold
doFold:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      .1393
   testb    $0x08, %bl
   jz       .1393
   cmp      $Nil, %rbx
   jz       .1393
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1396
   pushq    $24
   jmp      .1397
.1396:
   call     evCntXY_FE
   push     %rbx
.1397:
   pushq    $4
   lea      8(%rbp), %r13
   push     %r13
   mov      16(%rbp), %r13
   mov      %r12, %rdx
.1398:
   call     symCharCX_FACX
   jz       .1399
   mov      %rdx, %rbx
   call     isLetterOrDigitA_F
   jz       .1400
   subq     $1, 16(%rsp)
   js       .1399
   call     caseDataA_AC
   and      $65535, %rax
   shr      $6, %rax
   andb     $~1, %al
   movzwq   CaseLower(%rax), %rax
   add      %rdx, %rax
   and      $65535, %rax
   mov      8(%rsp), %rdx
   xchg     (%rsp), %r13
   call     charSymACX_CX
   xchg     (%rsp), %r13
   mov      %rdx, 8(%rsp)
.1400:
   mov      %rbx, %rdx
   jmp      .1398
.1399:
   mov      8(%rbp), %r13
   call     consSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
.1393:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  isLetterOrDigitA_F
isLetterOrDigitA_F:
   push     %rax
   call     caseDataA_AC
   and      $31, %al
   mov      $1, %rdx
   movzx    %al, %rax
   mov      %al, %cl
   shl      %cl, %rdx
   test     $574, %rdx
   pop      %rax
   ret

   .balign  16
   nop
   nop
   .globl  doCar
doCar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdr
doCdr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1401
   testb    $0x0E, %bl
   jnz      lstErrEX
.1401:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaar
doCaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCadr
doCadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1402
   testb    $0x0E, %bl
   jnz      lstErrEX
.1402:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdar
doCdar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1403
   testb    $0x0E, %bl
   jnz      lstErrEX
.1403:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCddr
doCddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1404
   testb    $0x0E, %bl
   jnz      lstErrEX
.1404:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1405
   testb    $0x0E, %bl
   jnz      lstErrEX
.1405:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaaar
doCaaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaadr
doCaadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1406
   testb    $0x0E, %bl
   jnz      lstErrEX
.1406:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCadar
doCadar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1407
   testb    $0x0E, %bl
   jnz      lstErrEX
.1407:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaddr
doCaddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1408
   testb    $0x0E, %bl
   jnz      lstErrEX
.1408:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1409
   testb    $0x0E, %bl
   jnz      lstErrEX
.1409:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdaar
doCdaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1410
   testb    $0x0E, %bl
   jnz      lstErrEX
.1410:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdadr
doCdadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1411
   testb    $0x0E, %bl
   jnz      lstErrEX
.1411:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1412
   testb    $0x0E, %bl
   jnz      lstErrEX
.1412:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCddar
doCddar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1413
   testb    $0x0E, %bl
   jnz      lstErrEX
.1413:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1414
   testb    $0x0E, %bl
   jnz      lstErrEX
.1414:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdddr
doCdddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1415
   testb    $0x0E, %bl
   jnz      lstErrEX
.1415:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1416
   testb    $0x0E, %bl
   jnz      lstErrEX
.1416:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1417
   testb    $0x0E, %bl
   jnz      lstErrEX
.1417:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaaaar
doCaaaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaaadr
doCaaadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1418
   testb    $0x0E, %bl
   jnz      lstErrEX
.1418:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaadar
doCaadar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1419
   testb    $0x0E, %bl
   jnz      lstErrEX
.1419:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaaddr
doCaaddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1420
   testb    $0x0E, %bl
   jnz      lstErrEX
.1420:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1421
   testb    $0x0E, %bl
   jnz      lstErrEX
.1421:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCadaar
doCadaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1422
   testb    $0x0E, %bl
   jnz      lstErrEX
.1422:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCadadr
doCadadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1423
   testb    $0x0E, %bl
   jnz      lstErrEX
.1423:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1424
   testb    $0x0E, %bl
   jnz      lstErrEX
.1424:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCaddar
doCaddar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1425
   testb    $0x0E, %bl
   jnz      lstErrEX
.1425:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1426
   testb    $0x0E, %bl
   jnz      lstErrEX
.1426:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCadddr
doCadddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1427
   testb    $0x0E, %bl
   jnz      lstErrEX
.1427:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1428
   testb    $0x0E, %bl
   jnz      lstErrEX
.1428:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1429
   testb    $0x0E, %bl
   jnz      lstErrEX
.1429:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdaaar
doCdaaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1430
   testb    $0x0E, %bl
   jnz      lstErrEX
.1430:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdaadr
doCdaadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1431
   testb    $0x0E, %bl
   jnz      lstErrEX
.1431:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1432
   testb    $0x0E, %bl
   jnz      lstErrEX
.1432:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdadar
doCdadar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1433
   testb    $0x0E, %bl
   jnz      lstErrEX
.1433:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1434
   testb    $0x0E, %bl
   jnz      lstErrEX
.1434:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdaddr
doCdaddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1435
   testb    $0x0E, %bl
   jnz      lstErrEX
.1435:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1436
   testb    $0x0E, %bl
   jnz      lstErrEX
.1436:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1437
   testb    $0x0E, %bl
   jnz      lstErrEX
.1437:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCddaar
doCddaar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1438
   testb    $0x0E, %bl
   jnz      lstErrEX
.1438:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1439
   testb    $0x0E, %bl
   jnz      lstErrEX
.1439:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCddadr
doCddadr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1440
   testb    $0x0E, %bl
   jnz      lstErrEX
.1440:
   mov      8(%rbx), %rbx
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1441
   testb    $0x0E, %bl
   jnz      lstErrEX
.1441:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1442
   testb    $0x0E, %bl
   jnz      lstErrEX
.1442:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCdddar
doCdddar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      varErrEX
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1443
   testb    $0x0E, %bl
   jnz      lstErrEX
.1443:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1444
   testb    $0x0E, %bl
   jnz      lstErrEX
.1444:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1445
   testb    $0x0E, %bl
   jnz      lstErrEX
.1445:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCddddr
doCddddr:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1446
   testb    $0x0E, %bl
   jnz      lstErrEX
.1446:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1447
   testb    $0x0E, %bl
   jnz      lstErrEX
.1447:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1448
   testb    $0x0E, %bl
   jnz      lstErrEX
.1448:
   mov      8(%rbx), %rbx
   cmp      $Nil, %rbx
   jz       .1449
   testb    $0x0E, %bl
   jnz      lstErrEX
.1449:
   mov      8(%rbx), %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doNth
doNth:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
.1450:
   testb    $0x0E, %bl
   jnz      .1451
   call     evCntXY_FE
   mov      %rbx, %rdx
   sub      $1, %rdx
   js       .1452
   mov      8(%rbp), %rbx
.1453:
   sub      $1, %rdx
   js       .1455
   mov      8(%rbx), %rbx
   jmp      .1453
.1452:
   mov      $Nil, %rbx
   jmp      .1451
.1455:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1451
   mov      (%rbx), %rbx
   mov      %rbx, 8(%rbp)
   jmp      .1450
.1451:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCon
doCon:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      cellErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r11
   mov      %rbx, 8(%r11)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCons
doCons:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1456:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, 8(%r13)
   jnz      .1457
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1456
.1457:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%r14)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doConc
doConc:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1458:
   mov      %rbx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1459
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %r14b
   jz       .1462
   mov      %rbx, 8(%rbp)
   jmp      .1458
.1462:
   testb    $0x0E, 8(%r14)
   jnz      .1463
   mov      8(%r14), %r14
   jmp      .1462
.1463:
   mov      %rbx, 8(%r14)
   jmp      .1458
.1459:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCirc
doCirc:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1464:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1465
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1464
.1465:
   mov      8(%rbp), %rbx
   mov      %rbx, 8(%r14)
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doRot
doRot:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1466
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   cmovnzq  %r12, %rbx
   jnz      .1467
   call     evCntXY_FE
.1467:
   mov      8(%rbp), %r14
   mov      (%r14), %r13
.1468:
   dec      %rbx
   jz       .1469
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1469
   cmp      8(%rbp), %r14
   jz       .1469
   xchg     (%r14), %r13
   jmp      .1468
.1469:
   mov      8(%rbp), %r11
   mov      %r13, (%r11)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1466:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doList
doList:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1470:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1471
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1470
.1471:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doNeed
doNeed:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      %rbx, %r13
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %rbx
   or       %r13, %r13
   jz       .1472
   js       .1473
   mov      %rbx, %r14
.1474:
   testb    $0x0E, %r14b
   jnz      .1476
   mov      8(%r14), %r14
   dec      %r13
   jmp      .1474
.1476:
   sub      $1, %r13
   js       .1472
   mov      %rbx, %rdx
   call     consC_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   mov      %rdx, 8(%rbx)
   jmp      .1476
.1473:
   testb    $0x0E, %bl
   jz       .1481
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   movq     $Nil, 8(%rbx)
   mov      %rbx, 16(%rbp)
   jmp      .1483
.1481:
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jnz      .1483
   inc      %r13
   mov      %r14, %rbx
   jmp      .1481
.1483:
   inc      %r13
   jns      .1484
   call     cons_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rbx)
   mov      8(%rbx), %rbx
   jmp      .1483
.1484:
   mov      16(%rbp), %rbx
.1472:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doRange
doRange:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       numErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   testb    $0x06, %bl
   jz       numErrEX
   push     %rbx
   pushq    $18
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   cmp      $Nil, %rbx
   jz       .1485
   testb    $0x06, %bl
   jz       numErrEX
   cmpq     $2, %rbx
   jz       argErrEX
   testb    $8, %bl
   jnz      argErrEX
   mov      %rbx, (%rsp)
.1485:
   push     %rbp
   mov      %rsp, %rbp
   call     cons_X
   mov      (%rsp), %rbp
   movq     %r13, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      32(%rbp), %r10
   mov      %r10, (%r13)
   movq     $Nil, 8(%r13)
   mov      32(%rbp), %rax
   mov      24(%rbp), %rbx
   call     cmpNumAE_F
   mov      32(%rbp), %rax
   ja       .1490
.1487:
   mov      16(%rbp), %rbx
   call     addAE_A
   push     %rax
   mov      24(%rbp), %rbx
   call     cmpNumAE_F
   ja       .1489
   pop      %rax
   call     consA_Y
   mov      %rax, (%r14)
   movq     $Nil, 8(%r14)
   mov      %r14, 8(%r13)
   mov      %r14, %r13
   jmp      .1487
.1490:
   mov      16(%rbp), %rbx
   call     subAE_A
   push     %rax
   mov      24(%rbp), %rbx
   call     cmpNumAE_F
   jc       .1489
   pop      %rax
   call     consA_Y
   mov      %rax, (%r14)
   movq     $Nil, 8(%r14)
   mov      %r14, 8(%r13)
   mov      %r14, %r13
   jmp      .1490
.1489:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFull
doFull:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1492:
   testb    $0x0E, %bl
   jnz      retT
   cmpq     $Nil, (%rbx)
   jz       retNil
   mov      8(%rbx), %rbx
   jmp      .1492

   .balign  16
   nop
   nop
   .globl  doMake
doMake:
   push     %r13
   mov      8(%rbx), %r13
   pushq    EnvMake
   pushq    EnvYoke
   push     %rbp
   mov      %rsp, %rbp
   pushq    $Nil
   mov      %rsp, EnvMake
   mov      %rsp, EnvYoke
   push     %rbp
   mov      %rsp, %rbp
1:
   mov      (%r13), %rbx
   test     $0x0E, %bl
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvYoke
   popq     EnvMake
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMade
doMade:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrX
   push     %r14
   mov      8(%rbx), %r14
   testb    $0x0E, %r14b
   jnz      .1493
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      EnvYoke, %r11
   mov      %rbx, (%r11)
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       .1494
   mov      EnvYoke, %r10
   mov      (%r10), %rbx
.1495:
   mov      8(%rbx), %rax
   testb    $0x0E, %al
   jnz      .1494
   mov      %rax, %rbx
   jmp      .1495
.1494:
   lea      8(%rbx), %rbx
   mov      %rbx, EnvMake
.1493:
   mov      EnvYoke, %r10
   mov      (%r10), %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doChain
doChain:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrX
   push     %r14
   mov      8(%rbx), %r14
.1497:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      EnvMake, %r11
   mov      %rbx, (%r11)
   testb    $0x0E, %bl
   jnz      .1498
   mov      %rbx, %rdx
.1499:
   mov      8(%rdx), %rax
   testb    $0x0E, %al
   jnz      .1500
   mov      %rax, %rdx
   jmp      .1499
.1500:
   lea      8(%rdx), %rdx
   mov      %rdx, EnvMake
.1498:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1497
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLink
doLink:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrX
   push     %r14
   mov      8(%rbx), %r14
.1501:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      EnvMake, %r11
   mov      %rdx, (%r11)
   lea      8(%rdx), %rdx
   mov      %rdx, EnvMake
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1501
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doYoke
doYoke:
   push     %r13
   mov      %rbx, %r13
   cmp      %r12, EnvMake
   jz       makeErrX
   push     %r14
   mov      8(%rbx), %r14
.1502:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     consE_A
   mov      %rbx, (%rax)
   mov      EnvYoke, %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rax)
   mov      EnvYoke, %r11
   mov      %rax, (%r11)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1502
.1503:
   mov      EnvMake, %r10
   mov      (%r10), %rdx
   testb    $0x0E, %dl
   jnz      .1504
   lea      8(%rdx), %rdx
   mov      %rdx, EnvMake
   jmp      .1503
.1504:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCopy
doCopy:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1505
   push     %r15
   mov      %rbx, %r15
   call     consE_C
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   mov      8(%rbx), %r10
   mov      %r10, 8(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1506:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1507
   cmp      %r15, %rbx
   jnz      .1508
   mov      8(%rbp), %r10
   mov      %r10, 8(%rdx)
   jmp      .1507
.1508:
   call     consE_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      8(%rbx), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1506
.1507:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
.1505:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doMix
doMix:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doMix_10
   testb    $0x0E, %bl
   jnz      .1509
doMix_10:
   push     %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1510
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r13), %rdx
   testb    $0x02, %dl
   jnz      .1511
   mov      %rdx, %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .1512
.1511:
   shr      $4, %rdx
   ja       .1515
   mov      $Nil, %rbx
   jmp      .1512
.1515:
   dec      %rdx
   jz       .1516
   mov      8(%rbx), %rbx
   jmp      .1515
.1516:
   mov      (%rbx), %rbx
.1512:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1517:
   mov      %rdx, %r14
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1518
   mov      (%r13), %rbx
   testb    $0x02, %bl
   jnz      .1519
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .1520
.1519:
   shr      $4, %rbx
   ja       .1521
   mov      $Nil, %rbx
   jmp      .1520
.1521:
   mov      16(%rbp), %rdx
.1523:
   dec      %rbx
   jz       .1524
   mov      8(%rdx), %rdx
   jmp      .1523
.1524:
   mov      (%rdx), %rbx
.1520:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r14)
   jmp      .1517
.1518:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .1525
.1510:
   mov      $Nil, %rbx
.1525:
   pop      %r14
.1509:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAppend
doAppend:
   push     %r13
   mov      8(%rbx), %r13
.1526:
   testb    $0x0E, 8(%r13)
   jnz      .1527
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1528
   mov      %rbx, %rax
   call     consE_E
   mov      (%rax), %r10
   mov      %r10, (%rbx)
   mov      8(%rax), %rdx
   mov      %rdx, 8(%rbx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1529:
   testb    $0x0E, %dl
   jnz      .1530
   call     consC_A
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   mov      8(%rdx), %rdx
   mov      %rdx, 8(%rax)
   mov      %rax, 8(%rbx)
   mov      %rax, %rbx
   jmp      .1529
.1530:
   push     %rbx
.1531:
   mov      8(%r13), %r13
   testb    $0x0E, 8(%r13)
   jnz      .1532
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1533:
   testb    $0x0E, %bl
   jnz      .1531
   call     consE_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      8(%rbx), %rbx
   mov      %rbx, 8(%rax)
   mov      (%rsp), %r11
   mov      %rax, 8(%r11)
   mov      %rax, (%rsp)
   jmp      .1533
.1532:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   mov      %rbx, 8(%rax)
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1528:
   mov      8(%r13), %r13
   jmp      .1526
.1527:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDelete
doDelete:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %bl
   jnz      .1535
   mov      %rbx, %r13
   mov      16(%rbp), %rax
   mov      (%r13), %rbx
   call     equalAE_F
   jnz      .1536
   mov      8(%r13), %rbx
   jmp      .1535
.1536:
   call     cons_C
   mov      (%r13), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1538:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1539
   mov      24(%rbp), %rax
   mov      (%r13), %rbx
   call     equalAE_F
   jnz      .1540
   mov      8(%r13), %r13
   jmp      .1539
.1540:
   call     cons_A
   mov      (%r13), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1538
.1539:
   mov      %r13, 8(%rdx)
   mov      8(%rbp), %rbx
.1535:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDelq
doDelq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x0E, %bl
   jnz      .1541
   mov      16(%rbp), %r13
   cmp      (%rbx), %r13
   jnz      .1542
   mov      8(%rbx), %rbx
   jmp      .1541
.1542:
   call     cons_C
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      (%rsp), %rbp
   movq     %rdx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1544:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1545
   cmp      (%rbx), %r13
   jnz      .1546
   mov      8(%rbx), %rbx
   jmp      .1545
.1546:
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%rdx)
   mov      %rax, %rdx
   jmp      .1544
.1545:
   mov      %rbx, 8(%rdx)
   mov      8(%rbp), %rbx
.1541:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doReplace
doReplace:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1547
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rbx, %r14
.1548:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1549
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1548
.1549:
   mov      %rbp, %r13
   lea      -8(%rsp), %rdx
   push     %rbp
   mov      %rsp, %rbp
   call     cons_Z
.1550:
   sub      $16, %r13
   cmp      %rdx, %r13
   jz       .1551
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1550
   mov      -8(%r13), %r10
   mov      %r10, (%r15)
   jmp      doReplace_10
.1551:
   mov      (%r14), %r10
   mov      %r10, (%r15)
doReplace_10:
   movq     $Nil, 8(%r15)
   mov      (%rsp), %rbp
   movq     %r15, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1553:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .1554
   mov      (%rbp), %r13
.1555:
   sub      $16, %r13
   cmp      %rdx, %r13
   jz       .1556
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1555
   call     cons_E
   mov      -8(%r13), %r10
   mov      %r10, (%rbx)
   jmp      doReplace_20
.1556:
   call     cons_E
   mov      (%r14), %r10
   mov      %r10, (%rbx)
doReplace_20:
   movq     $Nil, 8(%rbx)
   mov      %rbx, 8(%r15)
   mov      %rbx, %r15
   jmp      .1553
.1554:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
.1547:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doStrip
doStrip:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1558:
   testb    $0x0E, %bl
   jnz      .1559
   cmpq     $Quote, (%rbx)
   jnz      .1559
   mov      8(%rbx), %rax
   cmp      %rbx, %rax
   jz       .1559
   mov      %rax, %rbx
   jmp      .1558
.1559:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doSplit
doSplit:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1560
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.1561:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1562
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1561
.1562:
   lea      -8(%rbp), %rdx
   mov      $Nil, %r14
   push     %r14
   mov      %r14, %r15
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
.1563:
   lea      24(%rbp), %r13
.1564:
   cmp      %rdx, %r13
   jz       .1565
   mov      (%r13), %rax
   mov      (%rdx), %r10
   mov      (%r10), %rbx
   call     equalAE_F
   jnz      .1566
   testb    $0x0E, %r14b
   jz       .1567
   call     cons_Y
   mov      8(%rbp), %r10
   mov      %r10, (%r14)
   movq     $Nil, 8(%r14)
   mov      %r14, 16(%rbp)
   jmp      .1568
.1567:
   call     cons_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
.1568:
   mov      $Nil, %r15
   mov      %r15, 8(%rbp)
   jmp      doSplit_10
.1566:
   add      $8, %r13
   jmp      .1564
.1565:
   testb    $0x0E, %r15b
   jz       .1569
   call     cons_Z
   mov      (%rdx), %r10
   mov      (%r10), %r10
   mov      %r10, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
   jmp      doSplit_10
.1569:
   call     cons_A
   mov      (%rdx), %r10
   mov      (%r10), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
doSplit_10:
   mov      (%rdx), %r10
   mov      8(%r10), %rax
   mov      %rax, (%rdx)
   testb    $0x0E, %al
   jz       .1563
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   movq     $Nil, 8(%rbx)
   testb    $0x0E, %r14b
   jnz      .1571
   mov      %rbx, 8(%r14)
   mov      16(%rbp), %rbx
.1571:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
.1560:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doReverse
doReverse:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      $Nil, %rax
.1572:
   testb    $0x0E, %bl
   jnz      .1573
   call     consA_C
   mov      (%rbx), %r10
   mov      %r10, (%rdx)
   mov      %rax, 8(%rdx)
   mov      %rdx, %rax
   mov      8(%rbx), %rbx
   jmp      .1572
.1573:
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .globl  doFlip
doFlip:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1574
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1575
   mov      8(%rbx), %rdx
   testb    $0x0E, %dl
   jnz      .1574
   movq     $Nil, 8(%rbx)
.1577:
   mov      8(%rdx), %rax
   mov      %rbx, 8(%rdx)
   mov      %rdx, %rbx
   testb    $0x0E, %al
   jnz      .1574
   mov      %rax, %rdx
   jmp      .1577
.1575:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     evCntXY_FE
   mov      8(%rbp), %rdx
   mov      (%rbp), %rsp
   pop      %rbp
   mov      8(%rdx), %r13
   testb    $0x0E, %r13b
   jnz      .1580
   sub      $1, %rbx
   jle      .1580
   mov      8(%r13), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 8(%r13)
.1582:
   dec      %rbx
   jz       .1583
   mov      8(%rdx), %rax
   testb    $0x0E, %al
   jnz      .1583
   mov      8(%rax), %r10
   mov      %r10, 8(%rdx)
   mov      %r13, 8(%rax)
   mov      %rax, %r13
   jmp      .1582
.1583:
   mov      %r13, %rdx
.1580:
   mov      %rdx, %rbx
.1574:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doTrim
doTrim:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     trimE_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .globl  trimE_E
trimE_E:
   testb    $0x0E, %bl
   jnz      .1584
   pushq    (%rbx)
   mov      8(%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     trimE_E
   cmp      $Nil, %rbx
   jnz      .1585
   mov      (%rsp), %rbx
   call     isBlankE_F
   jnz      .1586
   pop      %rax
   mov      $Nil, %rbx
   ret
.1586:
   call     cons_E
   popq     (%rbx)
   movq     $Nil, 8(%rbx)
   ret
.1585:
   mov      %rbx, %rax
   call     consE_E
   popq     (%rbx)
   mov      %rax, 8(%rbx)
.1584:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doClip
doClip:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1587:
   testb    $0x0E, %bl
   jnz      ret
   push     %rbx
   mov      (%rbx), %rbx
   call     isBlankE_F
   pop      %rbx
   jnz      .1588
   mov      8(%rbx), %rbx
   jmp      .1587
.1588:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     trimE_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .globl  doHead
doHead:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1589
   testb    $0x0E, %bl
   jnz      .1590
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1591
   mov      %rbx, %r13
   mov      8(%rbp), %r14
.1592:
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1591
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1594
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.1594:
   mov      8(%r13), %r13
   jmp      .1592
.1591:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      doHead_10
.1590:
   call     xCntEX_FE
   jz       doHead_10
   mov      %rbx, %r13
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1589
   cmp      %r12, %r13
   jns      .1597
   mov      %rbx, %r14
.1598:
   inc      %r13
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1598
   cmp      %r12, %r13
   jle      doHead_10
.1597:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     cons_Y
   mov      (%rbx), %r10
   mov      %r10, (%r14)
   movq     $Nil, 8(%r14)
   mov      (%rsp), %rbp
   movq     %r14, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
.1599:
   dec      %r13
   jz       .1600
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1600
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   jmp      .1599
.1600:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .1589
doHead_10:
   mov      $Nil, %rbx
.1589:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doTail
doTail:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   mov      8(%r14), %r14
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .1602
   testb    $0x0E, %bl
   jnz      .1603
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1604
   mov      %rbx, %r13
   mov      8(%rbp), %r14
.1605:
   mov      %r13, %rax
   mov      %r14, %rbx
   call     equalAE_F
   jnz      .1606
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.1606:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .1605
.1604:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      doTail_10
.1603:
   call     xCntEX_FE
   jz       doTail_10
   mov      %rbx, %r13
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1602
   cmp      %r12, %r13
   jns      .1609
.1610:
   mov      8(%rbx), %rbx
   inc      %r13
   jnz      .1610
   jmp      .1602
.1609:
   mov      8(%rbx), %r14
.1612:
   dec      %r13
   jz       .1614
   testb    $0x0E, %r14b
   jnz      .1614
   mov      8(%r14), %r14
   jmp      .1612
.1614:
   testb    $0x0E, %r14b
   jnz      .1602
   mov      8(%rbx), %rbx
   mov      8(%r14), %r14
   jmp      .1614
doTail_10:
   mov      $Nil, %rbx
.1602:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doStem
doStem:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
.1617:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1618
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   jmp      .1617
.1618:
   lea      -8(%rbp), %rdx
   push     %rbp
   mov      %rsp, %rbp
   mov      (%rdx), %r14
.1619:
   testb    $0x0E, %r14b
   jnz      .1620
   lea      8(%rbp), %r13
.1621:
   cmp      %rdx, %r13
   jz       .1622
   mov      (%r13), %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1623
   mov      8(%r14), %r10
   mov      %r10, (%rdx)
   jmp      .1622
.1623:
   add      $8, %r13
   jmp      .1621
.1622:
   mov      8(%r14), %r14
   jmp      .1619
.1620:
   mov      (%rdx), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFin
doFin:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.1624:
   testb    $0x0E, %bl
   jnz      .1625
   mov      8(%rbx), %rbx
   jmp      .1624
.1625:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doLast
doLast:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1626
.1627:
   testb    $0x0E, 8(%rbx)
   jnz      .1628
   mov      8(%rbx), %rbx
   jmp      .1627
.1628:
   mov      (%rbx), %rbx
.1626:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doEq
doEq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1629:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1630
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      8(%rbp), %rbx
   jz       .1629
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1630:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doNEq
doNEq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1632:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1633
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      8(%rbp), %rbx
   jz       .1632
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret
.1633:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doEqual
doEqual:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1635:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1636
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   call     equalAE_F
   jz       .1635
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1636:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doNEqual
doNEqual:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1638:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1639
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   call     equalAE_F
   jz       .1638
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret
.1639:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doEq0
doEq0:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $2, %rbx
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doEqT
doEqT:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doNEq0
doNEq0:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $2, %rbx
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doNEqT
doNEqT:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doLt
doLt:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1641:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1642
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   jc       .1641
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1642:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLe
doLe:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1644:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1645
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   jbe      .1644
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1645:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doGt
doGt:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1647:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1648
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   ja       .1647
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1648:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doGe
doGe:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1650:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1651
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, 8(%rbp)
   call     compareAE_F
   jnc      .1650
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $Nil, %rbx
   pop      %r13
   ret
.1651:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMax
doMax:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1653:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1654
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, %r14
   call     compareAE_F
   jnc      .1653
   mov      %r14, 8(%rbp)
   jmp      .1653
.1654:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMin
doMin:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.1656:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .1657
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      %rbx, %r14
   call     compareAE_F
   jbe      .1656
   mov      %r14, 8(%rbp)
   jmp      .1656
.1657:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAtom
doAtom:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doPair
doPair:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doLstQ
doLstQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       retT
   cmp      $Nil, %rbx
   jz       retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doNumQ
doNumQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doSymQ
doSymQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jnz      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doFlgQ
doFlgQ:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       retT
   cmp      $TSym, %rbx
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doMember
doMember:
   push     %r13
   push     %r14
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   mov      %rbx, %r14
   call     memberXY_FY
   mov      %r14, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMemq
doMemq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   mov      %rbx, %rdx
.1659:
   testb    $0x0E, %bl
   jnz      .1660
   cmp      (%rbx), %rax
   jz       ret
   mov      8(%rbx), %rbx
   cmp      %rbx, %rdx
   jz       retNil
   jmp      .1659
.1660:
   cmp      %rbx, %rax
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doMmeq
doMmeq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   mov      %rbx, %rdx
.1661:
   testb    $0x0E, %r13b
   jnz      doMmeq_10
   mov      (%r13), %rax
.1663:
   testb    $0x0E, %bl
   jnz      .1664
   cmp      (%rbx), %rax
   jz       doMmeq_20
   mov      8(%rbx), %rbx
   cmp      %rbx, %rdx
   jz       doMmeq_10
   jmp      .1663
.1664:
   cmp      %rbx, %rax
   jz       doMmeq_20
   mov      8(%r13), %r13
   mov      %rdx, %rbx
   jmp      .1661
doMmeq_10:
   mov      $Nil, %rbx
doMmeq_20:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSect
doSect:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      %r12, %r15
   mov      24(%rbp), %r13
.1665:
   testb    $0x0E, %r13b
   jnz      .1666
   mov      (%r13), %r13
   mov      16(%rbp), %r14
   call     memberXY_FY
   jnz      .1667
   cmp      %r12, %r15
   jnz      .1668
   call     cons_Z
   mov      %r13, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
   jmp      .1667
.1668:
   call     cons_A
   mov      %r13, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
.1667:
   mov      24(%rbp), %r10
   mov      8(%r10), %r13
   mov      %r13, 24(%rbp)
   jmp      .1665
.1666:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDiff
doDiff:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      %r12, %r15
   mov      24(%rbp), %r13
.1670:
   testb    $0x0E, %r13b
   jnz      .1671
   mov      (%r13), %r13
   mov      16(%rbp), %r14
   call     memberXY_FY
   jz       .1672
   cmp      %r12, %r15
   jnz      .1673
   call     cons_Z
   mov      %r13, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
   jmp      .1672
.1673:
   call     cons_A
   mov      %r13, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
.1672:
   mov      24(%rbp), %r10
   mov      8(%r10), %r13
   mov      %r13, 24(%rbp)
   jmp      .1670
.1671:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doIndex
doIndex:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   mov      %rbx, %r14
   mov      %r14, %r15
   mov      $1, %rdx
.1675:
   testb    $0x0E, %r14b
   jnz      .1676
   mov      %r13, %rax
   mov      (%r14), %rbx
   call     equalAE_F
   jnz      .1677
   mov      %rdx, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      doIndex_90
.1677:
   inc      %rdx
   mov      8(%r14), %r14
   cmp      %r14, %r15
   jnz      .1675
.1676:
   mov      $Nil, %rbx
doIndex_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOffset
doOffset:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %r12, %rdx
   mov      8(%rbp), %r13
.1678:
   testb    $0x0E, %bl
   jnz      .1679
   inc      %rdx
   mov      %r13, %rax
   push     %rbx
   call     equalAE_F
   jnz      .1680
   mov      %rdx, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1680:
   pop      %rbx
   mov      8(%rbx), %rbx
   jmp      .1678
.1679:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLength
doLength:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .1681
   mov      $-2, %rax
   jmp      fmtNum0AE_E
.1681:
   testb    $0x08, %bl
   jnz      .1682
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      $18, %rbx
.1683:
   cmp      $Quote, %r13
   jnz      .1684
   mov      8(%r13), %r14
   cmp      %r13, %r14
   jz       lengthT
   mov      %r14, %r13
   testb    $0x0E, %r13b
   jnz      doLength_10
   add      $16, %rbx
   jmp      .1683
.1684:
   mov      %r13, %r14
.1685:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      doLength_10
   cmp      %r14, %r13
   jz       lengthT
   add      $16, %rbx
   jmp      .1685
doLength_10:
   pop      %r14
   pop      %r13
   ret
.1682:
   cmp      $Nil, %rbx
   jnz      .1687
   mov      $2, %rbx
   ret
.1687:
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
   mov      $2, %rbx
.1688:
   call     symCharCX_FACX
   jz       .1689
   add      $16, %rbx
   jmp      .1688
.1689:
   pop      %r13
   ret
lengthT:
   mov      $TSym, %rbx
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSize
doSize:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .1690
   testb    $0x02, %bl
   jz       .1691
   mov      $18, %rdx
   shr      $3, %rbx
.1692:
   shr      $8, %rbx
   jz       .1699
   add      $16, %rdx
   jmp      .1692
.1691:
   mov      $130, %rdx
.1695:
   mov      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .1696
   add      $128, %rdx
   jmp      .1695
.1696:
   shr      $4, %rbx
   shl      $1, %rax
   adc      %rbx, %rbx
   jz       .1699
.1698:
   add      $16, %rdx
   shr      $8, %rbx
   jnz      .1698
   jmp      .1699
.1690:
   testb    $0x08, %bl
   jnz      .1700
   mov      $2, %rdx
   call     sizeCE_C
   jmp      .1699
.1700:
   cmp      $Nil, %rbx
   jnz      .1702
   mov      $2, %rdx
   jmp      .1699
.1702:
   testb    $0x08, -8(%rbx)
   jz       .1704
   push     %r15
   call     dbFetchEX
   mov      (%rbx), %r13
   call     dbSizeX_A
   add      $7, %rax
   mov      %rax, %r15
   mov      -8(%rbx), %rbx
   andb     $~8, %bl
.1705:
   testb    $0x0E, %bl
   jnz      .1706
   mov      (%rbx), %r13
   mov      8(%rbx), %rbx
   testb    $0x0E, %r13b
   jz       .1707
   call     dbSizeX_A
   add      %rax, %r15
   add      $2, %r15
   jmp      .1705
.1707:
   pushq    (%r13)
   mov      8(%r13), %r13
   call     dbSizeX_A
   add      %rax, %r15
   pop      %r13
   call     dbSizeX_A
   add      %rax, %r15
   jmp      .1705
.1706:
   mov      %r15, %rdx
   shl      $4, %rdx
   orb      $2, %dl
   pop      %r15
   jmp      .1699
.1704:
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmpq     $2, %rbx
   jnz      .1710
   mov      $2, %rdx
   jmp      .1699
.1710:
   testb    $0x02, %bl
   jz       .1712
   mov      $18, %rdx
   shr      $4, %rbx
.1713:
   shr      $8, %rbx
   jz       .1699
   add      $16, %rdx
   jmp      .1713
.1712:
   mov      $130, %rdx
.1716:
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .1717
   add      $128, %rdx
   jmp      .1716
.1717:
   shr      $4, %rbx
   jz       .1699
.1719:
   add      $16, %rdx
   shr      $8, %rbx
   jnz      .1719
.1699:
   mov      %rdx, %rbx
   pop      %r13
   ret

   .balign  16
   .globl  sizeCE_C
sizeCE_C:
   add      $16, %rdx
.1720:
   cmpq     $Quote, (%rbx)
   jnz      .1721
   cmp      8(%rbx), %rbx
   jz       ret
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      ret
   add      $16, %rdx
   jmp      .1720
.1721:
   push     %r13
   mov      %rbx, %r13
.1722:
   testb    $0x0E, (%rbx)
   jnz      .1723
   push     %rbx
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     sizeCE_C
   pop      %rbx
.1723:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .1724
   cmp      %r13, %rbx
   jz       .1724
   add      $16, %rdx
   jmp      .1722
.1724:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAssoc
doAssoc:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r13
.1725:
   testb    $0x0E, %r13b
   jnz      .1726
   testb    $0x0E, (%r13)
   jnz      .1727
   mov      8(%rbp), %rax
   mov      (%r13), %r10
   mov      (%r10), %rbx
   call     equalAE_F
   jz       .1728
.1727:
   mov      8(%r13), %r13
   jmp      .1725
.1726:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1728:
   mov      (%r13), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAsoq
doAsoq:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
.1730:
   testb    $0x0E, %bl
   jnz      retNil
   mov      (%rbx), %rdx
   testb    $0x0E, %dl
   jnz      .1731
   cmp      (%rdx), %rax
   jz       .1732
.1731:
   mov      8(%rbx), %rbx
   jmp      .1730
.1732:
   mov      %rdx, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doRank
doRank:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%rbp), %r13
   testb    $0x0E, %r13b
   jnz      doRank_10
   mov      %r12, %r15
   mov      %r13, %r14
.1734:
   inc      %r15
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .1734
   mov      (%r13), %r10
   mov      (%r10), %rax
   cmp      $Nil, %rbx
   jnz      .1735
   mov      16(%rbp), %rbx
   call     compareAE_F
   ja       doRank_10
.1736:
   mov      %r15, %rdx
   shr      $1, %rdx
   jz       .1741
   mov      %r13, %r14
.1738:
   mov      8(%r14), %r14
   dec      %rdx
   jnz      .1738
   mov      (%r14), %r10
   mov      (%r10), %rax
   mov      16(%rbp), %rbx
   call     compareAE_F
   jbe      .1739
   mov      %r13, %r14
   shr      $1, %r15
   jmp      .1736
.1739:
   mov      %r14, %r13
   mov      %r15, %rdx
   shr      $1, %rdx
   sub      %rdx, %r15
   jmp      .1736
.1735:
   mov      16(%rbp), %rbx
   call     compareAE_F
   jc       doRank_10
.1742:
   mov      %r15, %rdx
   shr      $1, %rdx
   jz       .1741
   mov      %r13, %r14
.1744:
   mov      8(%r14), %r14
   dec      %rdx
   jnz      .1744
   mov      (%r14), %r10
   mov      (%r10), %rax
   mov      16(%rbp), %rbx
   call     compareAE_F
   jnc      .1745
   mov      %r13, %r14
   shr      $1, %r15
   jmp      .1742
.1745:
   mov      %r14, %r13
   mov      %r15, %rdx
   shr      $1, %rdx
   sub      %rdx, %r15
   jmp      .1742
.1741:
   mov      (%r13), %rbx
   jmp      .1747
doRank_10:
   mov      $Nil, %rbx
.1747:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMatch
doMatch:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %rdx
   call     matchCE_F
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
matchCE_F:
   testb    $0x0E, %dl
   jz       .1749
   testb    $0x06, %dl
   jnz      .1750
   mov      -8(%rdx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1750
   mov      %rbx, (%rdx)
   ret
.1750:
   mov      %rdx, %rax
   jmp      equalAE_F
.1749:
   mov      (%rdx), %r13
   testb    $0x06, %r13b
   jnz      .1752
   testb    $0x08, %r13b
   jz       .1752
   mov      -8(%r13), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1752
   testb    $0x0E, %bl
   jz       .1755
   mov      8(%rdx), %rax
   call     equalAE_F
   jnz      ret
   movq     $Nil, (%r13)
   ret
.1755:
   push     %rdx
   push     %rbx
   mov      8(%rdx), %rdx
   mov      8(%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      .1756
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   movq     $Nil, 8(%rax)
   mov      (%rdx), %r11
   mov      %rax, (%r11)
   jmp      retz
.1756:
   push     %rdx
   push     %rbx
   mov      8(%rdx), %rdx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      .1757
   mov      (%rdx), %r11
   movq     $Nil, (%r11)
   ret
.1757:
   push     %rdx
   push     %rbx
   mov      8(%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      .1752
   mov      (%rdx), %r13
   call     cons_A
   mov      (%rbx), %r10
   mov      %r10, (%rax)
   mov      (%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r13)
   jmp      retz
.1752:
   testb    $0x0E, %bl
   jnz      ret
   pushq    8(%rdx)
   pushq    8(%rbx)
   mov      (%rdx), %rdx
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     matchCE_F
   pop      %rbx
   pop      %rdx
   jnz      ret
   jmp      matchCE_F

   .balign  16
   nop
   nop
   .globl  doFill
doFill:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %r13
   mov      16(%rbp), %rbx
   call     fillE_FE
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
fillE_FE:
   testb    $0x06, %bl
   jnz      ret
   testb    $0x08, %bl
   jz       .1759
   cmp      $Nil, %r13
   jnz      .1760
   cmp      $At, %rbx
   jz       retnz
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1761
   mov      (%rbx), %rbx
.1761:
   rep
   ret
.1760:
   mov      %r13, %rdx
.1762:
   testb    $0x0E, %dl
   jnz      .1763
   cmp      (%rdx), %rbx
   jnz      .1764
   mov      (%rbx), %rbx
   ret
.1764:
   mov      8(%rdx), %rdx
   jmp      .1762
.1763:
   cmp      %rdx, %rbx
   jnz      .1765
   mov      (%rbx), %rbx
.1765:
   rep
   ret
.1759:
   push     %rbx
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     fillE_FE
   jnz      .1766
   pop      %rdx
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%rdx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     fillE_FE
   call     consE_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   or       %r12, %r12
   ret
.1766:
   mov      (%rsp), %r10
   mov      8(%r10), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     fillE_FE
   jnz      .1767
   call     consE_A
   pop      %rdx
   mov      (%rdx), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   or       %r12, %r12
   ret
.1767:
   pop      %rbx
   ret

   .balign  16
   .globl  unifyCEYZ_F
unifyCEYZ_F:
unifyCEYZ_F_10:
   testb    $0x06, %r14b
   jnz      unifyCEYZ_F_20
   testb    $0x08, %r14b
   jz       unifyCEYZ_F_20
   mov      -8(%r14), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      unifyCEYZ_F_20
   mov      Penv, %r10
   mov      (%r10), %r13
.1771:
   mov      (%r13), %rax
   testb    $0x0E, %al
   jnz      unifyCEYZ_F_20
   mov      (%rax), %rax
   cmp      (%rax), %rdx
   jnz      .1773
   cmp      8(%rax), %r14
   jnz      .1773
   mov      (%r13), %r10
   mov      8(%r10), %rax
   mov      (%rax), %rdx
   mov      8(%rax), %r14
   jmp      unifyCEYZ_F_10
.1773:
   mov      8(%r13), %r13
   jmp      .1771
unifyCEYZ_F_20:
   testb    $0x06, %r15b
   jnz      .1775
   testb    $0x08, %r15b
   jz       .1775
   mov      -8(%r15), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1775
   mov      Penv, %r10
   mov      (%r10), %r13
.1778:
   mov      (%r13), %rax
   testb    $0x0E, %al
   jnz      .1775
   mov      (%rax), %rax
   cmp      (%rax), %rbx
   jnz      .1780
   cmp      8(%rax), %r15
   jnz      .1780
   mov      (%r13), %r10
   mov      8(%r10), %rax
   mov      (%rax), %rbx
   mov      8(%rax), %r15
   jmp      unifyCEYZ_F_20
.1780:
   mov      8(%r13), %r13
   jmp      .1778
.1775:
   cmp      %rbx, %rdx
   jnz      .1782
   mov      %r14, %rax
   push     %rbx
   mov      %r15, %rbx
   call     equalAE_F
   pop      %rbx
   jz       ret
.1782:
   testb    $0x06, %r14b
   jnz      .1783
   testb    $0x08, %r14b
   jz       .1783
   mov      -8(%r14), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1783
   cmp      $At, %r14
   jz       .1786
   call     cons_A
   mov      %rdx, (%rax)
   mov      %r14, 8(%rax)
   call     consA_C
   mov      %rbx, (%rdx)
   mov      %r15, 8(%rdx)
   call     consAC_E
   mov      %rax, (%rbx)
   mov      %rdx, 8(%rbx)
   mov      Penv, %r13
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r13)
.1786:
   or       %r12, %r12
   ret
.1783:
   testb    $0x06, %r15b
   jnz      .1787
   testb    $0x08, %r15b
   jz       .1787
   mov      -8(%r15), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1787
   cmp      $At, %r15
   jz       .1790
   call     cons_A
   mov      %rdx, (%rax)
   mov      %r14, 8(%rax)
   call     consA_C
   mov      %rbx, (%rdx)
   mov      %r15, 8(%rdx)
   call     consAC_E
   mov      %rax, 8(%rbx)
   mov      %rdx, (%rbx)
   mov      Penv, %r13
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r13), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r13)
.1790:
   or       %r12, %r12
   ret
.1787:
   testb    $0x0E, %r14b
   jnz      .1791
   testb    $0x0E, %r15b
   jnz      .1791
   mov      Penv, %r10
   pushq    (%r10)
   push     %rdx
   push     %rbx
   push     %r14
   push     %r15
   mov      (%r14), %r14
   mov      (%r15), %r15
   cmp      StkLimit, %rsp
   jc       stkErr
   call     unifyCEYZ_F
   pop      %r15
   pop      %r14
   pop      %rbx
   pop      %rdx
   jnz      .1793
   mov      8(%r14), %r14
   mov      8(%r15), %r15
   cmp      StkLimit, %rsp
   jc       stkErr
   call     unifyCEYZ_F
   jnz      .1793
   pop      %rax
   ret
.1793:
   mov      Penv, %r11
   popq     (%r11)
   ret
.1791:
   mov      %r14, %rax
   mov      %r15, %rbx
   jmp      equalAE_F

   .balign  16
   nop
   nop
   .globl  doProve
doProve:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jz       .1795
   pop      %r13
   mov      $Nil, %rbx
   ret
.1795:
   push     %r14
   push     %r15
   pushq    Penv
   pushq    Pnl
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   push     %rbx
   mov      %rbx, %r15
   mov      8(%r13), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   mov      (%r15), %r10
   mov      (%r10), %r14
   push     %r14
   mov      %rsp, Penv
   mov      (%r15), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r15)
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      %rsp, Pnl
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    (%r14)
   mov      8(%r14), %r14
   pushq    $Nil
   push     %rbp
   mov      %rsp, %rbp
   mov      %r14, 56(%rbp)
.1796:
   testb    $0x0E, 24(%rbp)
   jz       doProve_10
   testb    $0x0E, 16(%rbp)
   jnz      .1797
doProve_10:
   testb    $0x0E, 32(%rbp)
   jnz      .1798
   mov      56(%rbp), %r10
   mov      %r10, 8(%rbp)
   mov      40(%rbp), %r10
   mov      (%r10), %rdx
   mov      24(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r14
   mov      48(%rbp), %rbx
   mov      32(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r15
   call     unifyCEYZ_F
   jz       .1799
   mov      32(%rbp), %r10
   mov      8(%r10), %r13
   mov      %r13, 32(%rbp)
   testb    $0x0E, %r13b
   jz       .1796
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r13
   mov      72(%rbp), %r11
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r11)
   mov      (%r13), %r10
   mov      %r10, 48(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 40(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 32(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 24(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 16(%rbp)
   mov      8(%r13), %r13
   mov      %r13, 56(%rbp)
   jmp      .1796
.1799:
   testb    $0x0E, 64(%rbp)
   jnz      .1802
   mov      24(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %rax
   mov      64(%rbp), %rbx
.1803:
   cmp      (%rbx), %rax
   jnz      .1804
   mov      $TSym, %rdx
   mov      24(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %rbx
   call     getEC_E
   mov      %rbx, %r13
   mov      %r12, %rdx
.1805:
   inc      %rdx
   mov      32(%rbp), %r10
   mov      (%r10), %rax
   mov      (%r13), %rbx
   mov      8(%r13), %r13
   call     equalAE_F
   jnz      .1805
   mov      %rdx, %rax
   call     outWordA
   call     space
   mov      24(%rbp), %r10
   mov      (%r10), %rbx
   call     uniFillE_E
   call     printE
   call     newline
   jmp      .1802
.1804:
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .1803
.1802:
   mov      32(%rbp), %r10
   testb    $0x0E, 8(%r10)
   jnz      .1807
   call     cons_A
   mov      16(%rbp), %r10
   mov      %r10, (%rax)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rax)
   call     consA_C
   mov      24(%rbp), %r10
   mov      %r10, (%rdx)
   mov      %rax, 8(%rdx)
   call     consC_A
   mov      32(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, (%rax)
   mov      %rdx, 8(%rax)
   call     consA_C
   mov      40(%rbp), %r10
   mov      %r10, (%rdx)
   mov      %rax, 8(%rdx)
   call     consC_A
   mov      48(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rdx, 8(%rax)
   call     consA_C
   mov      %rax, (%rdx)
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%rdx)
   mov      72(%rbp), %r11
   mov      %rdx, (%r11)
.1807:
   mov      48(%rbp), %rdx
   call     cons_A
   mov      %rdx, (%rax)
   mov      40(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 40(%rbp)
   add      $16, %rdx
   mov      %rdx, 48(%rbp)
   call     cons_A
   mov      24(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, (%rax)
   mov      16(%rbp), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 16(%rbp)
   mov      32(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, 24(%rbp)
   movq     $Nil, 32(%rbp)
   jmp      .1796
.1798:
   mov      24(%rbp), %r13
   testb    $0x0E, %r13b
   jz       .1808
   mov      16(%rbp), %rdx
   mov      (%rdx), %r10
   mov      %r10, 24(%rbp)
   mov      8(%rdx), %r10
   mov      %r10, 16(%rbp)
   mov      40(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, 40(%rbp)
   jmp      .1796
.1808:
   cmpq     $TSym, (%r13)
   jnz      .1809
.1810:
   mov      72(%rbp), %r10
   mov      (%r10), %rdx
   testb    $0x0E, %dl
   jnz      .1811
   mov      (%rdx), %r11
   mov      40(%rbp), %r10
   mov      (%r10), %r10
   cmp      %r10, (%r11)
   jc       .1811
   mov      72(%rbp), %r11
   mov      8(%rdx), %r10
   mov      %r10, (%r11)
   jmp      .1810
.1811:
   mov      8(%r13), %r10
   mov      %r10, 24(%rbp)
   jmp      .1796
.1809:
   mov      (%r13), %r10
   testb    $0x06, (%r10)
   jz       .1812
   mov      (%r13), %r10
   mov      8(%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   mov      (%r13), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   mov      40(%rbp), %rax
.1813:
   sub      $1, %rdx
   jle      .1814
   mov      8(%rax), %rax
   jmp      .1813
.1814:
   call     cons_C
   mov      (%rax), %r10
   mov      %r10, (%rdx)
   mov      40(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 40(%rbp)
   call     cons_C
   mov      8(%r13), %r10
   mov      %r10, (%rdx)
   mov      16(%rbp), %r10
   mov      %r10, 8(%rdx)
   mov      %rdx, 16(%rbp)
   mov      8(%rbp), %r10
   mov      %r10, 24(%rbp)
   jmp      .1796
.1812:
   mov      (%r13), %r10
   mov      (%r10), %rbx
   testb    $0x08, %bl
   jz       .1815
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1815
   mov      (%r13), %r10
   mov      8(%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   cmp      $Nil, %rbx
   jz       .1817
   mov      40(%rbp), %r10
   mov      (%r10), %rdx
   mov      (%r13), %r10
   mov      (%r10), %r14
   mov      %rdx, %rbx
   mov      8(%rbp), %r15
   call     unifyCEYZ_F
   jnz      .1817
   mov      24(%rbp), %r10
   mov      8(%r10), %r10
   mov      %r10, 24(%rbp)
   jmp      .1796
.1817:
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r13
   mov      72(%rbp), %r11
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r11)
   mov      (%r13), %r10
   mov      %r10, 48(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 40(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 32(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 24(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 16(%rbp)
   mov      8(%r13), %r13
   mov      %r13, 56(%rbp)
   jmp      .1796
.1815:
   mov      $TSym, %rdx
   call     getEC_E
   mov      %rbx, 32(%rbp)
   testb    $0x0E, %bl
   jz       .1796
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      (%r10), %r13
   mov      72(%rbp), %r11
   mov      72(%rbp), %r10
   mov      (%r10), %r10
   mov      8(%r10), %r10
   mov      %r10, (%r11)
   mov      (%r13), %r10
   mov      %r10, 48(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 40(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 32(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 24(%rbp)
   mov      8(%r13), %r13
   mov      (%r13), %r10
   mov      %r10, 16(%rbp)
   mov      8(%r13), %r13
   mov      %r13, 56(%rbp)
   jmp      .1796
.1797:
   movq     $Nil, 8(%rbp)
   mov      56(%rbp), %r13
.1820:
   testb    $0x0E, 8(%r13)
   jnz      .1821
   mov      (%r13), %r10
   mov      (%r10), %r14
   cmpq     $2, (%r14)
   jnz      .1822
   mov      $2, %rdx
   mov      8(%r14), %rbx
   call     lookupCE_E
   call     consE_A
   mov      8(%r14), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      %rbx, 8(%rbp)
.1822:
   mov      8(%r13), %r13
   jmp      .1820
.1821:
   mov      80(%rbp), %r10
   mov      %r10, At
   mov      8(%rbp), %rbx
   testb    $0x0E, %bl
   jz       .1823
   testb    $0x0E, 56(%rbp)
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
.1823:
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Pnl
   popq     Penv
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  lupCE_E
lupCE_E:
   testb    $0x06, %bl
   jnz      .1824
   testb    $0x08, %bl
   jz       .1824
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jnz      .1824
   mov      Penv, %r10
   mov      (%r10), %r15
.1827:
   mov      (%r15), %rax
   testb    $0x0E, %al
   jnz      .1824
   mov      (%rax), %rax
   cmp      (%rax), %rdx
   jnz      .1829
   cmp      8(%rax), %rbx
   jnz      .1829
   mov      (%r15), %r10
   mov      8(%r10), %rax
   mov      (%rax), %rdx
   mov      8(%rax), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   jmp      lupCE_E
.1829:
   mov      8(%r15), %r15
   jmp      .1827
.1824:
   testb    $0x0E, %bl
   jnz      .1831
   push     %rdx
   push     %rbx
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     lupCE_E
   pop      %rax
   pop      %rdx
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%rax), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     lupCE_E
   call     consE_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1831:
   rep
   ret

   .balign  16
   .globl  lookupCE_E
lookupCE_E:
   call     lupCE_E
   testb    $0x06, %bl
   jnz      .1832
   testb    $0x08, %bl
   jz       .1832
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $64, %al
   jz       retNil
.1832:
   rep
   ret

   .balign  16
   .globl  uniFillE_E
uniFillE_E:
   testb    $0x06, %bl
   jnz      .1834
   testb    $0x08, %bl
   jz       .1835
   mov      Pnl, %r10
   mov      (%r10), %r10
   mov      (%r10), %rdx
   jmp      lupCE_E
.1835:
   push     %rbx
   mov      (%rbx), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     uniFillE_E
   pop      %rax
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%rax), %rbx
   cmp      StkLimit, %rsp
   jc       stkErr
   call     uniFillE_E
   call     consE_A
   mov      8(%rbp), %r10
   mov      %r10, (%rax)
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.1834:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doArrow
doArrow:
   push     %r15
   mov      8(%rbx), %rbx
   mov      Pnl, %r10
   mov      (%r10), %rdx
   mov      8(%rbx), %rax
   testb    $0x06, (%rax)
   jz       .1836
   mov      (%rax), %rax
   shr      $4, %rax
.1837:
   sub      $1, %rax
   jle      .1836
   mov      8(%rdx), %rdx
   jmp      .1837
.1836:
   mov      (%rdx), %rdx
   mov      (%rbx), %rbx
   call     lookupCE_E
   pop      %r15
   ret

   .balign  16
   nop
   nop
   .globl  doUnify
doUnify:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      Pnl, %r10
   mov      (%r10), %rax
   mov      8(%rax), %r10
   mov      (%r10), %rdx
   mov      (%rax), %rbx
   mov      8(%rbp), %r14
   mov      %r14, %r15
   call     unifyCEYZ_F
   mov      $Nil, %rbx
   jnz      .1839
   mov      Penv, %r10
   mov      (%r10), %rbx
.1839:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSort
doSort:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x0E, %bl
   jnz      .1840
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   mov      $Nil, %rax
   cmp      $Nil, %rbx
   jnz      .1841
   mov      $cmpDfltA_F, %r15
   xchg     (%rsp), %rbx
   jmp      .1842
.1841:
   mov      $cmpUserAX_F, %r15
   xchg     (%rsp), %rbx
   push     %rax
   push     %rax
   push     %rax
.1842:
   push     %rbx
   push     %rax
   push     %rax
   push     %rax
   push     %rax
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rax
.1843:
   mov      48(%rbp), %r10
   mov      %r10, 32(%rbp)
   mov      56(%rbp), %r10
   mov      %r10, 40(%rbp)
   lea      32(%rbp), %r14
   testb    $0x0E, 40(%rbp)
   jnz      .1844
   mov      %r14, %rax
   call     *%r15
   jc       .1844
   lea      40(%rbp), %r14
.1844:
   mov      (%r14), %rax
   mov      %rax, 8(%rbp)
   testb    $0x0E, %al
   jnz      .1846
   mov      8(%rax), %r10
   mov      %r10, (%r14)
.1846:
   mov      %rax, 48(%rbp)
   lea      8(%rax), %r10
   mov      %r10, -16(%rbp)
   mov      48(%rbp), %r10
   mov      %r10, 24(%rbp)
   movq     $Nil, 8(%rax)
   movq     $Nil, 56(%rbp)
   lea      56(%rbp), %r10
   mov      %r10, -8(%rbp)
.1847:
   testb    $0x0E, 40(%rbp)
   jz       .1848
   testb    $0x0E, 32(%rbp)
   jnz      .1849
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   testb    $0x0E, %r14b
   jnz      .1850
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
.1850:
   mov      %r14, 16(%rbp)
   lea      16(%rbp), %rax
   call     *%r15
   jnc      .1852
   mov      -8(%rbp), %r10
   xchg     %r10, -16(%rbp)
   mov      %r10, -8(%rbp)
   jmp      .1852
.1848:
   testb    $0x0E, 32(%rbp)
   jz       .1853
   testb    $0x0E, 40(%rbp)
   jnz      .1849
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      %r14, 16(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
   lea      16(%rbp), %rax
   call     *%r15
   jnc      .1852
   mov      -8(%rbp), %r10
   xchg     %r10, -16(%rbp)
   mov      %r10, -8(%rbp)
   jmp      .1852
.1853:
   lea      16(%rbp), %rax
   mov      32(%rbp), %r10
   mov      %r10, (%rax)
   call     *%r15
   jnc      .1856
   lea      16(%rbp), %rax
   mov      40(%rbp), %r10
   mov      %r10, (%rax)
   call     *%r15
   jc       .1857
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
   jmp      .1852
.1857:
   lea      32(%rbp), %rax
   call     *%r15
   jnc      .1859
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
   jmp      .1860
.1859:
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
.1860:
   mov      -8(%rbp), %r10
   xchg     %r10, -16(%rbp)
   mov      %r10, -8(%rbp)
   jmp      .1852
.1856:
   lea      16(%rbp), %rax
   mov      40(%rbp), %r10
   mov      %r10, (%rax)
   call     *%r15
   jnc      .1862
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
   jmp      .1852
.1862:
   lea      32(%rbp), %rax
   call     *%r15
   jnc      .1864
   mov      32(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 32(%rbp)
   jmp      .1852
.1864:
   mov      40(%rbp), %r14
   mov      %r14, 8(%rbp)
   mov      8(%r14), %r10
   mov      %r10, 40(%rbp)
.1852:
   mov      -16(%rbp), %r11
   mov      %r14, (%r11)
   lea      8(%r14), %r10
   mov      %r10, -16(%rbp)
   movq     $Nil, 8(%r14)
   mov      %r14, 24(%rbp)
   jmp      .1847
.1849:
   testb    $0x0E, 56(%rbp)
   jz       .1843
   mov      48(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
.1840:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  cmpDfltA_F
cmpDfltA_F:
   mov      8(%rax), %r10
   mov      (%r10), %rbx
   mov      (%rax), %r10
   mov      (%r10), %rax
   jmp      compareAE_F

   .balign  16
   .globl  cmpUserAX_F
cmpUserAX_F:
   push     %r14
   push     %r15
   lea      64(%rbp), %r15
   mov      8(%rax), %r10
   mov      (%r10), %r10
   mov      %r10, (%r15)
   mov      (%rax), %r10
   mov      (%r10), %r10
   mov      %r10, 8(%r15)
   lea      16(%r15), %r14
   call     applyXYZ_E
   cmp      $Nil, %rbx
   jz       .1866
   stc
.1866:
   pop      %r15
   pop      %r14
   ret

   .balign  16
   .globl  zapZeroA_A
zapZeroA_A:
   push     %rax
   mov      %rsp, %rdx
   mov      %rdx, %rbx
.1867:
   testb    $0x02, 4(%rax)
   jnz      .1868
   cmp      %r12, -4(%rax)
   jz       .1869
   mov      %rdx, %rbx
.1869:
   lea      4(%rax), %rdx
   mov      (%rdx), %rax
   jmp      .1867
.1868:
   cmpq     $2, 4(%rax)
   jnz      .1870
   mov      -4(%rax), %rax
   cmp      %r12, %rax
   jz       .1871
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1870
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rdx)
   jmp      .1870
.1871:
   mov      (%rbx), %r10
   mov      -4(%r10), %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jz       .1874
   movq     $2, (%rdx)
   jmp      .1870
.1874:
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rbx)
.1870:
   pop      %rax
   ret

   .balign  16
   .globl  twiceA_A
twiceA_A:
   testb    $0x02, %al
   jz       .1876
   xorb     $3, %al
   shl      $1, %rax
   jnc      Ret
   rcr      $1, %rax
   shr      $3, %rax
   jmp      boxNumA_A
.1876:
   push     %rax
   mov      -4(%rax), %rdx
   shl      $1, %rdx
.1877:
   pushf
   mov      %rdx, -4(%rax)
   mov      4(%rax), %rbx
   testb    $0x02, %bl
   jnz      .1878
   mov      %rbx, %rax
   mov      -4(%rax), %rdx
   popf
   rcl      $1, %rdx
   jmp      .1877
.1878:
   shr      $4, %rbx
   popf
   rcl      $1, %rbx
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .1879
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .1880
.1879:
   call     boxNumE_E
.1880:
   mov      %rbx, 4(%rax)
   pop      %rax
   ret

   .balign  16
   .globl  halfA_A
halfA_A:
   testb    $0x02, %al
   jz       .1881
   shr      $1, %rax
   andb     $~9, %al
   orb      $2, %al
   ret
.1881:
   mov      -4(%rax), %rdx
   mov      4(%rax), %rbx
   testb    $0x02, %bl
   jz       .1882
   shr      $5, %rbx
   jz       .1883
   rcr      $1, %rdx
   jmp      .1884
.1883:
   rcr      $1, %rdx
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      .1884
   shl      $4, %rdx
   orb      $2, %dl
   mov      %rdx, %rax
   ret
.1884:
   mov      %rdx, -4(%rax)
   shl      $4, %rbx
   orb      $2, %bl
   mov      %rbx, 4(%rax)
   ret
.1882:
   push     %rax
.1886:
   testb    $1, -4(%rbx)
   jz       .1887
   stc
.1887:
   rcr      $1, %rdx
   mov      %rdx, -4(%rax)
   mov      4(%rbx), %rdx
   testb    $0x02, %dl
   jnz      .1888
   mov      %rbx, %rax
   mov      %rdx, %rbx
   mov      -4(%rax), %rdx
   jmp      .1886
.1888:
   shr      $5, %rdx
   jz       .1889
   rcrq     $1, -4(%rbx)
   shl      $4, %rdx
   orb      $2, %dl
   jmp      .1890
.1889:
   mov      -4(%rbx), %rdx
   rcr      $1, %rdx
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      .1891
   shl      $4, %rdx
   orb      $2, %dl
   mov      %rdx, 4(%rax)
   pop      %rax
   ret
.1891:
   mov      %rdx, -4(%rbx)
   mov      $2, %rdx
.1890:
   mov      %rdx, 4(%rbx)
   pop      %rax
   ret

   .balign  16
   .globl  tenfoldA_A
tenfoldA_A:
   testb    $0x02, %al
   jz       .1892
   shr      $4, %rax
   mov      $10, %r10
   mul      %r10
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      boxNumA_A
   shl      $4, %rax
   orb      $2, %al
   ret
.1892:
   push     %r13
   push     %rax
   mov      %rax, %r13
   mov      -4(%r13), %rax
   mov      $10, %r10
   mul      %r10
.1893:
   mov      %rax, -4(%r13)
   mov      %rdx, %rbx
   mov      4(%r13), %rax
   testb    $0x02, %al
   jnz      .1894
   mov      %rax, %r13
   mov      -4(%r13), %rax
   mov      $10, %r10
   mul      %r10
   add      %rbx, %rax
   adc      %r12, %rdx
   jmp      .1893
.1894:
   shr      $4, %rax
   mov      $10, %r10
   mul      %r10
   add      %rbx, %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1895
   shl      $4, %rax
   orb      $2, %al
   jmp      .1896
.1895:
   call     boxNumA_A
.1896:
   mov      %rax, 4(%r13)
   pop      %rax
   pop      %r13
   ret

   .balign  16
   .globl  shluA_A
shluA_A:
   testb    $0x02, %al
   jz       .1897
   xorb     $3, %al
   shl      $1, %rax
   jnc      Ret
   rcr      $1, %rax
   shr      $3, %rax
   jmp      boxNumA_A
.1897:
   call     boxNum_E
   mov      -4(%rax), %r10
   mov      %r10, -4(%rbx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   shlq     $1, -4(%rbx)
   pushf
.1898:
   mov      4(%rax), %rax
   testb    $0x02, %al
   jnz      .1899
   call     boxNum_C
   mov      %rdx, 4(%rbx)
   mov      -4(%rax), %rbx
   popf
   rcl      $1, %rbx
   pushf
   mov      %rbx, -4(%rdx)
   mov      %rdx, %rbx
   jmp      .1898
.1899:
   shr      $4, %rax
   popf
   rcl      $1, %rax
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1900
   shl      $4, %rax
   orb      $2, %al
   jmp      .1901
.1900:
   call     boxNumA_A
.1901:
   mov      %rax, 4(%rbx)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .globl  shruA_A
shruA_A:
   testb    $0x02, %al
   jz       .1902
   shr      $1, %rax
   andb     $~9, %al
   orb      $2, %al
   ret
.1902:
   mov      4(%rax), %rbx
   testb    $0x02, %bl
   jz       .1903
   mov      -4(%rax), %rdx
   shr      $5, %rbx
   jz       .1904
   rcr      $1, %rdx
   jmp      .1905
.1904:
   rcr      $1, %rdx
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      .1905
   shl      $4, %rdx
   orb      $2, %dl
   mov      %rdx, %rax
   ret
.1905:
   shl      $4, %rbx
   orb      $2, %bl
   jmp      consNumCE_A
.1903:
   call     boxNum_C
   mov      -4(%rax), %r10
   mov      %r10, -4(%rdx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbp
   mov      %rsp, %rbp
.1907:
   testb    $1, -4(%rbx)
   jz       .1908
   stc
.1908:
   rcrq     $1, -4(%rdx)
   testb    $0x02, 4(%rbx)
   jnz      .1909
   call     boxNum_A
   mov      -4(%rbx), %r10
   mov      %r10, -4(%rax)
   mov      %rax, 4(%rdx)
   mov      4(%rbx), %rbx
   mov      %rax, %rdx
   jmp      .1907
.1909:
   mov      4(%rbx), %rax
   shr      $5, %rax
   jz       .1910
   mov      -4(%rbx), %rbx
   rcr      $1, %rbx
   shl      $4, %rax
   orb      $2, %al
   call     consNumEA_E
   mov      %rbx, 4(%rdx)
   jmp      .1911
.1910:
   mov      -4(%rbx), %rbx
   rcr      $1, %rbx
   mov      $17293822569102704640, %r10
   test     %r10, %rbx
   jnz      .1912
   shl      $4, %rbx
   orb      $2, %bl
   mov      %rbx, 4(%rdx)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1912:
   call     boxNum_A
   mov      %rbx, -4(%rax)
   mov      %rax, 4(%rdx)
.1911:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .globl  anduAE_A
anduAE_A:
   testb    $0x02, %al
   jz       .1913
   testb    $0x02, %bl
   jnz      .1914
   mov      -4(%rbx), %rbx
   shl      $4, %rbx
   orb      $2, %bl
.1914:
   and      %rbx, %rax
   ret
.1913:
   testb    $0x02, %bl
   jz       .1915
   mov      -4(%rax), %rax
   shl      $4, %rax
   orb      $2, %al
   and      %rbx, %rax
   ret
.1915:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   and      -4(%rbx), %rdx
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1916:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1917
   testb    $0x02, %bl
   jnz      .1918
   mov      -4(%rbx), %rbx
   shl      $4, %rbx
   orb      $2, %bl
.1918:
   and      %rbx, %rax
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1917:
   testb    $0x02, %bl
   jz       .1919
   mov      -4(%rax), %rax
   shl      $4, %rax
   orb      $2, %al
   and      %rbx, %rax
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1919:
   mov      -4(%rax), %rdx
   and      -4(%rbx), %rdx
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1916

   .balign  16
   .globl  oruAE_A
oruAE_A:
   testb    $0x02, %al
   jz       .1920
   testb    $0x02, %bl
   jz       .1921
   or       %rbx, %rax
   ret
.1921:
   shr      $4, %rax
   or       -4(%rbx), %rax
   mov      4(%rbx), %rbx
   jmp      consNumAE_A
.1920:
   testb    $0x02, %bl
   jz       .1922
   shr      $4, %rbx
   or       -4(%rax), %rbx
   mov      4(%rax), %rax
   jmp      consNumEA_A
.1922:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   or       -4(%rbx), %rdx
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1923:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1924
   testb    $0x02, %bl
   jz       .1925
   or       %rbx, %rax
   jmp      .1926
.1925:
   shr      $4, %rax
   or       -4(%rbx), %rax
   mov      4(%rbx), %rbx
   call     consNumAE_A
.1926:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1924:
   testb    $0x02, %bl
   jz       .1927
   shr      $4, %rbx
   or       -4(%rax), %rbx
   mov      4(%rax), %rax
   call     consNumEA_A
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1927:
   mov      -4(%rax), %rdx
   or       -4(%rbx), %rdx
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1923

   .balign  16
   .globl  xoruAE_A
xoruAE_A:
   testb    $0x02, %al
   jz       .1928
   testb    $0x02, %bl
   jz       .1929
   xor      %rbx, %rax
   orb      $2, %al
   ret
.1929:
   shr      $4, %rax
   xor      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   call     consNumAE_A
   jmp      zapZeroA_A
.1928:
   testb    $0x02, %bl
   jz       .1930
   shr      $4, %rbx
   xor      -4(%rax), %rbx
   mov      4(%rax), %rax
   call     consNumEA_A
   jmp      zapZeroA_A
.1930:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   xor      -4(%rbx), %rdx
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1931:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1932
   testb    $0x02, %bl
   jz       .1933
   xor      %rbx, %rax
   orb      $2, %al
   jmp      .1934
.1933:
   shr      $4, %rax
   xor      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   call     consNumAE_A
.1934:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1932:
   testb    $0x02, %bl
   jz       .1935
   shr      $4, %rbx
   xor      -4(%rax), %rbx
   mov      4(%rax), %rax
   call     consNumEA_A
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1935:
   mov      -4(%rax), %rdx
   xor      -4(%rbx), %rdx
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1931

   .balign  16
   .globl  adduAE_A
adduAE_A:
   testb    $0x02, %al
   jz       .1936
   testb    $0x02, %bl
   jz       adduAE_A_10
   andb     $~2, %bl
   add      %rbx, %rax
   jnc      Ret
   rcr      $1, %rax
   shr      $3, %rax
   jmp      boxNumA_A
.1936:
   testb    $0x02, %bl
   jz       .1937
   xchg     %rbx, %rax
adduAE_A_10:
   shr      $4, %rax
   add      -4(%rbx), %rax
   mov      4(%rbx), %rbx
   jnc      consNumAE_A
   call     consNumAE_A
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
.1938:
   testb    $0x02, %bl
   jz       .1939
   add      $16, %rbx
   jc       .1940
   mov      %rbx, 4(%rax)
   jmp      .1941
.1940:
   rcr      $1, %rbx
   shr      $3, %rbx
   call     boxNum_C
   mov      %rbx, -4(%rdx)
   mov      %rdx, 4(%rax)
.1941:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1939:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   add      $1, %rdx
   jc       .1942
   call     consNumCE_E
   mov      %rbx, 4(%rax)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1942:
   call     consNumCE_C
   mov      %rdx, 4(%rax)
   mov      %rdx, %rax
   jmp      .1938
.1937:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   add      -4(%rbx), %rdx
   pushf
   call     boxNum_X
   mov      %rdx, -4(%r13)
   mov      %r13, 8(%rbp)
.1943:
   mov      4(%rax), %rax
   mov      4(%rbx), %rbx
   testb    $0x02, %al
   jz       .1944
   testb    $0x02, %bl
   jz       adduAE_A_20
   shr      $4, %rax
   shr      $4, %rbx
   popf
   adc      %rbx, %rax
   shl      $4, %rax
   jc       .1945
   orb      $2, %al
   jmp      .1946
.1945:
   rcr      $1, %rax
   shr      $3, %rax
   call     boxNumA_A
.1946:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1944:
   testb    $0x02, %bl
   jz       .1947
   xchg     %rbx, %rax
adduAE_A_20:
   shr      $4, %rax
   popf
   adc      -4(%rbx), %rax
.1948:
   mov      4(%rbx), %rbx
   jc       .1949
   call     consNumAE_A
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1949:
   call     consNumAE_A
   mov      %rax, 4(%r13)
   mov      %rax, %r13
   testb    $0x02, %bl
   jz       .1950
   add      $16, %rbx
   jc       .1951
   mov      %rbx, 4(%r13)
   jmp      .1952
.1951:
   rcr      $1, %rbx
   shr      $3, %rbx
   call     boxNum_C
   mov      %rbx, -4(%rdx)
   mov      %rdx, 4(%r13)
.1952:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.1950:
   mov      -4(%rbx), %rax
   add      $1, %rax
   jmp      .1948
.1947:
   mov      -4(%rax), %rdx
   popf
   adc      -4(%rbx), %rdx
   pushf
   call     consNumCE_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1943

   .balign  16
   .globl  subuAE_A
subuAE_A:
   testb    $0x02, %al
   jz       .1953
   testb    $0x02, %bl
   jz       .1954
   andb     $~2, %bl
   sub      %rbx, %rax
   jnc      Ret
   xor      $-16, %rax
   add      $24, %rax
   ret
.1954:
   xchg     %rbx, %rax
   call     subuAE_A_10
   cmpq     $2, %rax
   jz       .1955
   orb      $8, %al
.1955:
   rep
   ret
.1953:
   testb    $0x02, %bl
   jz       .1956
subuAE_A_10:
   shr      $4, %rbx
   mov      -4(%rax), %rdx
   sub      %rbx, %rdx
   mov      4(%rax), %rbx
   jc       .1957
   cmpq     $2, %rbx
   jnz      consNumCE_A
   mov      $17293822569102704640, %r10
   test     %r10, %rdx
   jnz      consNumCE_A
   mov      %rdx, %rax
   shl      $4, %rax
   orb      $2, %al
   ret
.1957:
   call     consNumCE_A
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
.1958:
   testb    $0x02, %bl
   jz       .1959
   sub      $16, %rbx
   jnc      .1960
   mov      %rdx, %rax
   neg      %rax
   shl      $4, %rax
   orb      $10, %al
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.1960:
   mov      %rbx, 4(%rax)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      zapZeroA_A
.1959:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   sub      $1, %rdx
   jc       .1961
   call     consNumCE_E
   mov      %rbx, 4(%rax)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      zapZeroA_A
.1961:
   call     consNumCE_C
   mov      %rdx, 4(%rax)
   mov      %rdx, %rax
   jmp      .1958
.1956:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   mov      -4(%rax), %rdx
   sub      -4(%rbx), %rdx
   pushf
   mov      4(%rax), %rax
   call     consNumCA_C
   mov      %rdx, 8(%rbp)
.1962:
   mov      %rdx, %r13
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jz       .1963
   shr      $4, %rbx
.1964:
   testb    $0x02, %al
   jnz      .1965
   mov      -4(%rax), %rdx
   mov      4(%rax), %rax
   popf
   sbb      %rbx, %rdx
   jc       .1966
   call     consNumCA_C
   mov      %rdx, 4(%r13)
subuAE_A_20:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   jmp      zapZeroA_A
.1966:
   pushf
   call     consNumCA_C
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   mov      %r12, %rbx
   jmp      .1964
.1965:
   shr      $4, %rax
   jmp      .1967
.1963:
   testb    $0x02, %al
   jz       .1968
   shr      $4, %rax
.1969:
   popf
   sbb      -4(%rbx), %rax
   pushf
   call     boxNum_C
   mov      %rax, -4(%rdx)
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   mov      4(%rbx), %rbx
   mov      %r12, %rax
   testb    $0x02, %bl
   jz       .1969
   shr      $4, %rbx
   jmp      .1967
.1968:
   mov      -4(%rax), %rdx
   popf
   sbb      -4(%rbx), %rdx
   pushf
   mov      4(%rax), %rax
   call     consNumCA_C
   mov      %rdx, 4(%r13)
   jmp      .1962
.1967:
   popf
   sbb      %rbx, %rax
   pushf
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 4(%r13)
   popf
   jnc      subuAE_A_20
   mov      8(%rbp), %rax
   mov      %rax, %rbx
.1970:
   notq     -4(%rbx)
   mov      4(%rbx), %rdx
   testb    $0x02, %dl
   jnz      .1971
   mov      %rdx, %rbx
   jmp      .1970
.1971:
   xor      $-16, %rdx
   mov      %rdx, 4(%rbx)
   mov      %rax, %rbx
.1972:
   addq     $1, -4(%rbx)
   jnc      subuAE_A_90
   mov      4(%rbx), %rdx
   testb    $0x02, %dl
   jnz      .1973
   mov      %rdx, %rbx
   jmp      .1972
.1973:
   add      $16, %rdx
   mov      %rdx, 4(%rbx)
subuAE_A_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   call     zapZeroA_A
   orb      $8, %al
   ret

   .balign  16
   .globl  muluAE_A
muluAE_A:
   testb    $0x02, %al
   jz       .1974
   cmpq     $2, %rax
   jz       ret
   shr      $4, %rax
   testb    $0x02, %bl
   jz       muluAE_A_10
   xchg     %rbx, %rax
   shr      $4, %rax
   mulq     %rbx
   cmp      %r12, %rdx
   jnz      .1976
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1976
   shl      $4, %rax
   orb      $2, %al
   ret
.1976:
   shl      $4, %rdx
   orb      $2, %dl
   jmp      consNumAC_A
muluAE_A_10:
   push     %r13
   push     %r14
   push     %r15
   mov      %rax, %r14
   mulq     -4(%rbx)
   call     boxNum_X
   mov      %rax, -4(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      %rdx, %r15
.1978:
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .1979
   mov      -4(%rbx), %rax
   mulq     %r14
   add      %r15, %rax
   adc      %r12, %rdx
   mov      %rdx, %r15
   call     boxNum_C
   mov      %rax, -4(%rdx)
   mov      %rdx, 4(%r13)
   mov      %rdx, %r13
   jmp      .1978
.1979:
   mov      %r14, %rax
   shr      $4, %rbx
   mulq     %rbx
   add      %r15, %rax
   adc      %r12, %rdx
   jnz      .1980
   mov      $17293822569102704640, %r10
   test     %r10, %rax
   jnz      .1980
   shl      $4, %rax
   orb      $2, %al
muluAE_A_20:
   mov      %rax, 4(%r13)
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret
.1980:
   shl      $4, %rdx
   orb      $2, %dl
   call     consNumAC_A
   jmp      muluAE_A_20
.1974:
   testb    $0x02, %bl
   jz       .1982
   cmpq     $2, %rbx
   jz       ret
   xchg     %rbx, %rax
   shr      $4, %rax
   jmp      muluAE_A_10
.1982:
   push     %r13
   push     %r14
   push     %r15
   mov      %rax, %r14
   mov      %rbx, %r15
   call     boxNum_X
   mov      %r12, -4(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %r14
.1983:
   mov      -4(%r14), %rax
   mulq     -4(%r15)
   add      -4(%r13), %rax
   adc      %r12, %rdx
.1984:
   mov      %rax, -4(%r13)
   mov      %rdx, %rbx
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1985
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1985:
   mov      %rax, %r13
   mov      4(%r14), %r14
   testb    $0x02, %r14b
   jnz      .1986
   mov      -4(%r14), %rax
   mulq     -4(%r15)
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   jmp      .1984
.1986:
   mov      %r14, %rax
   shr      $4, %rax
   mulq     -4(%r15)
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   mov      %rax, -4(%r13)
   jz       .1987
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1988
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1988:
   mov      %rdx, -4(%rax)
.1987:
   mov      -16(%rbp), %r14
   mov      -8(%rbp), %r10
   mov      4(%r10), %r13
   mov      %r13, -8(%rbp)
   mov      4(%r15), %r15
   testb    $0x02, %r15b
   jz       .1983
   mov      %r15, %rax
   shr      $4, %rax
   mov      %rax, %r15
   mulq     -4(%r14)
   add      -4(%r13), %rax
   adc      %r12, %rdx
.1989:
   mov      %rax, -4(%r13)
   mov      %rdx, %rbx
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1990
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1990:
   mov      %rax, %r13
   mov      4(%r14), %r14
   testb    $0x02, %r14b
   jnz      .1991
   mov      -4(%r14), %rax
   mulq     %r15
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   jmp      .1989
.1991:
   mov      %r14, %rax
   shr      $4, %rax
   mulq     %r15
   add      -4(%r13), %rax
   adc      %r12, %rdx
   adc      %rbx, %rax
   adc      %r12, %rdx
   mov      %rax, -4(%r13)
   jz       .1992
   mov      4(%r13), %rax
   testb    $0x02, %al
   jz       .1993
   call     boxNum_A
   mov      %r12, -4(%rax)
   mov      %rax, 4(%r13)
.1993:
   mov      %rdx, -4(%rax)
.1992:
   mov      8(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   jmp      zapZeroA_A

   .balign  16
   .globl  divuAE_AC
divuAE_AC:
   testb    $0x02, %al
   jz       .1994
   testb    $0x02, %bl
   jz       .1995
   shr      $4, %rax
   mov      %r12, %rdx
   shr      $4, %rbx
   divq     %rbx
   shl      $4, %rax
   orb      $2, %al
   shl      $4, %rdx
   orb      $2, %dl
   ret
.1995:
   mov      %rax, %rdx
   mov      $2, %rax
   ret
.1994:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rax
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %r12, %rdx
.1996:
   testb    $0x02, 4(%rax)
   jnz      .1997
   add      $64, %rdx
   mov      4(%rax), %rax
   jmp      .1996
.1997:
   cmpq     $2, 4(%rax)
   jnz      .1998
   mov      -4(%rax), %rax
   jmp      .2000
.1998:
   add      $64, %rdx
   mov      4(%rax), %rax
   shr      $4, %rax
.2000:
   inc      %rdx
   shr      $1, %rax
   jnz      .2000
   testb    $0x02, %bl
   jz       .2004
   shr      $4, %rbx
.2002:
   dec      %rdx
   shr      $1, %rbx
   jnz      .2002
   jmp      .2003
.2004:
   testb    $0x02, 4(%rbx)
   jnz      .2005
   sub      $64, %rdx
   mov      4(%rbx), %rbx
   jmp      .2004
.2005:
   cmpq     $2, 4(%rbx)
   jnz      .2006
   mov      -4(%rbx), %rbx
   jmp      .2008
.2006:
   sub      $64, %rdx
   mov      4(%rbx), %rbx
   shr      $4, %rbx
.2008:
   dec      %rdx
   shr      $1, %rbx
   jnz      .2008
.2003:
   push     %rdx
   inc      %rdx
   push     %rdx
   subq     $1, -8(%rbp)
   js       .2014
   mov      8(%rbp), %rax
   call     shluA_A
   mov      %rax, 8(%rbp)
   mov      -8(%rbp), %rdx
.2010:
   cmp      $64, %rdx
   jc       .2011
   sub      $64, %rdx
   mov      %r12, %rbx
   call     consNumEA_A
   jmp      .2010
.2011:
   mov      %rax, 8(%rbp)
   mov      %rdx, -8(%rbp)
.2012:
   subq     $1, -8(%rbp)
   js       .2014
   call     twiceA_A
   mov      %rax, 8(%rbp)
   jmp      .2012
.2014:
   subq     $1, -16(%rbp)
   js       .2015
   mov      24(%rbp), %rax
   call     twiceA_A
   mov      %rax, 24(%rbp)
   mov      16(%rbp), %rbx
   mov      8(%rbp), %rax
   call     cmpuAE_F
   ja       .2016
   mov      16(%rbp), %rax
   mov      8(%rbp), %rbx
   call     subuAE_A
   mov      %rax, 16(%rbp)
   mov      24(%rbp), %rax
   testb    $0x02, %al
   jz       .2017
   add      $16, %al
   mov      %rax, 24(%rbp)
   jmp      .2016
.2017:
   incq     -4(%rax)
.2016:
   mov      8(%rbp), %rax
   call     shruA_A
   mov      %rax, 8(%rbp)
   jmp      .2014
.2015:
   mov      24(%rbp), %rax
   mov      16(%rbp), %rdx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .globl  incE_A
incE_A:
   mov      $18, %rax
   testb    $8, %bl
   jz       adduAE_A
   andb     $~8, %bl
   call     subuAE_A
   cmpq     $2, %rax
   jz       .2019
   orb      $8, %al
.2019:
   rep
   ret

   .balign  16
   .globl  decE_A
decE_A:
   mov      $18, %rax
   testb    $8, %bl
   jnz      .2020
   xchg     %rbx, %rax
   jmp      subuAE_A
.2020:
   andb     $~8, %bl
   call     adduAE_A
   orb      $8, %al
   ret

   .balign  16
   .globl  addAE_A
addAE_A:
   testb    $8, %al
   jnz      .2021
   testb    $8, %bl
   jz       adduAE_A
   andb     $~8, %bl
   jmp      subuAE_A
.2021:
   testb    $8, %bl
   jnz      .2022
   andb     $~8, %al
   call     subuAE_A
   jmp      .2023
.2022:
   andb     $~8, %al
   andb     $~8, %bl
   call     adduAE_A
.2023:
   cmpq     $2, %rax
   jz       .2024
   xorb     $8, %al
.2024:
   rep
   ret

   .balign  16
   .globl  subAE_A
subAE_A:
   testb    $8, %al
   jnz      .2025
   testb    $8, %bl
   jz       subuAE_A
   andb     $~8, %bl
   jmp      adduAE_A
.2025:
   testb    $8, %bl
   jnz      .2026
   andb     $~8, %al
   call     adduAE_A
   jmp      .2027
.2026:
   andb     $~8, %al
   andb     $~8, %bl
   call     subuAE_A
.2027:
   cmpq     $2, %rax
   jz       .2028
   xorb     $8, %al
.2028:
   rep
   ret

   .balign  16
   .globl  cmpNumAE_F
cmpNumAE_F:
   testb    $8, %al
   jnz      .2029
   testb    $8, %bl
   jz       cmpuAE_F
   clc
   ret
.2029:
   testb    $8, %bl
   jnz      .2030
   or       %al, %al
   stc
   ret
.2030:
   xchg     %rbx, %rax
   andb     $~8, %al
   andb     $~8, %bl

   .balign  16
   .globl  cmpuAE_F
cmpuAE_F:
   testb    $0x02, %al
   jz       .2031
   testb    $0x02, %bl
   jz       .2032
   cmp      %rbx, %rax
   ret
.2032:
   or       %al, %al
   stc
   ret
.2031:
   testb    $0x02, %bl
   jz       .2033
   clc
   ret
.2033:
   push     %r13
   push     %r14
   mov      %r12, %r13
   mov      %r12, %r14
.2034:
   mov      4(%rax), %rdx
   cmp      4(%rbx), %rdx
   jnz      .2035
.2036:
   mov      -4(%rax), %rdx
   cmp      -4(%rbx), %rdx
   jnz      .2037
   cmp      %r12, %r13
   jnz      .2038
   pop      %r14
   pop      %r13
   ret
.2038:
   mov      4(%r13), %rdx
   mov      %rax, 4(%r13)
   mov      %r13, %rax
   mov      %rdx, %r13
   mov      4(%r14), %rdx
   mov      %rbx, 4(%r14)
   mov      %r14, %rbx
   mov      %rdx, %r14
   jmp      .2036
.2037:
   pushf
   jmp      .2044
.2035:
   testb    $0x02, %dl
   jz       .2040
   testb    $0x02, 4(%rbx)
   jz       .2041
   cmp      4(%rbx), %rdx
   jmp      .2042
.2041:
   or       %al, %al
   stc
.2042:
   pushf
   jmp      .2044
.2040:
   testb    $0x02, 4(%rbx)
   jz       .2043
   clc
   pushf
   jmp      .2044
.2043:
   mov      %r13, 4(%rax)
   mov      %rax, %r13
   mov      %rdx, %rax
   mov      4(%rbx), %rdx
   mov      %r14, 4(%rbx)
   mov      %rbx, %r14
   mov      %rdx, %rbx
   jmp      .2034
.2044:
   cmp      %r12, %r13
   jz       .2045
   mov      4(%r13), %rdx
   mov      %rax, 4(%r13)
   mov      %r13, %rax
   mov      %rdx, %r13
   mov      4(%r14), %rdx
   mov      %rbx, 4(%r14)
   mov      %r14, %rbx
   mov      %rdx, %r14
   jmp      .2044
.2045:
   popf
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  symToNumXA_FE
symToNumXA_FE:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %r12
   push     %r12
   mov      %r12, %rdx
   call     symByteCX_FACX
   jz       symToNumXA_FE_99
.2046:
   cmp      $32, %al
   ja       .2047
   call     symByteCX_FACX
   jz       symToNumXA_FE_99
   jmp      .2046
.2047:
   cmp      $43, %al
   jz       symToNumXA_FE_10
   cmp      $45, %al
   jnz      .2048
   orb      $1, -16(%rbp)
symToNumXA_FE_10:
   call     symByteCX_FACX
   jz       symToNumXA_FE_99
.2048:
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, 8(%rbp)
.2049:
   call     symCharCX_FACX
   jz       .2050
   testb    $1, -24(%rbp)
   jz       .2051
   cmp      %r12, -8(%rbp)
   jnz      .2051
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   cmp      $5, %rax
   jc       .2054
   mov      $18, %rax
   mov      8(%rbp), %rbx
   push     %rdx
   call     adduAE_A
   pop      %rdx
   mov      %rax, 8(%rbp)
.2054:
   call     symByteCX_FACX
   jz       .2050
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   jmp      .2054
.2051:
   cmp      Sep0, %rax
   jnz      .2056
   testb    $1, -24(%rbp)
   jnz      symToNumXA_FE_99
   orb      $1, -24(%rbp)
   jmp      .2049
.2056:
   cmp      Sep3, %rax
   jz       .2049
   sub      $48, %rax
   cmp      $10, %rax
   jnc      symToNumXA_FE_99
   push     %rdx
   push     %r13
   push     %rax
   mov      8(%rbp), %rax
   call     tenfoldA_A
   mov      %rax, 8(%rbp)
   pop      %rbx
   shl      $4, %rbx
   orb      $2, %bl
   call     adduAE_A
   mov      %rax, 8(%rbp)
   pop      %r13
   pop      %rdx
   testb    $1, -24(%rbp)
   jz       .2049
   decq     -8(%rbp)
   jmp      .2049
.2050:
   testb    $1, -24(%rbp)
   jz       .2060
.2061:
   subq     $1, -8(%rbp)
   jc       .2060
   mov      8(%rbp), %rax
   call     tenfoldA_A
   mov      %rax, 8(%rbp)
   jmp      .2061
.2060:
   mov      8(%rbp), %rbx
   testb    $1, -16(%rbp)
   jz       .2063
   cmpq     $2, %rbx
   jz       .2063
   xorb     $8, %bl
.2063:
   stc
symToNumXA_FE_99:
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .globl  fmtNum0AE_E
fmtNum0AE_E:
   mov      %r12, Sep3
   mov      %r12, Sep0

   .globl  fmtNumAE_E
fmtNumAE_E:
   push     %rdx
   push     %r13
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   mov      %rbx, %rax
   testb    $0x02, %al
   jz       .2065
   pushq    $16
   jmp      .2066
.2065:
   pushq    $1
.2066:
   shr      $3, %al
   push     %rax
   andb     $~8, %bl
   mov      $19, %rax
   mov      %rbx, %rdx
.2067:
   testb    $0x02, %dl
   jnz      .2068
   add      $20, %rax
   mov      4(%rdx), %rdx
   jmp      .2067
.2068:
   add      $17, %rax
   mov      %r12, %rdx
   mov      $18, %r10
   div      %r10
   shl      $3, %rax
   sub      %rax, %rsp
   movq     $1, (%rsp)
   mov      %rsp, %r13
   sub      %rax, %rsp
   cmp      StkLimit, %rsp
   jc       stkErr
   mov      %r12, (%rsp)
   push     %rsp
   push     %r13
   push     %r13
.2069:
   testb    $0x02, %bl
   cmovnzq  %rbx, %r15
   jnz      .2071
   mov      -4(%rbx), %r15
.2071:
   mov      %r15, %rax
   test     -16(%rbp), %rax
   jz       .2072
   mov      %r12, %rdx
   lea      24(%rsp), %r13
   mov      8(%rsp), %r14
.2073:
   cmp      16(%rsp), %r13
   jbe      .2074
   addq     $8, 16(%rsp)
   mov      %r12, (%r13)
.2074:
   mov      (%r13), %rax
   add      (%r14), %rax
   add      %rdx, %rax
   mov      %r12, %rdx
   mov      $1000000000000000000, %r10
   cmp      %r10, %rax
   jc       .2075
   mov      $1000000000000000000, %r10
   sub      %r10, %rax
   mov      $1, %rdx
.2075:
   mov      %rax, (%r13)
   add      $8, %r13
   add      $8, %r14
   cmp      (%rsp), %r14
   jbe      .2073
   cmp      %r12, %rdx
   jz       .2072
   addq     $8, 16(%rsp)
   movq     $1, (%r13)
.2072:
   mov      %r12, %rdx
   mov      8(%rsp), %r14
.2077:
   mov      (%r14), %rax
   add      %rax, %rax
   add      %rdx, %rax
   mov      %r12, %rdx
   mov      $1000000000000000000, %r10
   cmp      %r10, %rax
   jc       .2078
   mov      $1000000000000000000, %r10
   sub      %r10, %rax
   mov      $1, %rdx
.2078:
   mov      %rax, (%r14)
   add      $8, %r14
   cmp      (%rsp), %r14
   jbe      .2077
   cmp      %r12, %rdx
   jz       .2079
   addq     $8, (%rsp)
   movq     $1, (%r14)
.2079:
   shlq     $1, -16(%rbp)
   jnz      .2071
   testb    $0x02, %bl
   jnz      .2080
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jz       .2081
   mov      $16, %rax
   jmp      .2082
.2081:
   mov      $1, %rax
.2082:
   mov      %rax, -16(%rbp)
   jmp      .2069
.2080:
   mov      16(%rsp), %r14
   lea      24(%rsp), %r15
   cmp      %r12, -8(%rbp)
   jns      .2083
   cmpq     $-1, -8(%rbp)
   jnz      .2084
   testb    $1, -24(%rbp)
   jz       .2085
   mov      $45, %al
   mov      PutB, %r10
   call     *%r10
.2085:
   mov      (%r14), %rax
   call     outWordA
.2086:
   sub      $8, %r14
   cmp      %r15, %r14
   jc       .2090
   mov      (%r14), %rax
   mov      $100000000000000000, %rbx
.2088:
   mov      %r12, %rdx
   divq     %rbx
   push     %rdx
   add      $48, %al
   mov      PutB, %r10
   call     *%r10
   cmp      $1, %rbx
   jz       .2086
   mov      %r12, %rdx
   mov      %rbx, %rax
   mov      $10, %r10
   div      %r10
   mov      %rax, %rbx
   pop      %rax
   jmp      .2088
.2084:
   mov      %r14, %rax
   sub      %r15, %rax
   shr      $3, %rax
   mov      $18, %r10
   mul      %r10
   mov      %rax, %rbx
   mov      (%r14), %rax
.2091:
   inc      %rbx
   mov      %r12, %rdx
   mov      $10, %r10
   div      %r10
   cmp      %r12, %rax
   jnz      .2091
   testb    $1, -24(%rbp)
   jz       .2092
   inc      %rbx
.2092:
   shl      $4, %rbx
   orb      $2, %bl
.2090:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2093
.2083:
   mov      $4, %rdx
   lea      8(%rbp), %r13
   testb    $1, -24(%rbp)
   jz       .2094
   mov      $45, %al
   call     byteSymBCX_CX
.2094:
   push     %rdx
   mov      %r14, %rax
   sub      %r15, %rax
   shr      $3, %rax
   mov      $18, %r10
   mul      %r10
   mov      %rax, %rbx
   mov      (%r14), %rax
.2095:
   mov      %r12, %rdx
   mov      $10, %r10
   div      %r10
   cmp      %r12, %rax
   jz       .2096
   inc      %rbx
   jmp      .2095
.2096:
   pop      %rdx
   sub      -8(%rbp), %rbx
   mov      %rbx, -8(%rbp)
   jnc      .2097
   mov      $48, %al
   call     byteSymBCX_CX
   mov      Sep0, %rax
   call     charSymACX_CX
.2098:
   cmpq     $-1, -8(%rbp)
   jnc      .2097
   incq     -8(%rbp)
   mov      $48, %al
   call     byteSymBCX_CX
   jmp      .2098
.2097:
   mov      (%r14), %rax
   call     fmtWordACX_CX
.2100:
   sub      $8, %r14
   cmp      %r15, %r14
   jc       .2101
   mov      (%r14), %rax
   mov      $100000000000000000, %rbx
.2102:
   push     %rax
   call     fmtScaleCX_CX
   pop      %rax
   push     %rdx
   mov      %r12, %rdx
   divq     %rbx
   xchg     (%rsp), %rdx
   add      $48, %al
   call     byteSymBCX_CX
   cmp      $1, %rbx
   jz       .2100
   push     %rdx
   mov      %r12, %rdx
   mov      %rbx, %rax
   mov      $10, %r10
   div      %r10
   pop      %rdx
   mov      %rax, %rbx
   pop      %rax
   jmp      .2102
.2101:
   mov      8(%rbp), %r13
   mov      (%rbp), %rsp
   pop      %rbp
   call     consSymX_E
.2093:
   pop      %r15
   pop      %r14
   pop      %r13
   pop      %rdx
   ret

   .balign  16
   .globl  fmtWordACX_CX
fmtWordACX_CX:
   cmp      $9, %rax
   jbe      .2104
   mov      %rdx, %rbx
   mov      %r12, %rdx
   mov      $10, %r10
   div      %r10
   push     %rdx
   mov      %rbx, %rdx
   call     fmtWordACX_CX
   call     fmtScaleCX_CX
   pop      %rax
.2104:
   add      $48, %al
   jmp      byteSymBCX_CX

   .balign  16
   .globl  fmtScaleCX_CX
fmtScaleCX_CX:
   cmp      %r12, -8(%rbp)
   jnz      .2105
   mov      Sep0, %rax
   call     charSymACX_CX
   jmp      .2106
.2105:
   cmp      %r12, Sep3
   jz       .2106
   mov      -8(%rbp), %rax
   cmp      %r12, %rax
   jle      .2106
   push     %rdx
   mov      %r12, %rdx
   mov      $3, %r10
   div      %r10
   cmp      %r12, %rdx
   pop      %rdx
   jnz      .2106
   mov      Sep3, %rax
   call     charSymACX_CX
.2106:
   decq     -8(%rbp)
   ret

   .balign  16
   nop
   nop
   .globl  doFormat
doFormat:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2110
   mov      %r12, %rbx
   jmp      .2111
.2110:
   call     xCntEX_FE
.2111:
   push     %rbx
   pushq    $46
   push     %r12
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2112
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   call     firstCharE_A
   mov      %rax, -16(%rbp)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2112
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   call     firstCharE_A
   mov      %rax, (%rsp)
.2112:
   popq     Sep3
   popq     Sep0
   mov      8(%rbp), %rbx
   testb    $0x06, %bl
   jz       .2114
   pop      %rax
   call     fmtNumAE_E
   jmp      .2115
.2114:
   testb    $0x08, %bl
   jz       .2116
   mov      -8(%rbx), %r13
   call     nameX_X
   jmp      .2117
.2116:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   call     packECX_CX
   mov      8(%rbp), %r13
   mov      (%rbp), %rsp
   pop      %rbp
.2117:
   pop      %rax
   call     symToNumXA_FE
   jc       .2115
   mov      $Nil, %rbx
.2115:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doAdd
doAdd:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2119
   testb    $0x06, %bl
   jz       numErrEX
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2120:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2121
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doAdd_10
   testb    $0x06, %bl
   jz       numErrEX
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     addAE_A
   mov      %rax, 8(%rbp)
   jmp      .2120
.2121:
   mov      8(%rbp), %rbx
doAdd_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2119:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSub
doSub:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2122
   testb    $0x06, %bl
   jz       numErrEX
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2123
   cmpq     $2, %rbx
   jz       .2122
   xorb     $8, %bl
   jmp      .2122
.2123:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2126:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doSub_10
   testb    $0x06, %bl
   jz       numErrEX
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     subAE_A
   mov      %rax, 8(%rbp)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2126
   mov      8(%rbp), %rbx
doSub_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2122:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doInc
doInc:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2127
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jz       .2128
   call     incE_A
   jmp      .2129
.2128:
   call     checkVarEX
   testb    $0x08, %bl
   jz       .2130
   testb    $0x08, -8(%rbx)
   jz       .2130
   call     dbTouchEX
.2130:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2132
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2129
   testb    $0x06, %bl
   jz       numErrEX
   call     incE_A
   mov      8(%rbp), %r11
   mov      %rax, (%r11)
   jmp      .2129
.2132:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %r10
   mov      (%r10), %rax
   cmp      $Nil, %rax
   jz       .2129
   testb    $0x06, %al
   jz       numErrAX
   mov      8(%rbp), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2129
   testb    $0x06, %bl
   jz       numErrEX
   call     addAE_A
   mov      16(%rbp), %r11
   mov      %rax, (%r11)
.2129:
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2127:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDec
doDec:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2137
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   testb    $0x06, %bl
   jz       .2138
   call     decE_A
   jmp      .2139
.2138:
   call     checkVarEX
   testb    $0x08, %bl
   jz       .2140
   testb    $0x08, -8(%rbx)
   jz       .2140
   call     dbTouchEX
.2140:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2142
   mov      (%rbx), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2139
   testb    $0x06, %bl
   jz       numErrEX
   call     decE_A
   mov      8(%rbp), %r11
   mov      %rax, (%r11)
   jmp      .2139
.2142:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      16(%rbp), %r10
   mov      (%r10), %rax
   cmp      $Nil, %rax
   jz       .2139
   testb    $0x06, %al
   jz       numErrAX
   mov      8(%rbp), %rbx
   cmp      $Nil, %rbx
   cmovzq   %rbx, %rax
   jz       .2139
   testb    $0x06, %bl
   jz       numErrEX
   call     subAE_A
   mov      16(%rbp), %r11
   mov      %rax, (%r11)
.2139:
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2137:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMul
doMul:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2147
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2148
   andb     $~8, %bl
   inc      %al
.2148:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2149:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2150
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doMul_10
   testb    $0x06, %bl
   jz       numErrEX
   testb    $8, %bl
   jz       .2151
   andb     $~8, %bl
   xorb     $1, -8(%rbp)
.2151:
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     muluAE_A
   mov      %rax, 8(%rbp)
   jmp      .2149
.2150:
   mov      8(%rbp), %rbx
   testb    $1, -8(%rbp)
   jz       doMul_10
   cmpq     $2, %rbx
   jz       doMul_10
   orb      $8, %bl
doMul_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2147:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doMulDiv
doMulDiv:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2154
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2155
   andb     $~8, %bl
   inc      %al
.2155:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2156:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doMulDiv_10
   testb    $0x06, %bl
   jz       numErrEX
   testb    $8, %bl
   jz       .2157
   andb     $~8, %bl
   xorb     $1, -8(%rbp)
.2157:
   mov      %rbx, 16(%rbp)
   testb    $0x0E, 8(%r14)
   jnz      .2158
   mov      8(%rbp), %rax
   call     muluAE_A
   mov      %rax, 8(%rbp)
   jmp      .2156
.2158:
   cmpq     $2, %rbx
   jz       divErrX
   mov      %rbx, %rax
   call     shruA_A
   mov      8(%rbp), %rbx
   call     adduAE_A
   mov      16(%rbp), %rbx
   call     divuAE_AC
   mov      %rax, %rbx
   testb    $1, -8(%rbp)
   jz       doMulDiv_10
   cmpq     $2, %rbx
   jz       doMulDiv_10
   orb      $8, %bl
doMulDiv_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2154:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDiv
doDiv:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2161
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2162
   andb     $~8, %bl
   inc      %al
.2162:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2163:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2164
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doDiv_10
   testb    $0x06, %bl
   jz       numErrEX
   cmpq     $2, %rbx
   jz       divErrX
   testb    $8, %bl
   jz       .2165
   andb     $~8, %bl
   xorb     $1, -8(%rbp)
.2165:
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     divuAE_AC
   mov      %rax, 8(%rbp)
   jmp      .2163
.2164:
   mov      8(%rbp), %rbx
   testb    $1, -8(%rbp)
   jz       doDiv_10
   cmpq     $2, %rbx
   jz       doDiv_10
   orb      $8, %bl
doDiv_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2161:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doRem
doRem:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2168
   testb    $0x06, %bl
   jz       numErrEX
   mov      $0, %al
   testb    $8, %bl
   jz       .2169
   andb     $~8, %bl
   mov      $1, %al
.2169:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
.2170:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2171
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doRem_10
   testb    $0x06, %bl
   jz       numErrEX
   cmpq     $2, %rbx
   jz       divErrX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     divuAE_AC
   mov      %rdx, 8(%rbp)
   jmp      .2170
.2171:
   mov      8(%rbp), %rbx
   testb    $1, -8(%rbp)
   jz       doRem_10
   cmpq     $2, %rbx
   jz       doRem_10
   orb      $8, %bl
doRem_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2168:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doShift
doShift:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2174
   testb    $0x06, %bl
   jz       numErrEX
   mov      %rbx, %rax
   andb     $~8, %al
   and      $8, %rbx
   push     %rbx
   cmp      %r12, -8(%rbp)
   jz       .2175
   js       .2176
   call     shruA_A
   mov      %rax, 8(%rbp)
.2177:
   decq     -8(%rbp)
   jz       .2175
   call     halfA_A
   mov      %rax, 8(%rbp)
   jmp      .2177
.2176:
   call     shluA_A
   mov      %rax, 8(%rbp)
.2180:
   incq     -8(%rbp)
   jz       .2175
   call     twiceA_A
   mov      %rax, 8(%rbp)
   jmp      .2180
.2175:
   cmpq     $2, %rax
   jz       .2182
   or       -16(%rbp), %rax
.2182:
   mov      %rax, %rbx
.2174:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLt0
doLt0:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   testb    $8, %bl
   jz       retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doGe0
doGe0:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   testb    $8, %bl
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doGt0
doGt0:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       retNil
   cmpq     $2, %rbx
   jz       retNil
   testb    $8, %bl
   jnz      retNil
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doAbs
doAbs:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2183
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
.2183:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doBitQ
doBitQ:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2184:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2185
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2185
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      8(%rbp), %rdx
.2186:
   testb    $0x02, %dl
   jnz      .2187
   testb    $0x02, %bl
   jnz      doBitQ_10
   mov      -4(%rbx), %rax
   and      -4(%rdx), %rax
   cmp      -4(%rdx), %rax
   jnz      doBitQ_10
   mov      4(%rdx), %rdx
   mov      4(%rbx), %rbx
   jmp      .2186
.2187:
   testb    $0x02, %bl
   jnz      .2188
   shr      $4, %rdx
   mov      -4(%rbx), %rbx
.2188:
   and      %rdx, %rbx
   cmp      %rdx, %rbx
   jz       .2184
doBitQ_10:
   mov      $Nil, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret
.2185:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doBitAnd
doBitAnd:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2190
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2191:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2192
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doBitAnd_10
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     anduAE_A
   mov      %rax, 8(%rbp)
   jmp      .2191
.2192:
   mov      8(%rbp), %rbx
doBitAnd_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2190:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doBitOr
doBitOr:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2193
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2194:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2195
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doBitOr_10
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     oruAE_A
   mov      %rax, 8(%rbp)
   jmp      .2194
.2195:
   mov      8(%rbp), %rbx
doBitOr_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2193:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doBitXor
doBitXor:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2196
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2197:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      .2198
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       doBitXor_10
   testb    $0x06, %bl
   jz       numErrEX
   andb     $~8, %bl
   mov      %rbx, 16(%rbp)
   mov      8(%rbp), %rax
   call     xoruAE_A
   mov      %rax, 8(%rbp)
   jmp      .2197
.2198:
   mov      8(%rbp), %rbx
doBitXor_10:
   mov      (%rbp), %rsp
   pop      %rbp
.2196:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  initSeedE_E
initSeedE_E:
   push     %rdx
   mov      %r12, %rdx
.2199:
   testb    $0x0E, %bl
   jnz      .2200
   push     %rbx
   mov      (%rbx), %rbx
   call     initSeedE_E
   add      %rbx, %rdx
   pop      %rbx
   mov      8(%rbx), %rbx
   jmp      .2199
.2200:
   cmp      $Nil, %rbx
   jz       .2201
   testb    $0x06, %bl
   jnz      .2203
   mov      -8(%rbx), %rbx
   call     nameE_E
.2203:
   testb    $0x02, %bl
   jnz      .2204
   add      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   jmp      .2203
.2204:
   add      %rbx, %rdx
.2201:
   mov      %rdx, %rbx
   pop      %rdx
   ret

   .balign  16
   nop
   nop
   .globl  doSeed
doSeed:
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     initSeedE_E
   mov      $6364136223846793005, %rax
   mulq     %rbx
   add      $1, %rax
   adc      %r12, %rdx
   mov      %rax, Seed
   mov      %rdx, Seed+8
   mov      Seed+4, %rbx
   andb     $~7, %bl
   orb      $2, %bl
   ret

   .balign  16
   nop
   nop
   .globl  doRand
doRand:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      $6364136223846793005, %rax
   mulq     Seed
   add      $1, %rax
   adc      %r12, %rdx
   mov      %rax, Seed
   mov      %rdx, Seed+8
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2205
   mov      Seed+4, %rbx
   andb     $~7, %bl
   orb      $2, %bl
   pop      %r14
   pop      %r13
   ret
.2205:
   cmp      $TSym, %rbx
   jnz      .2206
   mov      Seed, %rax
   rcl      $1, %rax
   jc       .2207
   mov      $Nil, %rbx
.2207:
   pop      %r14
   pop      %r13
   ret
.2206:
   call     xCntEX_FE
   push     %rbx
   mov      8(%r14), %r14
   call     evCntXY_FE
   inc      %rbx
   sub      (%rsp), %rbx
   mov      Seed+4, %rax
   mov      %r12, %rdx
   divq     %rbx
   pop      %rbx
   add      %rdx, %rbx
   pop      %r14
   pop      %r13
   jmp      boxCntE_E

   .globl  closeAX
closeAX:
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       Ret
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      closeErrEX

   .globl  unLockFileAC
unLockFileAC:
   mov      %ax, Flock
   mov      %r12, Flock+8
   shr      $16, %rax
   mov      %rax, Flock+16
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $6, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .globl  wrLockFileC
wrLockFileC:
   mov      $1, %rax
   jmp      lockFileAC

   .globl  rdLockFileC
rdLockFileC:
   mov      %r12, %rax

   .globl  lockFileAC
lockFileAC:
   mov      %ax, Flock
   mov      %r12, Flock+8
   shr      $16, %rax
   mov      %rax, Flock+16
.2208:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $7, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      Ret
   call     errno_A
   cmp      $4, %rax
   jnz      lockErr
   jmp      .2208

   .globl  closeOnExecAX
closeOnExecAX:
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      Ret
   mov      $SetFD, %r14
   jmp      errnoEXY
SetFD:
   .asciz   "SETFD %s"

   .globl  nonblockingA_A
nonblockingA_A:
   push     %rdx
   mov      %rax, %rdx
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $3, %rsi
   xor      %rdx, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   push     %rax
   or       $2048, %rax
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %rax
   pop      %rdx
   ret

   .globl  initInFileA_A
initInFileA_A:
   mov      %r12, %rdx
initInFileAC_A:
   xchg     %rdx, %rax
initInFileCA_A:
   push     %rax
   push     %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jc       .2209
   push     %r13
   mov      InFDs, %r13
   mov      %rdx, %rbx
   add      $8, %rbx
   mov      %rbx, InFDs
   mov      InFiles, %rax
   call     allocAE_A
   mov      %rax, InFiles
   add      %rax, %r13
   add      %rbx, %rax
.2210:
   mov      %r12, (%r13)
   add      $8, %r13
   cmp      %rax, %r13
   jnz      .2210
   pop      %r13
.2209:
   add      InFiles, %rdx
   mov      (%rdx), %rax
   mov      $8248, %rbx
   call     allocAE_A
   mov      %rax, (%rdx)
   popq     (%rax)
   mov      %r12, 8(%rax)
   mov      %r12, 16(%rax)
   mov      %r12, 24(%rax)
   mov      $1, %rdx
   mov      %rdx, 32(%rax)
   mov      %rdx, 40(%rax)
   popq     48(%rax)
   ret

   .globl  initOutFileA_A
initOutFileA_A:
   mov      %rax, %rdx
   push     %rax
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   push     %rax
   shl      $3, %rdx
   cmp      OutFDs, %rdx
   jc       .2211
   push     %r13
   mov      OutFDs, %r13
   mov      %rdx, %rbx
   add      $8, %rbx
   mov      %rbx, OutFDs
   mov      OutFiles, %rax
   call     allocAE_A
   mov      %rax, OutFiles
   add      %rax, %r13
   add      %rbx, %rax
.2212:
   mov      %r12, (%r13)
   add      $8, %r13
   cmp      %rax, %r13
   jnz      .2212
   pop      %r13
.2211:
   add      OutFiles, %rdx
   mov      (%rdx), %rax
   mov      $8216, %rbx
   call     allocAE_A
   mov      %rax, (%rdx)
   popq     16(%rax)
   mov      %r12, 8(%rax)
   popq     (%rax)
   ret

   .globl  closeInFileA
closeInFileA:
   shl      $3, %rax
   cmp      InFDs, %rax
   jnc      .2213
   push     %r13
   add      InFiles, %rax
   mov      (%rax), %r13
   cmp      %r12, %r13
   jz       .2214
   cmp      InFile, %r13
   jnz      .2215
   mov      %r12, InFile
.2215:
   mov      %r12, (%rax)
   mov      %rdx, %r12
   mov      48(%r13), %rdi
   call     free
   mov      %r13, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.2214:
   pop      %r13
.2213:
   rep
   ret

   .globl  closeOutFileA
closeOutFileA:
   shl      $3, %rax
   cmp      OutFDs, %rax
   jnc      .2216
   push     %r13
   add      OutFiles, %rax
   mov      (%rax), %r13
   cmp      %r12, %r13
   jz       .2217
   cmp      OutFile, %rax
   jnz      .2218
   mov      %r12, OutFile
.2218:
   mov      %r12, (%rax)
   mov      %rdx, %r12
   mov      %r13, %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
.2217:
   pop      %r13
.2216:
   rep
   ret

   .globl  slowZ_F
slowZ_F:
   mov      %r12, 8(%r15)
   mov      %r12, 16(%r15)
.2219:
   mov      %rdx, %r12
   mov      (%r15), %rdi
   lea      56(%r15), %rsi
   mov      $8192, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       .2220
   mov      %rax, 16(%r15)
   ret
.2220:
   call     errno_A
   cmp      $4, %rax
   jz       .2221
   or       %r12, %r12
   ret
.2221:
   cmp      %r12, Signal
   jz       .2219
   call     sighandler0
   jmp      .2219

   .globl  slowNbC_FA
slowNbC_FA:
   mov      %r12, 8(%rdx)
   mov      %r12, 16(%rdx)
.2223:
   mov      (%rdx), %rax
   call     nonblockingA_A
   push     %rax
   mov      %rdx, %r12
   mov      (%r12), %rdi
   lea      56(%r12), %rsi
   mov      $8192, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   xchg     (%rsp), %rax
   mov      %rdx, %r12
   mov      (%r12), %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %rax
   cmp      %r12, %rax
   js       .2224
   mov      %rax, 16(%rdx)
   ret
.2224:
   call     errno_A
   cmp      $11, %rax
   jnz      .2225
   stc
   ret
.2225:
   cmp      $4, %rax
   jz       .2226
   or       %r12, %r12
   ret
.2226:
   cmp      %r12, Signal
   jz       .2223
   call     sighandler0
   jmp      .2223

   .globl  rdBytesCEX_F
rdBytesCEX_F:
.2229:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jg       .2230
   jz       Ret
   call     errno_A
   cmp      $4, %rax
   jnz      Retz
   cmp      %r12, Signal
   jz       .2229
   call     sighandler0
   jmp      .2229
.2230:
   add      %rax, %r13
   sub      %rax, %rbx
   jnz      .2229
   cmp      %r12, %rax
   ret

   .globl  rdBytesNbCEX_F
rdBytesNbCEX_F:
.2232:
   mov      %rdx, %rax
   call     nonblockingA_A
   push     %rax
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   xchg     (%rsp), %rax
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   pop      %rax
   cmp      %r12, %rax
   jle      .2233
.2234:
   add      %rax, %r13
   sub      %rax, %rbx
   jnz      .2236
   cmp      %r12, %rax
   ret
.2236:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     read
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jg       .2234
   jz       Ret
   call     errno_A
   cmp      $4, %rax
   jnz      Retz
   cmp      %r12, Signal
   jz       .2236
   call     sighandler0
   jmp      .2236
.2233:
   jz       Ret
   call     errno_A
   cmp      $11, %rax
   jnz      .2239
   stc
   ret
.2239:
   cmp      $4, %rax
   jnz      Retz
   cmp      %r12, Signal
   jz       .2232
   call     sighandler0
   jmp      .2232

   .globl  wrBytesCEX_F
wrBytesCEX_F:
.2241:
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %r13, %rsi
   mov      %rbx, %rdx
   call     write
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       .2242
   sub      %rax, %rbx
   jz       Ret
   add      %rax, %r13
   jmp      .2243
.2242:
   call     errno_A
   cmp      $9, %rax
   jz       retnz
   cmp      $32, %rax
   jz       retnz
   cmp      $104, %rax
   jz       retnz
   cmp      $4, %rax
   jnz      wrBytesErr
.2243:
   cmp      %r12, Signal
   jz       .2241
   call     sighandler0
   jmp      .2241

   .balign  16
   .globl  clsChildY
clsChildY:
   mov      %r12, (%r14)
   mov      %rdx, %r12
   mov      8(%r14), %rdi
   call     close
   mov      16(%r14), %rdi
   call     close
   mov      40(%r14), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .globl  wrChildCXY
wrChildCXY:
   mov      32(%r14), %rbx
   cmp      %r12, %rbx
   jnz      .2245
.2246:
   mov      %rdx, %r12
   mov      16(%r14), %rdi
   mov      %r13, %rsi
   mov      %r12, %rdx
   call     write
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       .2247
   sub      %rax, %rdx
   jz       Ret
   add      %rax, %r13
   jmp      .2246
.2247:
   call     errno_A
   cmp      $11, %rax
   jz       .2245
   cmp      $32, %rax
   jz       clsChildY
   cmp      $104, %rax
   jz       clsChildY
   cmp      $4, %rax
   jnz      wrChildErr
   jmp      .2246
.2245:
   mov      40(%r14), %rax
   add      %rdx, %rbx
   add      $2, %rbx
   call     allocAE_A
   mov      %rax, 40(%r14)
   mov      32(%r14), %rbx
   add      32(%r14), %rbx
   mov      %rdx, %rax
   mov      %ax, (%rbx)
   add      $2, %rbx
   mov      %rbx, %rdi
   mov      %r13, %rsi
   mov      %rdx, %rcx
   cld
   rep movsb
   add      $2, %rdx
   addq     $ret, 32(%r14)

   .balign  16
   .globl  flushA_F
flushA_F:
   cmp      %r12, %rax
   jz       .2250
   push     %rbx
   mov      8(%rax), %rbx
   cmp      %r12, %rbx
   jz       .2251
   push     %rdx
   push     %r13
   mov      %r12, 8(%rax)
   mov      (%rax), %rdx
   lea      24(%rax), %r13
   call     wrBytesCEX_F
   pop      %r13
   pop      %rdx
.2251:
   pop      %rbx
.2250:
   rep
   ret

   .globl  flushAll
flushAll:
   mov      %r12, %rdx
.2252:
   cmp      OutFDs, %rdx
   jnc      .2253
   mov      %rdx, %rax
   add      OutFiles, %rax
   mov      (%rax), %rax
   call     flushA_F
   add      $8, %rdx
   jmp      .2252
.2253:
   rep
   ret

   .globl  stdinByte_FA
stdinByte_FA:
   push     %r15
   mov      InFiles, %r10
   mov      (%r10), %r15
   cmp      %r12, %r15
   jz       .2254
   call     getBinaryZ_FB
   movzx    %al, %rax
   pop      %r15
   ret
.2254:
   stc
   pop      %r15
   ret

   .balign  16
   .globl  getBinaryZ_FB
getBinaryZ_FB:
   mov      8(%r15), %rax
   cmp      16(%r15), %rax
   jnz      .2255
   call     slowZ_F
   jz       retc
   mov      %r12, %rax
.2255:
   incq     8(%r15)
   add      %r15, %rax
   mov      56(%rax), %al
   ret

   .balign  16
   .globl  byteNumBCX_CX
byteNumBCX_CX:
   movzx    %al, %rax
   testb    $0x04, %r13b
   jnz      .2256
   cmp      $59, %rdx
   jz       .2257
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, (%r13)
   add      $8, %rdx
   ret
.2257:
   mov      (%r13), %rdx
   shr      $3, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, (%r13)
   mov      %rax, %r13
   mov      %r12, %rdx
   ret
.2256:
   cmp      %r12, %rdx
   jnz      .2258
   mov      -4(%r13), %rdx
   shr      $1, %rax
   rcr      $1, %rdx
   mov      %rdx, -4(%r13)
   rcl      $1, %rax
   shl      $3, %rax
   orb      $2, %al
   mov      %rax, 4(%r13)
   mov      $11, %rdx
   ret
.2258:
   cmp      $59, %rdx
   jz       .2259
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, 4(%r13)
   add      $8, %rdx
   ret
.2259:
   mov      4(%r13), %rdx
   shr      $3, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, 4(%r13)
   mov      %rax, %r13
   mov      %r12, %rdx
   ret

   .globl  binReadZ_FE
binReadZ_FE:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       ret
   cmp      %r12b, %al
   jz       retNil
   movzx    %al, %rax
   testb    $252, %al
   jnz      .2260
   mov      %rax, %rbx
   cmp      $1, %al
   jnz      retnc
   call     binReadZ_FE
   jc       ret
   push     %r13
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.2261:
   call     binReadZ_FE
   jc       binReadZ_FE_10
   cmp      $3, %rbx
   jz       .2262
   cmp      $2, %rbx
   jnz      .2263
   cmp      $2, %al
   jnz      .2263
   call     binReadZ_FE
   jnc      .2265
binReadZ_FE_10:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.2265:
   cmp      $3, %rbx
   cmovzq   8(%rbp), %rbx
   mov      %rbx, 8(%r13)
   jmp      .2262
.2263:
   call     consE_C
   mov      %rbx, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      %rdx, %r13
   jmp      .2261
.2262:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret
.2260:
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      %rax, %rbx
   shr      $2, %rbx
   and      $3, %rax
   jnz      .2266
   mov      $3, %rdx
   cmp      $63, %rbx
   jnz      .2270
.2269:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteNumBCX_CX
   dec      %rbx
   jnz      .2269
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   movzx    %al, %rax
   mov      %rax, %rbx
   cmp      $255, %al
   jz       .2269
   or       %al, %al
   jz       binReadZ_FE_20
.2270:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteNumBCX_CX
   dec      %rbx
   jnz      .2270
binReadZ_FE_20:
   mov      8(%rbp), %rbx
   testb    $0x04, %r13b
   jz       .2272
   mov      4(%r13), %rax
   and      $8, %rax
   andb     $~8, 4(%r13)
   or       %rax, %rbx
   jmp      .2272
.2266:
   push     %rax
   mov      $4, %rdx
   cmp      $63, %rbx
   jnz      .2276
.2275:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteSymBCX_CX
   dec      %rbx
   jnz      .2275
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   movzx    %al, %rax
   mov      %rax, %rbx
   cmp      $255, %al
   jz       .2275
   or       %al, %al
   jz       binReadZ_FE_30
.2276:
   mov      GetBinZ_FB, %r10
   call     *%r10
   jc       binReadZ_FE_90
   call     byteSymBCX_CX
   dec      %rbx
   jnz      .2276
binReadZ_FE_30:
   mov      8(%rbp), %r13
   pop      %rax
   cmp      $2, %rax
   jnz      .2277
   call     consSymX_E
   jmp      .2272
.2277:
   cmp      $1, %rax
   jnz      .2279
   push     %r14
   call     findSymX_E
   pop      %r14
   jmp      .2272
.2279:
   cmp      %r12, Extn
   jz       .2281
   mov      %r13, %rax
   shr      $24, %rax
   mov      %rax, %rdx
   and      $255, %rdx
   shr      $12, %rax
   and      $65280, %rax
   or       %rdx, %rax
   add      Extn, %rax
   shl      $24, %rax
   mov      %rax, %rdx
   shl      $12, %rax
   or       %rdx, %rax
   mov      $4486011719516160, %r10
   and      %r10, %rax
   mov      $18442258061990035455, %r10
   and      %r10, %r13
   or       %rax, %r13
.2281:
   call     externX_E
.2272:
   clc
binReadZ_FE_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
   ret

   .balign  16
   .globl  prByteCEXY
prByteCEXY:
   cmp      %r12, %rdx
   jnz      .2282
   testb    $0x02, %r13b
   jnz      .2283
   mov      -4(%r13), %rbx
   mov      4(%r13), %r13
   jmp      .2284
.2283:
   mov      %r13, %rbx
   shr      $4, %rbx
.2284:
   shr      $1, %r14
   rcl      $1, %rbx
   rcl      $1, %r14
   mov      $8, %rdx
.2282:
   mov      %rbx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   shr      $8, %rbx
   dec      %rdx
   ret

   .balign  16
   .globl  prCntCE
prCntCE:
   mov      %rbx, %rax
.2285:
   shr      $8, %rax
   jz       .2286
   add      $4, %rdx
   jmp      .2285
.2286:
   mov      %rdx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   shr      $2, %rdx
.2287:
   mov      %rbx, %rax
   shr      $8, %rbx
   mov      PutBinBZ, %r10
   call     *%r10
   dec      %rdx
   jnz      .2287
   rep
   ret

   .balign  16
   .globl  prTellEZ
prTellEZ:
   movq     $putTellBZ, PutBinBZ
   mov      %r12, Extn
   call     binPrintEZ
   ret

   .globl  prE
prE:
   movq     $putStdoutB, PutBinBZ

   .globl  binPrintEZ
binPrintEZ:
   testb    $0x02, %bl
   jz       .2288
   mov      $4, %rdx
   shr      $3, %rbx
   jmp      prCntCE
.2288:
   testb    $0x04, %bl
   jz       .2289
   push     %r13
   push     %r14
   push     %rbx
   andb     $~8, %bl
   mov      %rbx, %r13
   mov      $8, %rax
.2290:
   mov      -4(%rbx), %rdx
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .2291
   add      $8, %rax
   jmp      .2290
.2291:
   shr      $4, %rbx
   shl      $1, %rdx
   adc      %rbx, %rbx
   jz       .2292
.2293:
   inc      %rax
   shr      $8, %rbx
   jnz      .2293
.2292:
   pop      %r14
   shr      $3, %r14
   mov      %r12, %rdx
   cmp      $63, %rax
   jnc      .2294
   push     %rax
   shl      $2, %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2295:
   call     prByteCEXY
   decq     (%rsp)
   jnz      .2295
   jmp      .2296
.2294:
   sub      $63, %rax
   push     %rax
   mov      $252, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   pushq    $63
.2297:
   call     prByteCEXY
   decq     (%rsp)
   jnz      .2297
.2298:
   cmpq     $255, 8(%rsp)
   jc       .2299
   mov      $255, %rax
   mov      %rax, (%rsp)
   mov      PutBinBZ, %r10
   call     *%r10
.2300:
   call     prByteCEXY
   decq     (%rsp)
   jnz      .2300
   subq     $255, 8(%rsp)
   jmp      .2298
.2299:
   pop      %rax
   mov      (%rsp), %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2301:
   subq     $1, (%rsp)
   jc       .2296
   call     prByteCEXY
   jmp      .2301
.2296:
   pop      %rax
   pop      %r14
   pop      %r13
   ret
.2289:
   testb    $0x08, %bl
   jz       .2303
   cmp      $Nil, %rbx
   jnz      .2304
   mov      %r12, %rax
   mov      PutBinBZ, %r10
   jmp      *%r10
.2304:
   testb    $0x08, -8(%rbx)
   jz       .2305
   mov      -8(%rbx), %rbx
   call     nameE_E
   cmp      %r12, Extn
   jz       .2306
   mov      %rbx, %rax
   shr      $24, %rax
   mov      %rax, %rdx
   and      $255, %rdx
   shr      $12, %rax
   and      $65280, %rax
   or       %rdx, %rax
   sub      Extn, %rax
   shl      $24, %rax
   mov      %rax, %rdx
   shl      $12, %rax
   or       %rdx, %rax
   mov      $4486011719516160, %r10
   and      %r10, %rax
   mov      $18442258061990035455, %r10
   and      %r10, %rbx
   or       %rax, %rbx
.2306:
   shl      $2, %rbx
   shr      $6, %rbx
   mov      $7, %rdx
   jmp      prCntCE
.2305:
   push     %r13
   push     %r14
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jnz      .2307
   mov      %r12, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   jmp      .2308
.2307:
   mov      $Intern, %r14
   call     isInternEXY_F
   mov      $1, %rdx
   mov      $2, %r10
   cmovnzq  %r10, %rdx
   testb    $0x02, %r13b
   jz       .2309
   add      $4, %rdx
   mov      %r13, %rbx
   shr      $4, %rbx
   call     prCntCE
   jmp      .2308
.2309:
   mov      %r13, %rbx
   mov      $8, %rax
.2311:
   mov      4(%rbx), %rbx
   testb    $0x02, %bl
   jnz      .2312
   add      $8, %rax
   jmp      .2311
.2312:
   shr      $4, %rbx
   jz       .2313
.2314:
   inc      %rax
   shr      $8, %rbx
   jnz      .2314
.2313:
   mov      %rax, %rbx
   cmp      $63, %rax
   jnc      .2315
   shl      $2, %rax
   or       %rdx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   mov      %r12, %rdx
.2316:
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   dec      %rbx
   jnz      .2316
   jmp      .2308
.2315:
   mov      $252, %rax
   or       %rdx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   sub      $63, %rbx
   push     %rbx
   mov      $63, %rbx
   mov      %r12, %rdx
.2318:
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   dec      %rbx
   jnz      .2318
.2319:
   cmpq     $255, (%rsp)
   jc       .2320
   mov      $255, %rax
   mov      %rax, %rbx
   mov      PutBinBZ, %r10
   call     *%r10
.2321:
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   dec      %rbx
   jnz      .2321
   subq     $255, (%rsp)
   jmp      .2319
.2320:
   pop      %rbx
   mov      %rbx, %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2322:
   sub      $1, %rbx
   jc       .2308
   call     symByteCX_FACX
   mov      PutBinBZ, %r10
   call     *%r10
   jmp      .2322
.2308:
   pop      %r14
   pop      %r13
   ret
.2303:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      %rbx, %r14
   mov      $1, %rax
   mov      PutBinBZ, %r10
   call     *%r10
.2324:
   mov      (%r13), %rbx
   call     binPrintEZ
   mov      8(%r13), %r13
   cmp      $Nil, %r13
   jz       .2325
   cmp      %r14, %r13
   jnz      .2326
   mov      $2, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   jmp      .2325
.2326:
   testb    $0x0E, %r13b
   jz       .2324
   mov      $2, %rax
   mov      PutBinBZ, %r10
   call     *%r10
   mov      %r13, %rbx
   call     binPrintEZ
   pop      %r14
   pop      %r13
   ret
.2325:
   pop      %r14
   pop      %r13
   mov      $3, %rax
   mov      PutBinBZ, %r10
   jmp      *%r10

   .balign  16
   .globl  putTellBZ
putTellBZ:
   mov      %al, (%r15)
   inc      %r15
   mov      TellBuf, %r10
   lea      4095(%r10), %rax
   cmp      %rax, %r15
   jz       tellErr
   rep
   ret

   .balign  16
   .globl  tellBegZ_Z
tellBegZ_Z:
   mov      %r15, TellBuf
   add      $2, %r15
   movb     $1, (%r15)
   inc      %r15
   ret

   .globl  tellEndZ
tellEndZ:
   push     %r13
   push     %r14
   movb     $3, (%r15)
   inc      %r15
   mov      TellBuf, %r13
   mov      %r15, %rbx
   sub      %r13, %rbx
   mov      %rbx, %rax
   sub      $2, %rax
   mov      %ax, (%r13)
   push     %rax
   mov      Tell, %rdx
   cmp      %r12, %rdx
   jz       .2328
   call     wrBytesCEX_F
   jz       .2328
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, Tell
.2328:
   mov      Child, %r14
   mov      Children, %r15
.2330:
   sub      $48, %r15
   jc       .2331
   cmp      %r12, (%r14)
   jz       .2332
   mov      (%rsp), %rdx
   mov      TellBuf, %r10
   lea      2(%r10), %r13
   call     wrChildCXY
.2332:
   add      $48, %r14
   jmp      .2330
.2331:
   pop      %rax
   pop      %r14
   pop      %r13
   ret

   .globl  rdHear_FE
rdHear_FE:
   push     %r15
   mov      Hear, %rax
   shl      $3, %rax
   add      InFiles, %rax
   mov      (%rax), %r15
   movq     $getBinaryZ_FB, GetBinZ_FB
   mov      %r12, Extn
   call     binReadZ_FE
   pop      %r15
   ret

   .balign  16
   .globl  symByteCX_FACX
symByteCX_FACX:
   cmp      %r12, %rdx
   jnz      .2333
   cmpq     $2, %r13
   jz       ret
   testb    $0x02, %r13b
   jz       .2334
   mov      %r13, %rdx
   shr      $4, %rdx
   mov      $2, %r13
   jmp      .2333
.2334:
   mov      -4(%r13), %rdx
   mov      4(%r13), %r13
.2333:
   mov      %rdx, %rax
   shr      $8, %rdx
   or       %al, %al
   movzx    %al, %rax
   ret

   .balign  16
   .globl  symCharCX_FACX
symCharCX_FACX:
   call     symByteCX_FACX
   jz       ret
   cmp      $255, %al
   jz       .2336
   cmp      $128, %al
   jc       .2337
   testb    $32, %al
   jnz      .2338
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .2339
.2338:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   call     symByteCX_FACX
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.2339:
   call     symByteCX_FACX
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
.2337:
   rep
   ret
.2336:
   mov      $65536, %rax
   or       %rax, %rax
   ret

   .balign  16
   .globl  bufStringE_SZ
bufStringE_SZ:
   mov      %rsp, %r15
   pushq    (%r15)
   push     %r13
   cmp      $Nil, %rbx
   jz       .2340
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
.2341:
   call     symByteCX_FACX
   jz       .2340
   mov      %al, (%r15)
   inc      %r15
   testb    $7, %r15b
   jnz      .2341
   sub      $8, %rsp
   cmp      StkLimit, %rsp
   jc       stkErr
   mov      %rsp, %rdi
   lea      8(%rsp), %rsi
   mov      %r15, %rcx
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   sub      $8, %r15
   jmp      .2341
.2340:
   mov      %r12b, (%r15)
   add      $8, %r15
   andb     $~7, %r15b
   pop      %r13
   ret

   .balign  16
   .globl  pathStringE_SZ
pathStringE_SZ:
   mov      %rsp, %r15
   pushq    (%r15)
   push     %r13
   cmp      $Nil, %rbx
   jz       .2344
   mov      -8(%rbx), %r13
   call     nameX_X
   mov      %r12, %rdx
   call     symByteCX_FACX
   jz       .2344
   cmp      $43, %al
   jnz      .2346
   mov      %al, (%r15)
   inc      %r15
   call     symByteCX_FACX
.2346:
   cmp      $64, %al
   jz       .2347
.2348:
   mov      %al, (%r15)
   inc      %r15
   testb    $7, %r15b
   jnz      .2349
   sub      $8, %rsp
   mov      %rsp, %rdi
   lea      8(%rsp), %rsi
   mov      %r15, %rcx
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   sub      $8, %r15
.2349:
   call     symByteCX_FACX
   jnz      .2348
   jmp      .2344
.2347:
   push     %rbx
   mov      Home, %rbx
   cmp      %r12, %rbx
   jz       .2351
.2352:
   mov      (%rbx), %al
   mov      %al, (%r15)
   inc      %r15
   testb    $7, %r15b
   jnz      .2353
   sub      $8, %rsp
   mov      %rsp, %rdi
   lea      8(%rsp), %rsi
   mov      %r15, %rcx
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   sub      $8, %r15
.2353:
   inc      %rbx
   cmp      %r12b, (%rbx)
   jnz      .2352
.2351:
   pop      %rbx
.2354:
   call     symByteCX_FACX
   jz       .2344
   mov      %al, (%r15)
   inc      %r15
   testb    $7, %r15b
   jnz      .2354
   sub      $8, %rsp
   mov      %rsp, %rdi
   lea      8(%rsp), %rsi
   mov      %r15, %rcx
   sub      %rsi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   sub      $8, %r15
   jmp      .2354
.2344:
   mov      %r12b, (%r15)
   add      $8, %r15
   andb     $~7, %r15b
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPath
doPath:
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
   mov      %rsp, %rbx
   call     mkStrE_E
   mov      %r15, %rsp
   pop      %r15
   ret

   .balign  16
   .globl  charSymACX_CX
charSymACX_CX:
   cmp      $128, %rax
   jc       byteSymBCX_CX
   cmp      $2048, %rax
   jnc      .2357
   push     %rax
   shr      $6, %rax
   and      $31, %al
   orb      $192, %al
   call     byteSymBCX_CX
   pop      %rax
   and      $63, %al
   orb      $128, %al
   jmp      byteSymBCX_CX
.2357:
   cmp      $65536, %rax
   jnz      .2358
   mov      $255, %al
   jmp      byteSymBCX_CX
.2358:
   push     %rax
   shr      $12, %rax
   and      $15, %al
   orb      $224, %al
   call     byteSymBCX_CX
   mov      (%rsp), %rax
   shr      $6, %rax
   and      $63, %al
   orb      $128, %al
   call     byteSymBCX_CX
   pop      %rax
   and      $63, %al
   orb      $128, %al

   .balign  16
   .globl  byteSymBCX_CX
byteSymBCX_CX:
   movzx    %al, %rax
   testb    $0x04, %r13b
   jnz      .2359
   cmp      $60, %rdx
   jz       .2360
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, (%r13)
   add      $8, %rdx
   ret
.2360:
   mov      (%r13), %rdx
   shr      $4, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, (%r13)
   mov      %rax, %r13
   mov      $4, %rdx
   ret
.2359:
   cmp      $60, %rdx
   jz       .2361
   mov      %dl, %cl
   shl      %cl, %rax
   or       %rax, 4(%r13)
   add      $8, %rdx
   ret
.2361:
   mov      4(%r13), %rdx
   shr      $4, %rdx
   shl      $56, %rax
   or       %rax, %rdx
   call     boxNum_A
   mov      %rdx, -4(%rax)
   mov      %rax, 4(%r13)
   mov      %rax, %r13
   mov      $4, %rdx
   ret

   .balign  16
   .globl  currFdX_C
currFdX_C:
   mov      EnvInFrames, %rdx
   or       EnvOutFrames, %rdx
   jz       noFdErrX

   .globl  currFd_C
currFd_C:
   mov      EnvOutFrames, %rdx
   cmp      %r12, %rdx
   jnz      .2362
   mov      EnvInFrames, %rdx
   jmp      .2363
.2362:
   cmp      %r12, EnvInFrames
   jz       .2363
   cmp      EnvInFrames, %rdx
   jbe      .2363
   mov      EnvInFrames, %rdx
.2363:
   mov      8(%rdx), %rdx
   ret

   .globl  rdOpenEXY
rdOpenEXY:
   cmp      $Nil, %rbx
   jnz      .2366
   mov      %r12, 8(%r14)
   mov      %r12, 16(%r14)
   jmp      .2367
.2366:
   testb    $0x06, %bl
   jz       .2368
   testb    $0x02, %bl
   jz       cntErrEX
   mov      %r12, 16(%r14)
   mov      %rbx, %rax
   shr      $4, %rax
   jnc      .2369
   mov      EnvInFrames, %rdx
.2370:
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       badFdErrEX
   dec      %rax
   jnz      .2370
   mov      8(%rdx), %rax
.2369:
   mov      %rax, 8(%r14)
   shl      $3, %rax
   cmp      InFDs, %rax
   jnc      badFdErrEX
   add      InFiles, %rax
   mov      (%rax), %rax
   cmp      %r12, %rax
   jz       badFdErrEX
   jmp      .2367
.2368:
   push     %r15
   testb    $0x08, %bl
   jz       .2372
   movq     $1, 16(%r14)
   call     pathStringE_SZ
.2373:
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2374
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   mov      $1090, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2375
.2374:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   xor      %rsi, %rsi
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
.2375:
   cmp      %r12d, %eax
   jns      .2376
   call     errno_A
   cmp      $4, %rax
   jnz      openErrEX
   cmp      %r12, Signal
   jz       .2373
   call     sighandlerX
   jmp      .2373
.2376:
   mov      %rax, 8(%r14)
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2378
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2379
.2378:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
.2379:
   mov      8(%r14), %rdx
   call     initInFileCA_A
   mov      8(%r14), %rax
   call     closeOnExecAX
   mov      %r15, %rsp
   jmp      .2380
.2372:
   push     %r13
   push     %r12
   mov      %rbx, %r13
   mov      (%r13), %rbx
   call     xSymE_E
   call     pathStringE_SZ
.2381:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2382
   push     %r15
   mov      (%r13), %rbx
   call     xSymE_E
   call     bufStringE_SZ
   jmp      .2381
.2382:
   push     %r15
   mov      %rsp, %r15
   mov      %r15, %r13
   push     %r12
.2383:
   lea      8(%r13), %rax
   push     %rax
   mov      (%r13), %r13
   cmp      %r12, (%r13)
   jnz      .2383
   mov      8(%r13), %r13
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movl     (%rsp), %eax
   call     closeOnExecAX
   movl     4(%rsp), %eax
   call     closeOnExecAX
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, 16(%r14)
   cmp      %r12d, %eax
   js       forkErrX
   jnz      .2384
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     (%rsp), %eax
   call     closeAX
   movl     4(%rsp), %eax
   cmp      $1, %rax
   jz       .2385
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      $1, %rsi
   call     dup2
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     4(%rsp), %eax
   call     closeAX
.2385:
   mov      %rdx, %r12
   mov      8(%rsp), %rdi
   lea      8(%rsp), %rsi
   call     execvp
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      execErrS
.2384:
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     4(%rsp), %eax
   call     closeAX
   movl     (%rsp), %eax
   mov      %rax, 8(%r14)
   call     initInFileA_A
   pop      %rax
.2386:
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2386
   pop      %r13
.2380:
   pop      %r15
.2367:
   rep
   ret

   .globl  wrOpenEXY
wrOpenEXY:
   cmp      $Nil, %rbx
   jnz      .2387
   movq     $1, 8(%r14)
   mov      %r12, 16(%r14)
   jmp      .2388
.2387:
   testb    $0x06, %bl
   jz       .2389
   testb    $0x02, %bl
   jz       cntErrEX
   mov      %r12, 16(%r14)
   mov      %rbx, %rax
   shr      $4, %rax
   jnc      .2390
   mov      EnvOutFrames, %rdx
.2391:
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       badFdErrEX
   dec      %rax
   jnz      .2391
   mov      8(%rdx), %rax
.2390:
   mov      %rax, 8(%r14)
   shl      $3, %rax
   cmp      OutFDs, %rax
   jnc      badFdErrEX
   add      OutFiles, %rax
   mov      (%rax), %rax
   cmp      %r12, %rax
   jz       badFdErrEX
   jmp      .2388
.2389:
   push     %r15
   testb    $0x08, %bl
   jz       .2393
   movq     $1, 16(%r14)
   call     pathStringE_SZ
.2394:
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2395
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   mov      $1089, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2396
.2395:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $577, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
.2396:
   cmp      %r12d, %eax
   jns      .2397
   call     errno_A
   cmp      $4, %rax
   jnz      openErrEX
   cmp      %r12, Signal
   jz       .2394
   call     sighandlerX
   jmp      .2394
.2397:
   mov      %rax, 8(%r14)
   call     initOutFileA_A
   mov      8(%r14), %rax
   call     closeOnExecAX
   mov      %r15, %rsp
   jmp      .2399
.2393:
   push     %r13
   push     %r12
   mov      %rbx, %r13
   mov      (%r13), %rbx
   call     xSymE_E
   call     pathStringE_SZ
.2400:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2401
   push     %r15
   mov      (%r13), %rbx
   call     xSymE_E
   call     bufStringE_SZ
   jmp      .2400
.2401:
   push     %r15
   mov      %rsp, %r15
   mov      %r15, %r13
   push     %r12
.2402:
   lea      8(%r13), %rax
   push     %rax
   mov      (%r13), %r13
   cmp      %r12, (%r13)
   jnz      .2402
   mov      8(%r13), %r13
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movl     (%rsp), %eax
   call     closeOnExecAX
   movl     4(%rsp), %eax
   call     closeOnExecAX
   mov      %rdx, %r12
   call     fork
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, 16(%r14)
   cmp      %r12d, %eax
   js       forkErrX
   jnz      .2403
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     4(%rsp), %eax
   call     closeAX
   movl     (%rsp), %eax
   cmp      %r12, %rax
   jz       .2404
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     dup2
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     (%rsp), %eax
   call     closeAX
.2404:
   mov      %rdx, %r12
   mov      8(%rsp), %rdi
   lea      8(%rsp), %rsi
   call     execvp
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      execErrS
.2403:
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     (%rsp), %eax
   call     closeAX
   movl     4(%rsp), %eax
   mov      %rax, 8(%r14)
   call     initOutFileA_A
   pop      %rdx
.2405:
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2405
   pop      %r13
.2399:
   pop      %r15
.2388:
   rep
   ret

   .globl  ctOpenEXY
ctOpenEXY:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jnz      .2406
   movq     $-1, 8(%r14)
   call     currFdX_C
   call     rdLockFileC
   jmp      .2407
.2406:
   cmp      $TSym, %rbx
   jnz      .2408
   movq     $-1, 8(%r14)
   call     currFdX_C
   call     wrLockFileC
   jmp      .2407
.2408:
   push     %r15
   call     pathStringE_SZ
.2410:
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2411
   mov      %rdx, %r12
   lea      1(%rsp), %rdi
   mov      $66, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2412
.2411:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $66, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
.2412:
   cmp      %r12d, %eax
   jns      .2413
   call     errno_A
   cmp      $4, %rax
   jnz      openErrEX
   cmp      %r12, Signal
   jz       .2410
   call     sighandlerX
   jmp      .2410
.2413:
   mov      %r15, %rsp
   pop      %r15
   mov      %rax, 8(%r14)
   mov      %rax, %rdx
   mov      (%rsp), %al
   cmp      $43, %al
   jnz      .2415
   call     rdLockFileC
   jmp      .2416
.2415:
   call     wrLockFileC
.2416:
   mov      8(%r14), %rax
   call     closeOnExecAX
.2407:
   rep
   ret

   .balign  16
   .globl  getStdin_A
getStdin_A:
   push     %r15
   mov      InFile, %r15
   cmp      %r12, %r15
   jz       getStdin_A_90
   mov      InFiles, %r10
   cmp      (%r10), %r15
   jz       .2418
   mov      8(%r15), %rax
   cmp      16(%r15), %rax
   jnz      .2419
   call     slowZ_F
   jz       getStdin_A_90
   mov      %r12, %rax
.2419:
   incq     8(%r15)
   add      %r15, %rax
   mov      56(%rax), %al
   cmp      $10, %al
   jnz      .2420
   incq     32(%r15)
.2420:
   movzx    %al, %rax
   jmp      .2430
.2418:
   push     %rdx
   push     %rbx
   push     %r13
   testb    $0x0E, Led
   jz       .2422
   mov      %r12, %rdx
   mov      $-1, %rbx
   mov      %r12, %r13
   call     waitFdCEX_A
   call     stdinByte_FA
   jnc      .2424
   mov      $-1, %rax
   jmp      .2424
.2422:
   mov      LineC, %rdx
   cmp      %r12, %rdx
   js       .2425
   mov      LineX, %r13
   jmp      .2426
.2425:
   mov      Led, %rbx
   call     runE_E
   cmp      $Nil, %rbx
   jnz      .2427
   mov      $2, %r13
   jmp      .2428
.2427:
   mov      -8(%rbx), %r13
   call     nameX_X
.2428:
   mov      %r12, %rdx
.2426:
   call     symByteCX_FACX
   jnz      .2429
   mov      $10, %rax
   mov      $-1, %rdx
.2429:
   mov      %r13, LineX
   mov      %rdx, LineC
.2424:
   pop      %r13
   pop      %rbx
   pop      %rdx
   jmp      .2430
getStdin_A_90:
   mov      $-1, %rax
.2430:
   mov      %rax, Chr
   pop      %r15
   ret

   .balign  16
   .globl  getParse_A
getParse_A:
   push     %rdx
   push     %r13
   mov      EnvParseX, %r13
   mov      EnvParseC, %rdx
   call     symByteCX_FACX
   jnz      .2431
   mov      EnvParseEOF, %rax
   shr      $8, %rax
   mov      %rax, EnvParseEOF
   jz       .2432
   movzx    %al, %rax
   jmp      .2431
.2432:
   dec      %rax
.2431:
   mov      %rax, Chr
   mov      %r13, EnvParseX
   mov      %rdx, EnvParseC
   pop      %r13
   pop      %rdx
   ret

   .globl  pushInFilesY
pushInFilesY:
   mov      InFile, %rax
   cmp      %r12, %rax
   jz       .2434
   mov      Chr, %r10
   mov      %r10, 24(%rax)
.2434:
   mov      8(%r14), %rax
   shl      $3, %rax
   add      InFiles, %rax
   mov      (%rax), %rax
   mov      %rax, InFile
   cmp      %r12, %rax
   jz       .2435
   mov      24(%rax), %rax
   jmp      .2436
.2435:
   mov      $-1, %rax
.2436:
   mov      %rax, Chr
   mov      Get_A, %r10
   mov      %r10, 24(%r14)
   movq     $getStdin_A, Get_A
   mov      EnvInFrames, %r10
   mov      %r10, (%r14)
   mov      %r14, EnvInFrames
   ret

   .globl  pushOutFilesY
pushOutFilesY:
   mov      8(%r14), %rax
   shl      $3, %rax
   add      OutFiles, %rax
   mov      (%rax), %r10
   mov      %r10, OutFile
   mov      PutB, %r10
   mov      %r10, 24(%r14)
   movq     $putStdoutB, PutB
   mov      EnvOutFrames, %r10
   mov      %r10, (%r14)
   mov      %r14, EnvOutFrames
   ret

   .globl  pushCtlFilesY
pushCtlFilesY:
   mov      EnvCtlFrames, %r10
   mov      %r10, (%r14)
   mov      %r14, EnvCtlFrames
   ret

   .globl  popInFiles
popInFiles:
   mov      EnvInFrames, %rdx
   cmp      %r12, 16(%rdx)
   jz       .2437
   mov      %rdx, %r12
   mov      8(%r12), %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%rdx), %rax
   call     closeInFileA
   cmpq     $1, 16(%rdx)
   jbe      .2442
.2439:
   mov      %rdx, %r12
   mov      16(%r12), %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2442
   call     errno_A
   cmp      $4, %rax
   jnz      closeErrX
   cmp      %r12, Signal
   jz       .2439
   call     sighandler0
   jmp      .2439
.2437:
   mov      InFile, %rax
   cmp      %r12, %rax
   jz       .2442
   mov      Chr, %r10
   mov      %r10, 24(%rax)
.2442:
   mov      24(%rdx), %r10
   mov      %r10, Get_A
   mov      (%rdx), %rdx
   mov      %rdx, EnvInFrames
   cmp      %r12, %rdx
   jnz      .2444
   mov      InFiles, %r10
   mov      (%r10), %rax
   jmp      .2445
.2444:
   mov      8(%rdx), %rax
   shl      $3, %rax
   add      InFiles, %rax
   mov      (%rax), %rax
.2445:
   mov      %rax, InFile
   cmp      %r12, %rax
   jz       .2446
   mov      24(%rax), %rax
   jmp      .2447
.2446:
   mov      $-1, %rax
.2447:
   mov      %rax, Chr
   ret

   .globl  popOutFiles
popOutFiles:
   mov      OutFile, %rax
   call     flushA_F
   mov      EnvOutFrames, %rdx
   cmp      %r12, 16(%rdx)
   jz       .2448
   mov      %rdx, %r12
   mov      8(%r12), %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%rdx), %rax
   call     closeOutFileA
   cmpq     $1, 16(%rdx)
   jbe      .2448
.2450:
   mov      %rdx, %r12
   mov      16(%r12), %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     waitpid
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2448
   call     errno_A
   cmp      $4, %rax
   jnz      closeErrX
   cmp      %r12, Signal
   jz       .2450
   call     sighandler0
   jmp      .2450
.2448:
   mov      24(%rdx), %r10
   mov      %r10, PutB
   mov      (%rdx), %rdx
   mov      %rdx, EnvOutFrames
   cmp      %r12, %rdx
   jnz      .2453
   mov      OutFiles, %r10
   mov      8(%r10), %rax
   jmp      .2454
.2453:
   mov      8(%rdx), %rax
   shl      $3, %rax
   add      OutFiles, %rax
   mov      (%rax), %rax
.2454:
   mov      %rax, OutFile
   ret

   .globl  popCtlFiles
popCtlFiles:
   mov      EnvCtlFrames, %rdx
   cmp      %r12, 8(%rdx)
   js       .2455
   mov      %rdx, %r12
   mov      8(%r12), %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      .2456
.2455:
   call     currFd_C
   mov      $2, %rax
   call     unLockFileAC
.2456:
   mov      EnvCtlFrames, %r10
   mov      (%r10), %r10
   mov      %r10, EnvCtlFrames
   ret

   .balign  16
   .globl  getChar_A
getChar_A:
   mov      Chr, %rax
   cmp      $255, %al
   jz       .2457
   cmp      $128, %al
   jc       .2458
   testb    $32, %al
   jnz      .2459
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .2460
.2459:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   mov      Get_A, %r10
   call     *%r10
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.2460:
   mov      Get_A, %r10
   call     *%r10
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
.2458:
   rep
   ret
.2457:
   mov      $65536, %rax
   ret

   .balign  16
   .globl  skipC_A
skipC_A:
   mov      Chr, %rax
.2461:
   cmp      %r12, %rax
   js       .2462
.2463:
   cmp      $32, %al
   ja       .2464
   mov      Get_A, %r10
   call     *%r10
   cmp      %r12, %rax
   js       ret
   jmp      .2463
.2464:
   cmp      %rdx, %rax
   jnz      .2462
   mov      Get_A, %r10
   call     *%r10
   cmp      $35, %rdx
   jnz      skipC_A_10
   cmp      $123, %al
   jz       .2469
skipC_A_10:
   cmp      $10, %al
   jz       .2468
   cmp      %r12, %rax
   js       ret
   mov      Get_A, %r10
   call     *%r10
   jmp      skipC_A_10
.2469:
   mov      Get_A, %r10
   call     *%r10
   cmp      %r12, %rax
   js       ret
   cmp      $125, %al
   jnz      .2469
   mov      Get_A, %r10
   call     *%r10
   cmp      $35, %al
   jnz      .2469
.2468:
   mov      Get_A, %r10
   call     *%r10
   jmp      .2461
.2462:
   rep
   ret

   .balign  16
   .globl  testEscA_F
testEscA_F:
.2472:
   cmp      %r12, %rax
   jns      .2473
   clc
   ret
.2473:
   cmp      $94, %al
   jnz      .2474
   mov      Get_A, %r10
   call     *%r10
   cmp      $63, %al
   jnz      .2475
   mov      $127, %al
   jmp      testEscA_F_10
.2475:
   and      $31, %al
testEscA_F_10:
   stc
   ret
.2474:
   cmp      $92, %al
   jnz      testEscA_F_10
   mov      Get_A, %r10
   call     *%r10
   cmp      $10, %al
   jnz      testEscA_F_10
.2477:
   mov      Get_A, %r10
   call     *%r10
   cmp      $32, %al
   jz       .2477
   cmp      $9, %al
   jz       .2477
   jmp      .2472

   .balign  16
   .globl  anonymousX_FE
anonymousX_FE:
   mov      %r12, %rdx
   call     symByteCX_FACX
   cmp      $36, %al
   jnz      Ret
   call     symByteCX_FACX
   cmp      $49, %al
   jc       .2478
   cmp      $55, %al
   ja       .2478
   sub      $48, %al
   mov      %rax, %rbx
   call     symByteCX_FACX
.2480:
   cmp      $48, %al
   jc       .2478
   cmp      $55, %al
   ja       .2478
   shl      $3, %rbx
   sub      $48, %al
   add      %rax, %rbx
   call     symByteCX_FACX
   jnz      .2480
   shl      $4, %rbx
   orb      $8, %bl
   or       %r12, %r12
   ret
.2478:
   rep
   ret

   .globl  rdAtomBYL_E
rdAtomBYL_E:
   mov      $4, %rdx
   lea      8(%rbp), %r13
   call     byteSymBCX_CX
   mov      %r14, %rax
.2483:
   cmp      %r12, %rax
   js       rdAtomBYL_E_10
   cld
   mov      $Delim, %rdi
   mov      $(DelimEnd-Delim), %rcx
   repnz scasb
   jz       rdAtomBYL_E_10
   cmp      $92, %al
   jnz      .2485
   mov      Get_A, %r10
   call     *%r10
.2485:
   call     byteSymBCX_CX
   mov      Get_A, %r10
   call     *%r10
   jmp      .2483
rdAtomBYL_E_10:
   mov      8(%rbp), %r13
   mov      Scl, %rax
   shr      $4, %rax
   mov      %r12, Sep3
   movq     $46, Sep0
   call     symToNumXA_FE
   jc       .2486
   mov      8(%rbp), %r13
   call     anonymousX_FE
   jz       .2486
   mov      8(%rbp), %r13
   call     findSymX_E
.2486:
   rep
   ret
Delim:
   .ascii   " \t\n\r\"'(),[]`~{}"
DelimEnd:

   .globl  rdList_E
rdList_E:
   cmp      StkLimit, %rsp
   jc       stkErr
   mov      Get_A, %r10
   call     *%r10
.2488:
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jnz      .2489
   mov      Get_A, %r10
   call     *%r10
   mov      $Nil, %rbx
   ret
.2489:
   cmp      $93, %al
   jz       retNil
   cmp      $126, %al
   jz       .2490
   mov      %r12, %rax
   call     readA_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   push     %rbp
   mov      %rsp, %rbp
   mov      %rax, %rbx
   jmp      rdList_E_10
.2490:
   mov      Get_A, %r10
   call     *%r10
   mov      %r12, %rax
   call     readA_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, 8(%rbp)
   testb    $0x0E, %bl
   jnz      .2491
.2492:
   testb    $0x0E, 8(%rbx)
   jnz      rdList_E_10
   mov      8(%rbx), %rbx
   jmp      .2492
.2491:
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2488
rdList_E_10:
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jnz      .2495
   mov      Get_A, %r10
   call     *%r10
   jmp      rdList_E_90
.2495:
   cmp      $93, %al
   jz       rdList_E_90
   cmp      $46, %al
   jnz      .2496
   mov      Get_A, %r10
   call     *%r10
   cld
   mov      $Delim, %rdi
   mov      $(DelimEnd-Delim), %rcx
   repnz scasb
   jnz      .2497
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jz       rdList_E_20
   cmp      $93, %al
   jnz      .2498
rdList_E_20:
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   jmp      .2499
.2498:
   push     %rbx
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, %rax
   pop      %rbx
   mov      %rax, 8(%rbx)
.2499:
   mov      $35, %rdx
   call     skipC_A
   cmp      $41, %al
   jnz      .2500
   mov      Get_A, %r10
   call     *%r10
   jmp      rdList_E_90
.2500:
   cmp      $93, %al
   jz       rdList_E_90
   mov      8(%rbp), %rbx
   jmp      badDotErrE
.2497:
   push     %r13
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      %rax, %r14
   mov      $46, %al
   call     rdAtomBYL_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   pop      %rbx
   mov      %rax, 8(%rbx)
   mov      %rax, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   jmp      rdList_E_10
.2496:
   cmp      $126, %al
   jz       .2502
   push     %rbx
   mov      %r12, %rax
   call     readA_E
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   pop      %rbx
   mov      %rax, 8(%rbx)
   mov      %rax, %rbx
   jmp      rdList_E_10
.2502:
   mov      Get_A, %r10
   call     *%r10
   push     %rbx
   mov      %r12, %rax
   call     readA_E
   mov      (%rsp), %rax
   mov      %rbx, 8(%rax)
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rax
   mov      %rbx, 8(%rax)
   mov      %rax, %rbx
.2504:
   testb    $0x0E, 8(%rbx)
   jnz      rdList_E_10
   mov      8(%rbx), %rbx
   jmp      .2504
rdList_E_90:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .globl  readA_E
readA_E:
   push     %r13
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rax
   mov      $35, %rdx
   call     skipC_A
   cmp      %r12, %rax
   jns      .2506
   cmp      %r12, -8(%rbp)
   jz       eofErr
   mov      $Nil, %rbx
   jmp      readA_E_99
.2506:
   cmp      %r12, -8(%rbp)
   jz       .2507
   mov      InFile, %rdx
   cmp      %r12, %rdx
   jz       .2507
   mov      32(%rdx), %r10
   mov      %r10, 40(%rdx)
.2507:
   cmp      $40, %al
   jnz      .2509
   call     rdList_E
   cmp      %r12, -8(%rbp)
   jz       readA_E_99
   cmpq     $93, Chr
   jnz      readA_E_99
   mov      Get_A, %r10
   call     *%r10
   jmp      readA_E_99
.2509:
   cmp      $91, %al
   jnz      .2512
   call     rdList_E
   cmpq     $93, Chr
   jnz      suparErrE
   mov      Get_A, %r10
   call     *%r10
   jmp      readA_E_99
.2512:
   cmp      $39, %al
   jnz      .2513
   mov      Get_A, %r10
   call     *%r10
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, %rdx
   call     consC_E
   movq     $Quote, (%rbx)
   mov      %rdx, 8(%rbx)
   jmp      readA_E_99
.2513:
   cmp      $44, %al
   jnz      .2514
   mov      Get_A, %r10
   call     *%r10
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, 8(%rbp)
   mov      $Uni, %r13
   mov      %rbx, %r14
   call     idxPutXY_E
   testb    $0x0E, %bl
   jnz      .2515
   mov      (%rbx), %rbx
   jmp      readA_E_99
.2515:
   mov      %r14, %rbx
   jmp      readA_E_99
.2514:
   cmp      $96, %al
   jnz      .2517
   mov      Get_A, %r10
   call     *%r10
   mov      %r12, %rax
   call     readA_E
   mov      %rbx, 8(%rbp)
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      readA_E_99
.2517:
   cmp      $34, %al
   jnz      .2518
   mov      Get_A, %r10
   call     *%r10
   cmp      $34, %al
   jnz      .2519
   mov      Get_A, %r10
   call     *%r10
   mov      $Nil, %rbx
   jmp      readA_E_99
.2519:
   call     testEscA_F
   jnc      eofErr
   mov      $4, %rdx
   lea      8(%rbp), %r13
.2520:
   call     byteSymBCX_CX
   mov      Get_A, %r10
   call     *%r10
   cmp      $34, %al
   jz       .2521
   call     testEscA_F
   jnc      eofErr
   jmp      .2520
.2521:
   mov      Get_A, %r10
   call     *%r10
   mov      8(%rbp), %r13
   mov      $Transient, %r14
   mov      %r12, %rbx
   call     internEXY_FE
   jmp      readA_E_99
.2518:
   cmp      $123, %al
   jnz      .2522
   mov      Get_A, %r10
   call     *%r10
   cmp      $125, %al
   jnz      .2523
   mov      Get_A, %r10
   call     *%r10
   call     cons_E
   movq     $2, (%rbx)
   orb      $8, %bl
   movq     $Nil, (%rbx)
   jmp      readA_E_99
.2523:
   mov      %r12, %rbx
.2524:
   cmp      $64, %al
   jc       .2525
   cmp      $79, %al
   ja       badInputErrB
   sub      $64, %al
   shl      $4, %rbx
   add      %rax, %rbx
   mov      Get_A, %r10
   call     *%r10
   jmp      .2524
.2525:
   cmp      $48, %al
   jc       badInputErrB
   cmp      $55, %al
   ja       badInputErrB
   sub      $48, %al
   movzx    %al, %rax
   mov      %rax, %rdx
.2526:
   mov      Get_A, %r10
   call     *%r10
   cmp      $125, %al
   jz       .2527
   cmp      $48, %al
   jc       badInputErrB
   cmp      $55, %al
   ja       badInputErrB
   sub      $48, %al
   shl      $3, %rdx
   add      %rax, %rdx
   jmp      .2526
.2527:
   mov      Get_A, %r10
   call     *%r10
   call     extNmCE_X
   call     externX_E
   jmp      readA_E_99
.2522:
   cmp      $41, %al
   jz       badInputErrB
   cmp      $93, %al
   jz       badInputErrB
   cmp      $126, %al
   jz       badInputErrB
   cmp      $92, %al
   jnz      .2528
   mov      Get_A, %r10
   call     *%r10
.2528:
   mov      %rax, %r14
   mov      Get_A, %r10
   call     *%r10
   xchg     %r14, %rax
   call     rdAtomBYL_E
readA_E_99:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   pop      %r13
   ret

   .globl  readC_E
readC_E:
   cmp      %r12, Chr
   jnz      .2529
   mov      Get_A, %r10
   call     *%r10
.2529:
   cmp      Chr, %rdx
   jnz      .2530
   mov      $Nil, %rbx
   jmp      .2531
.2530:
   mov      $1, %rax
   call     readA_E
   push     %rbx
   mov      Chr, %rax
.2532:
   cmp      %r12, %rax
   jle      .2533
   cmp      $32, %al
   jz       readC_E_10
   cmp      $9, %al
   jz       readC_E_10
   cmp      $41, %al
   jz       readC_E_10
   cmp      $93, %al
   jnz      .2533
readC_E_10:
   mov      Get_A, %r10
   call     *%r10
   jmp      .2532
.2533:
   pop      %rbx
.2531:
   rep
   ret

   .globl  tokenCE_E
tokenCE_E:
   cmp      %r12, Chr
   jnz      .2534
   mov      Get_A, %r10
   call     *%r10
.2534:
   call     skipC_A
   cmp      %r12, %rax
   js       retNull
   cmp      $34, %al
   jnz      .2535
   mov      Get_A, %r10
   call     *%r10
   cmp      $34, %al
   jnz      .2536
   mov      Get_A, %r10
   call     *%r10
   mov      $Nil, %rbx
   ret
.2536:
   call     testEscA_F
   jnc      retNil
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.2537:
   call     byteSymBCX_CX
   mov      Get_A, %r10
   call     *%r10
   cmp      $34, %al
   jnz      .2538
   mov      Get_A, %r10
   call     *%r10
   jmp      .2539
.2538:
   call     testEscA_F
   jc       .2537
.2539:
   mov      8(%rbp), %r13
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      consSymX_E
.2535:
   cmp      $48, %al
   jc       .2540
   cmp      $57, %al
   ja       .2540
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.2542:
   call     byteSymBCX_CX
   mov      Get_A, %r10
   call     *%r10
   cmp      $46, %al
   jz       .2542
   cmp      $48, %al
   jc       .2543
   cmp      $57, %al
   jbe      .2542
.2543:
   mov      8(%rbp), %r13
   mov      Scl, %rax
   shr      $4, %rax
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r12, Sep3
   movq     $46, Sep0
   jmp      symToNumXA_FE
.2540:
   push     %r14
   push     %r15
   mov      %rax, %r14
   call     bufStringE_SZ
   push     %rax
   cld
   xor      %rcx, %rcx
   not      %rcx
   lea      8(%rsp), %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, (%rsp)
   mov      %r14, %rax
   cmp      $97, %al
   jc       .2544
   cmp      $122, %al
   jbe      tokenCE_E_10
.2544:
   cmp      $65, %al
   jc       .2545
   cmp      $90, %al
   jbe      tokenCE_E_10
.2545:
   cmp      $92, %al
   jnz      .2546
   mov      Get_A, %r10
   call     *%r10
   jmp      tokenCE_E_10
.2546:
   cld
   lea      8(%rsp), %rdi
   mov      (%rsp), %rcx
   repnz scasb
   jnz      .2547
tokenCE_E_10:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      $4, %rdx
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
.2548:
   call     byteSymBCX_CX
   mov      Get_A, %r10
   call     *%r10
   cmp      $97, %al
   jc       .2549
   cmp      $122, %al
   jbe      .2548
.2549:
   cmp      $65, %al
   jc       .2550
   cmp      $90, %al
   jbe      .2548
.2550:
   cmp      $48, %al
   jc       .2551
   cmp      $57, %al
   jbe      .2548
.2551:
   cmp      $92, %al
   jnz      .2552
   mov      Get_A, %r10
   call     *%r10
   jmp      .2548
.2552:
   cld
   lea      32(%rsp), %rdi
   mov      24(%rsp), %rcx
   repnz scasb
   jz       .2548
   mov      8(%rbp), %r13
   call     findSymX_E
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2553
.2547:
   call     getChar_A
   call     mkCharA_A
   mov      %rax, %rbx
   mov      Get_A, %r10
   call     *%r10
.2553:
   mov      %r15, %rsp
   pop      %r15
   pop      %r14
   ret

   .balign  16
   nop
   nop
   .globl  doRead
doRead:
   testb    $0x0E, 8(%rbx)
   jz       .2554
   mov      %r12, %rdx
   call     readC_E
   jmp      .2555
.2554:
   push     %r13
   mov      8(%rbx), %r13
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x08, %bl
   jz       symErrEX
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x08, %bl
   jz       symErrEX
   call     firstCharE_A
   mov      %rax, %rdx
   mov      8(%rbp), %rbx
   call     tokenCE_E
   cmp      %r12, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r13
.2555:
   cmpq     $10, Chr
   jnz      .2556
   mov      InFiles, %r10
   mov      (%r10), %r10
   cmp      %r10, InFile
   jnz      .2556
   mov      %r12, Chr
.2556:
   rep
   ret

   .balign  16
   .globl  inFilesA_FC
inFilesA_FC:
   mov      %rax, %rdx
   shl      $3, %rdx
   add      InFiles, %rdx
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   ret

   .balign  16
   .globl  inReadyC_F
inReadyC_F:
   mov      16(%rdx), %r10
   cmp      %r10, 8(%rdx)
   ret

   .balign  16
   .globl  inReadyA_FC
inReadyA_FC:
   mov      %rax, %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jnc      ret
   add      InFiles, %rdx
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       retnc
   mov      16(%rdx), %r10
   cmp      %r10, 8(%rdx)
   ret

   .balign  16
   .globl  rdSetRdyASL_F
rdSetRdyASL_F:
   mov      %rax, %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jnc      rdSetASL_F
   add      InFiles, %rdx
   mov      (%rdx), %rdx
   cmp      %r12, %rdx
   jz       rdSetASL_F
   call     inReadyC_F
   jnz      .2558
   lea      -24(%rbp), %r15
.2559:
   sub      $8, %r15
   cmp      %rsp, %r15
   jbe      retz
   cmp      (%r15), %eax
   jnz      .2559
   movzwq   6(%r15), %rax
   testb    $17, %al
   jz       .2558
   call     slowNbC_FA
   jnc      retnz
   or       %r12, %r12
.2558:
   rep
   ret

   .balign  16
   .globl  rdSetASL_F
rdSetASL_F:
   lea      -24(%rbp), %r15
.2561:
   sub      $8, %r15
   cmp      %rsp, %r15
   jbe      retz
   cmp      (%r15), %eax
   jnz      .2561
   movzwq   6(%r15), %rax
   testb    $17, %al
   ret

   .balign  16
   .globl  wrSetASL_F
wrSetASL_F:
   lea      -24(%rbp), %r15
.2562:
   sub      $8, %r15
   cmp      %rsp, %r15
   jbe      retz
   cmp      (%r15), %eax
   jnz      .2562
   movzwq   6(%r15), %rax
   testb    $4, %al
   ret

   .globl  waitFdCEX_A
waitFdCEX_A:
   push     %r14
   push     %r15
   pushq    EnvTask
   push     %rbp
   mov      %rsp, %rbp
   pushq    At
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   push     %rbx
   push     %rbx
.2563:
   mov      %r12, %r15
   mov      -8(%rbp), %rax
   cmp      %r12, %rax
   js       .2564
   call     inReadyA_FC
   jnc      .2565
   mov      %r12, -24(%rbp)
   jmp      .2564
.2565:
   sub      $8, %rsp
   mov      %eax, (%rsp)
   mov      $1, %rax
   mov      %ax, 4(%rsp)
   inc      %r15
.2564:
   mov      Run, %r14
   mov      %r14, 8(%rbp)
   mov      %r14, EnvTask
.2567:
   testb    $0x0E, %r14b
   jnz      .2568
   mov      (%r14), %rbx
   mov      32(%rbp), %rax
.2569:
   testb    $0x0E, %al
   jnz      .2570
   cmp      (%rax), %rbx
   jz       waitFdCEX_A_10
   mov      8(%rax), %rax
   jmp      .2569
.2570:
   mov      (%rbx), %rax
   shr      $4, %rax
   jnc      .2571
   mov      8(%rbx), %r10
   mov      (%r10), %rax
   shr      $4, %rax
   cmp      -24(%rbp), %rax
   jnc      waitFdCEX_A_10
   mov      %rax, -24(%rbp)
   jmp      waitFdCEX_A_10
.2571:
   cmp      -8(%rbp), %rax
   jz       waitFdCEX_A_10
   call     inReadyA_FC
   jnc      .2575
   mov      %r12, -24(%rbp)
   jmp      waitFdCEX_A_10
.2575:
   sub      $8, %rsp
   mov      %eax, (%rsp)
   mov      $1, %rax
   mov      %ax, 4(%rsp)
   inc      %r15
waitFdCEX_A_10:
   mov      8(%r14), %r14
   jmp      .2567
.2568:
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .2577
   cmp      -8(%rbp), %rax
   jz       .2577
   call     inFilesA_FC
   jz       .2577
   call     inReadyC_F
   jz       .2580
   mov      %r12, -24(%rbp)
   jmp      .2577
.2580:
   sub      $8, %rsp
   mov      %eax, (%rsp)
   mov      $1, %rax
   mov      %ax, 4(%rsp)
   inc      %r15
.2577:
   mov      Spkr, %rax
   cmp      %r12, %rax
   jz       .2582
   sub      $8, %rsp
   mov      %eax, (%rsp)
   mov      $1, %rax
   mov      %ax, 4(%rsp)
   inc      %r15
.2582:
   mov      Child, %r14
   mov      Children, %rbx
.2583:
   sub      $48, %rbx
   jc       .2584
   cmp      %r12, (%r14)
   jz       .2585
   sub      $8, %rsp
   mov      8(%r14), %rax
   mov      %eax, (%rsp)
   mov      $1, %rax
   mov      %ax, 4(%rsp)
   inc      %r15
   cmp      %r12, 32(%r14)
   jz       .2585
   sub      $8, %rsp
   mov      16(%r14), %rax
   mov      %eax, (%rsp)
   mov      $4, %rax
   mov      %ax, 4(%rsp)
   inc      %r15
.2585:
   add      $48, %r14
   jmp      .2583
.2584:
   cmp      StkLimit, %rsp
   jc       stkErrX
   call     msec_A
   mov      %rax, %rbx
.2587:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      %r15, %rsi
   mov      -24(%rbp), %rdx
   call     poll
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2588
   call     errno_A
   cmp      $4, %rax
   jz       .2589
   movq     $Nil, Run
   jmp      selectErrX
.2589:
   cmp      %r12, Signal
   jz       .2587
   call     sighandlerX
   jmp      .2587
.2588:
   call     msec_A
   sub      %rbx, %rax
   mov      %rax, -24(%rbp)
   mov      %r12b, Flg
   mov      Child, %r14
   mov      Children, %r15
   push     %r13
.2591:
   sub      $48, %r15
   jc       .2592
   cmp      %r12, (%r14)
   jz       .2593
   push     %r15
   mov      8(%r14), %rax
   call     rdSetASL_F
   jz       .2594
   mov      8(%r14), %rdx
   mov      $2, %rbx
   mov      $Buf, %r13
   call     rdBytesNbCEX_F
   js       .2594
   jnz      .2596
   call     clsChildY
   pop      %r15
   jmp      .2591
.2596:
   sub      $4096, %rsp
   push     %r14
   mov      8(%r14), %rdx
   movzwq   Buf, %rax
   mov      %rax, %rbx
   lea      16(%rsp), %r13
   call     rdBytesCEX_F
   jz       .2597
   movb     $1, Flg
   mov      Child, %r14
   mov      Children, %r15
.2598:
   cmp      (%rsp), %r14
   jz       .2599
   cmp      %r12, (%r14)
   jz       .2599
   movzwq   Buf, %rax
   mov      %rax, %rdx
   lea      16(%rsp), %r13
   call     wrChildCXY
.2599:
   add      $48, %r14
   sub      $48, %r15
   jnz      .2598
   jmp      .2601
.2597:
   call     clsChildY
   pop      %r14
   add      $4096, %rsp
   pop      %r15
   jmp      .2591
.2601:
   pop      %r14
   add      $4096, %rsp
.2594:
   mov      16(%r14), %rax
   call     wrSetASL_F
   jz       .2602
   mov      16(%r14), %rdx
   mov      40(%r14), %r13
   add      24(%r14), %r13
   movzwq   (%r13), %rax
   mov      %rax, %rbx
   add      $2, %r13
   push     %rbx
   call     wrBytesCEX_F
   pop      %rbx
   jnz      .2603
   add      24(%r14), %rbx
   add      $2, %rbx
   mov      %rbx, 24(%r14)
   add      %rbx, %rbx
   cmp      32(%r14), %rbx
   jc       .2604
   mov      24(%r14), %r10
   sub      %r10, 32(%r14)
   jz       .2604
   mov      40(%r14), %r13
   add      24(%r14), %r13
   mov      40(%r14), %rdi
   mov      %r13, %rsi
   mov      32(%r14), %rcx
   cld
   rep movsb
   mov      40(%r14), %rax
   mov      32(%r14), %rbx
   call     allocAE_A
   mov      %rax, 40(%r14)
.2604:
   mov      %r12, 24(%r14)
   jmp      .2602
.2603:
   call     clsChildY
.2602:
   pop      %r15
.2593:
   add      $48, %r14
   jmp      .2591
.2592:
   cmp      %r12b, Flg
   jnz      .2607
   mov      Spkr, %rax
   cmp      %r12, %rax
   jz       .2607
   call     rdSetASL_F
   jz       .2607
   mov      Spkr, %rdx
   mov      $8, %rbx
   mov      $Buf, %r13
   call     rdBytesNbCEX_F
   jle      .2607
   mov      Child, %r14
   add      Buf, %r14
   cmp      %r12, (%r14)
   jz       .2607
   mov      $2, %rdx
   mov      $TBuf, %r13
   call     wrChildCXY
.2607:
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .2612
   cmp      -8(%rbp), %rax
   jz       .2612
   call     rdSetRdyASL_F
   jz       .2612
   call     rdHear_FE
   jc       .2615
   cmp      $TSym, %rbx
   jnz      .2616
   movb     $1, Sync
   jmp      .2612
.2616:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2612
.2615:
   call     closeAX
   mov      Hear, %rax
   call     closeInFileA
   mov      Hear, %rax
   call     closeOutFileA
   mov      %r12, Hear
.2612:
   mov      8(%rbp), %r14
.2619:
   testb    $0x0E, %r14b
   jnz      .2620
   mov      (%r14), %rbx
   mov      32(%rbp), %rax
.2621:
   testb    $0x0E, %al
   jnz      .2622
   cmp      (%rax), %rbx
   jz       waitFdCEX_A_20
   mov      8(%rax), %rax
   jmp      .2621
.2622:
   mov      (%rbx), %rax
   shr      $4, %rax
   jnc      .2623
   mov      8(%rbx), %rdx
   mov      (%rdx), %rax
   shr      $4, %rax
   sub      -24(%rbp), %rax
   jc       .2624
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rdx)
   jmp      waitFdCEX_A_20
.2624:
   mov      (%rbx), %rax
   mov      %rax, (%rdx)
   mov      (%rbx), %r10
   mov      %r10, At
   mov      8(%rdx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   jmp      waitFdCEX_A_20
.2623:
   cmp      -8(%rbp), %rax
   jz       waitFdCEX_A_20
   call     rdSetRdyASL_F
   jz       waitFdCEX_A_20
   mov      (%rbx), %r10
   mov      %r10, At
   mov      8(%rbx), %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
waitFdCEX_A_20:
   mov      8(%r14), %r14
   jmp      .2619
.2620:
   pop      %r13
   cmp      %r12, Signal
   jz       .2629
   call     sighandlerX
.2629:
   mov      -16(%rbp), %rax
   or       %rax, %rax
   jle      .2630
   sub      -24(%rbp), %rax
   jns      .2631
   xor      %rax, %rax
.2631:
   mov      %rax, -16(%rbp)
.2630:
   jz       .2632
   mov      %rax, -24(%rbp)
   mov      -8(%rbp), %rax
   cmp      %r12, %rax
   js       .2632
   call     rdSetRdyASL_F
   jnz      .2632
   lea      -24(%rbp), %rsp
   jmp      .2563
.2632:
   mov      16(%rbp), %r10
   mov      %r10, At
   mov      -16(%rbp), %rax
   mov      (%rbp), %rsp
   pop      %rbp
   popq     EnvTask
   pop      %r15
   pop      %r14
   ret

   .balign  16
   nop
   nop
   .globl  doWait
doWait:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2633
   pushq    $-1
   jmp      .2634
.2633:
   call     xCntEX_FE
   push     %rbx
.2634:
   mov      8(%r14), %r14
.2635:
   mov      %r14, %r15
1:
   mov      (%r15), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r15), %r15
   testb    $0x0E, %r15b
   jz       1b
   cmp      $Nil, %rbx
   jnz      .2636
   mov      $-1, %rdx
   mov      (%rsp), %rbx
   call     waitFdCEX_A
   cmp      %r12, %rax
   jnz      .2637
1:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       1b
   jmp      .2636
.2637:
   mov      %rax, (%rsp)
   jmp      .2635
.2636:
   pop      %rax
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSync
doSync:
   cmp      %r12, Mic
   jz       retNil
   cmp      %r12, Hear
   jz       retNil
   push     %r13
   mov      %rbx, %r13
   mov      $Slot, %rbx
   mov      $8, %rdx
.2638:
   mov      %rdx, %r12
   mov      Mic, %rdi
   mov      %rbx, %rsi
   mov      %r12, %rdx
   call     write
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2639
   sub      %rax, %rdx
   jz       .2640
   add      %rax, %rbx
   jmp      .2641
.2639:
   call     errno_A
   cmp      $4, %rax
   jnz      wrSyncErrX
.2641:
   cmp      %r12, Signal
   jz       .2638
   call     sighandlerX
   jmp      .2638
.2640:
   mov      %r12b, Sync
.2643:
   mov      $-1, %rdx
   mov      %rdx, %rbx
   call     waitFdCEX_A
   cmp      %r12b, Sync
   jz       .2643
   mov      $TSym, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doHear
doHear:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       cntErrEX
   mov      %rbx, %rdx
   shr      $4, %rdx
   jc       badFdErrEX
   mov      %rdx, %rax
   shl      $3, %rax
   cmp      InFDs, %rax
   jnc      badFdErrEX
   add      InFiles, %rax
   mov      (%rax), %rax
   cmp      %r12, %rax
   jz       badFdErrEX
   mov      Hear, %rax
   cmp      %r12, %rax
   jz       .2644
   call     closeAX
   mov      Hear, %rax
   call     closeInFileA
   mov      Hear, %rax
   call     closeOutFileA
.2644:
   mov      %rdx, Hear
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doTell
doTell:
   mov      Tell, %rax
   or       Children, %rax
   jz       retNil
   push     %r13
   push     %r14
   push     %r15
   pushq    TellBuf
   sub      $4096, %rsp
   mov      %rsp, %r15
   call     tellBegZ_Z
   mov      8(%rbx), %r13
.2645:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r14
   call     prTellEZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2645
   call     tellEndZ
   mov      %r14, %rbx
   add      $4096, %rsp
   popq     TellBuf
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPoll
doPoll:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rax
   call     xCntEX_FE
   xchg     %rbx, %rax
   cmp      %r12, %rax
   js       badFdErrEX
   mov      %rax, %rdx
   shl      $3, %rdx
   cmp      InFDs, %rdx
   jnc      badFdErrEX
   call     inFilesA_FC
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .2646
.2647:
   call     inReadyC_F
   jnz      .2646
   sub      $8, %rsp
   mov      %eax, (%rsp)
   mov      $1, %rax
   mov      %ax, 4(%rsp)
.2649:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $1, %rsi
   xor      %rdx, %rdx
   call     poll
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2650
   call     errno_A
   cmp      $4, %rax
   jz       .2649
   movq     $Nil, Run
   jmp      selectErrX
.2650:
   movzwq   6(%rsp), %rax
   add      $8, %rsp
   testb    $17, %al
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .2646
   call     slowNbC_FA
   jc       .2647
.2646:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doKey
doKey:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2652
   mov      $-1, %rbx
   jmp      .2653
.2652:
   call     xCntEX_FE
.2653:
   call     flushAll
   call     setRaw
   mov      %r12, %rdx
   call     waitFdCEX_A
   cmp      %r12, %rax
   jz       .2654
   call     stdinByte_FA
   jc       .2654
   cmp      $255, %al
   jz       .2656
   cmp      $128, %al
   jc       .2660
   testb    $32, %al
   jnz      .2658
   and      $31, %al
   shl      $6, %rax
   push     %rax
   jmp      .2659
.2658:
   and      $15, %al
   shl      $6, %rax
   push     %rax
   call     stdinByte_FA
   and      $63, %al
   or       (%rsp), %rax
   shl      $6, %rax
   mov      %rax, (%rsp)
.2659:
   call     stdinByte_FA
   and      $63, %al
   or       %rax, (%rsp)
   pop      %rax
   jmp      .2660
.2656:
   mov      $65536, %rax
.2660:
   call     mkCharA_A
   mov      %rax, %rbx
   pop      %r13
   ret
.2654:
   mov      $Nil, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPeek
doPeek:
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2661
   mov      Get_A, %r10
   call     *%r10
.2661:
   cmp      %r12, %rax
   js       retNil
   call     mkCharA_A
   mov      %rax, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doChar
doChar:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jz       .2662
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2663
   mov      Get_A, %r10
   call     *%r10
.2663:
   cmp      %r12, %rax
   js       .2664
   call     getChar_A
   call     mkCharA_A
   mov      %rax, %rbx
   mov      Get_A, %r10
   call     *%r10
   jmp      .2665
.2664:
   mov      $Nil, %rbx
.2665:
   pop      %r13
   ret
.2662:
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jz       .2666
   mov      %rbx, %rax
   shr      $4, %rax
   jz       .2667
   call     mkCharA_A
   mov      %rax, %rbx
   jmp      .2668
.2667:
   mov      $Nil, %rbx
.2668:
   pop      %r13
   ret
.2666:
   testb    $0x08, %bl
   jz       atomErrEX
   cmp      $TSym, %rbx
   jz       .2669
   call     firstCharE_A
   shl      $4, %rax
   orb      $2, %al
   jmp      .2670
.2669:
   mov      $65536, %rax
   call     mkCharA_A
.2670:
   mov      %rax, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSkip
doSkip:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     firstCharE_A
   mov      %rax, %rdx
   call     skipC_A
   cmp      %r12, %rax
   js       retNil
   mov      Chr, %rax
   call     mkCharA_A
   mov      %rax, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doEol
doEol:
   cmpq     $10, Chr
   jz       retT
   cmp      %r12, Chr
   jle      retT
   mov      $Nil, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doEof
doEof:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2671
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2672
   mov      Get_A, %r10
   call     *%r10
.2672:
   cmp      %r12, %rax
   jns      RetNil
   jmp      .2673
.2671:
   movq     $-1, Chr
.2673:
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doFrom
doFrom:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   push     %r12
.2674:
   call     evSymX_E
   call     bufStringE_SZ
   push     %r12
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2674
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2676
   mov      Get_A, %r10
   call     *%r10
.2676:
   cmp      %r12, %rax
   js       .2677
   mov      %rsp, %r15
.2679:
   lea      40(%r15), %rdx
   add      32(%r15), %rdx
   cmp      (%rdx), %al
   jnz      .2680
   incq     32(%r15)
   cmp      %r12b, 1(%rdx)
   jnz      .2681
   mov      Get_A, %r10
   call     *%r10
   mov      16(%r15), %rbx
   jmp      doFrom_90
.2680:
   cmp      %r12, 32(%r15)
   jz       .2681
   lea      41(%r15), %rdx
.2682:
   decq     32(%r15)
   jz       .2679
   lea      40(%r15), %rsi
   mov      %rdx, %rdi
   mov      32(%r15), %rcx
   cld
   repnz cmpsb
   jz       .2679
   inc      %rdx
   jmp      .2682
.2681:
   mov      (%r15), %r15
   cmp      %r12, (%r15)
   jnz      .2679
   mov      Get_A, %r10
   call     *%r10
   jmp      .2676
.2677:
   mov      $Nil, %rbx
doFrom_90:
   pop      %r15
.2684:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2684
   pop      %r15
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doTill
doTill:
   push     %r13
   push     %r15
   mov      8(%rbx), %r13
   call     evSymX_E
   call     bufStringE_SZ
   push     %rax
   cld
   xor      %rcx, %rcx
   not      %rcx
   lea      8(%rsp), %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, (%rsp)
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2685
   mov      Get_A, %r10
   call     *%r10
.2685:
   cmp      %r12, %rax
   js       .2686
   cld
   lea      8(%rsp), %rdi
   mov      (%rsp), %rcx
   repnz scasb
   jz       .2686
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2688
   call     getChar_A
   call     mkCharA_A
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.2689:
   mov      Get_A, %r10
   call     *%r10
   cmp      %r12, %rax
   jle      .2690
   cld
   lea      32(%rsp), %rdi
   mov      24(%rsp), %rcx
   repnz scasb
   jz       .2690
   call     getChar_A
   call     mkCharA_A
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      %rdx, %r13
   jmp      .2689
.2690:
   mov      8(%rbp), %rbx
   jmp      .2691
.2688:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      $4, %rdx
.2692:
   call     getChar_A
   call     charSymACX_CX
   mov      Get_A, %r10
   call     *%r10
   cmp      %r12, %rax
   jle      .2693
   cld
   lea      32(%rsp), %rdi
   mov      24(%rsp), %rcx
   repnz scasb
   jnz      .2692
.2693:
   mov      8(%rbp), %r13
   call     consSymX_E
.2691:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret
.2686:
   mov      $Nil, %rbx
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret

   .balign  16
   .globl  eolA_F
eolA_F:
   cmp      %r12, %rax
   js       retz
   cmp      $10, %rax
   jz       .2694
   cmp      $13, %rax
   jnz      Ret
   mov      Get_A, %r10
   call     *%r10
   cmp      $10, %rax
   jnz      retz
.2694:
   mov      %r12, Chr
   ret

   .balign  16
   nop
   nop
   .globl  doLine
doLine:
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2695
   mov      Get_A, %r10
   call     *%r10
.2695:
   call     eolA_F
   jz       retNil
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2696
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2697
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   mov      %rsp, %r13
   push     %rbp
   mov      %rsp, %rbp
   mov      $4, %rdx
.2698:
   call     getChar_A
   call     charSymACX_CX
   mov      Get_A, %r10
   call     *%r10
   call     eolA_F
   jnz      .2698
   mov      8(%rbp), %r13
   call     consSymX_E
   jmp      .2704
.2697:
   call     cons_Z
   movq     $2, (%r15)
   movq     $Nil, 8(%r15)
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
.2700:
   mov      $4, %rdx
   mov      %r15, %r13
   call     getChar_A
   call     charSymACX_CX
   push     %rdx
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   pop      %rdx
   shr      $4, %rbx
.2701:
   dec      %rbx
   jz       .2702
   mov      Get_A, %r10
   call     *%r10
   call     eolA_F
   jnz      .2703
   mov      (%r15), %r13
   call     consSymX_E
   mov      %rbx, (%r15)
   jmp      doLine_20
.2703:
   call     getChar_A
   call     charSymACX_CX
   jmp      .2701
.2702:
   mov      (%r15), %r13
   call     consSymX_E
   mov      %rbx, (%r15)
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      doLine_10
   mov      Get_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     cons_A
   movq     $2, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
   jmp      .2700
.2696:
   call     getChar_A
   call     mkCharA_A
   call     consA_Z
   mov      %rax, (%r15)
   movq     $Nil, 8(%r15)
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      doLine_10
   mov      %r15, %r13
   call     cons_Z
   mov      %r13, (%r15)
   movq     $Nil, 8(%r15)
   mov      %r15, 8(%rbp)
.2706:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   shr      $4, %rbx
.2707:
   dec      %rbx
   jz       .2708
   mov      Get_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     getChar_A
   call     mkCharA_A
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r13)
   mov      %rdx, %r13
   jmp      .2707
.2708:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jnz      doLine_10
   mov      Get_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     getChar_A
   call     mkCharA_A
   call     consA_X
   mov      %rax, (%r13)
   movq     $Nil, 8(%r13)
   call     consX_A
   mov      %r13, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r15)
   mov      %rax, %r15
   jmp      .2706
doLine_10:
   mov      Get_A, %r10
   call     *%r10
   call     eolA_F
   jz       doLine_20
   call     getChar_A
   call     mkCharA_A
   call     consA_C
   mov      %rax, (%rdx)
   movq     $Nil, 8(%rdx)
   mov      %rdx, 8(%r15)
   mov      %rdx, %r15
   jmp      doLine_10
doLine_20:
   mov      8(%rbp), %rbx
.2704:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLines
doLines:
   push     %r13
   push     %r14
   push     %r15
   mov      8(%rbx), %r13
   mov      %r12, %r14
.2712:
   testb    $0x0E, %r13b
   jnz      .2713
   call     evSymX_E
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_r_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       .2714
   mov      %rax, %rbx
   cmp      %r12, %r14
   jnz      .2716
   mov      $2, %r14
.2716:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     getc_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2717
   cmp      $10, %rax
   jnz      .2716
   add      $16, %r14
   jmp      .2716
.2717:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
.2714:
   mov      8(%r13), %r13
   jmp      .2712
.2713:
   cmp      %r12, %r14
   mov      %r14, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .globl  parseBCE_E
parseBCE_E:
   pushq    EnvParseX
   pushq    EnvParseC
   pushq    EnvParseEOF
   pushq    Get_A
   pushq    Chr
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, EnvParseX
   mov      %r12, EnvParseC
   mov      %r12, %rbx
   cmp      %r12, %rdx
   jnz      .2719
   mov      $6097408, %rbx
.2719:
   mov      %rbx, EnvParseEOF
   movq     $getParse_A, Get_A
   mov      %r12, Chr
   or       %al, %al
   jz       .2720
   call     getParse_A
.2720:
   cmp      %r12, %rdx
   jnz      .2721
   call     rdList_E
   jmp      .2722
.2721:
   push     %r13
   push     %rdx
   mov      %rdx, %rbx
   mov      %r12, %rdx
   call     tokenCE_E
   cmp      %r12, %rbx
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .2723
   call     consE_X
   mov      %rbx, (%r13)
   movq     $Nil, 8(%r13)
   push     %rbp
   mov      %rsp, %rbp
   push     %r13
   push     %rbp
   mov      %rsp, %rbp
.2724:
   mov      %r12, %rdx
   mov      24(%rsp), %rbx
   push     %r13
   call     tokenCE_E
   pop      %r13
   cmp      %r12, %rbx
   jz       .2725
   call     consE_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r13)
   mov      %rax, %r13
   jmp      .2724
.2725:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2723:
   pop      %rax
   pop      %r13
.2722:
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Chr
   popq     Get_A
   popq     EnvParseEOF
   popq     EnvParseC
   popq     EnvParseX
   ret

   .balign  16
   nop
   nop
   .globl  doAny
doAny:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jz       .2726
   pushq    EnvParseX
   pushq    EnvParseC
   pushq    EnvParseEOF
   pushq    Get_A
   pushq    Chr
   mov      -8(%rbx), %rbx
   call     nameE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, EnvParseX
   mov      %r12, EnvParseC
   movq     $8192, EnvParseEOF
   movq     $getParse_A, Get_A
   mov      %r12, Chr
   call     getParse_A
   mov      $1, %rax
   call     readA_E
   mov      (%rbp), %rsp
   pop      %rbp
   popq     Chr
   popq     Get_A
   popq     EnvParseEOF
   popq     EnvParseC
   popq     EnvParseX
.2726:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSym
doSym:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     begString
   call     printE
   call     endString_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .globl  doStr
doStr:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .2727
   testb    $0x06, %bl
   jnz      argErrEX
   testb    $0x08, %bl
   jz       .2728
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r13
   testb    $0x0E, %r13b
   jz       .2729
   mov      %r12, %rdx
   jmp      .2730
.2729:
   call     evSymX_E
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      %rbx, %rdx
   mov      16(%rbp), %rbx
.2730:
   mov      $0, %al
   call     parseBCE_E
   mov      (%rbp), %rsp
   pop      %rbp
   jmp      .2727
.2728:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     begString
   mov      %rbx, %r13
.2732:
   mov      (%r13), %rbx
   call     printE
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2733
   call     space
   jmp      .2732
.2733:
   call     endString_E
   mov      (%rbp), %rsp
   pop      %rbp
.2727:
   pop      %r14
   pop      %r13
   ret

   .globl  loadBEX_E
loadBEX_E:
   mov      %rax, %rdx
   testb    $0x08, %bl
   jz       .2734
   mov      -8(%rbx), %rax
   call     firstByteA_B
   cmp      $45, %al
   jnz      .2734
   mov      %r12, %rdx
   call     parseBCE_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   mov      (%rbp), %rsp
   pop      %rbp
   ret
.2734:
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   push     %rdx
   sub      $32, %rsp
   mov      %rsp, %r14
   call     rdOpenEXY
   mov      $Nil, %rbx
   call     doHide
   call     pushInFilesY
.2736:
   mov      InFiles, %r10
   mov      (%r10), %rax
   cmp      InFile, %rax
   jz       .2737
   mov      %r12, %rdx
   call     readC_E
   jmp      .2738
.2737:
   mov      -8(%rbp), %rax
   or       %al, %al
   jz       .2739
   cmp      %r12, Chr
   jnz      .2739
   mov      PutB, %r10
   call     *%r10
   call     space
   call     flushAll
.2739:
   mov      $10, %rdx
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   cmovzq   %r12, %rdx
   call     readC_E
   cmpq     $10, Chr
   jnz      .2738
   mov      %r12, Chr
.2738:
   cmp      $Nil, %rbx
   jz       .2742
   mov      %rbx, 8(%rbp)
   mov      InFiles, %r10
   mov      (%r10), %rax
   cmp      InFile, %rax
   jz       .2743
loadBEX_E_10:
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   jmp      .2744
.2743:
   cmp      %r12, Chr
   jnz      loadBEX_E_10
   mov      -8(%rbp), %rax
   or       %al, %al
   jz       loadBEX_E_10
   call     flushAll
   mov      At, %r10
   mov      %r10, 16(%rbp)
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, At
   mov      At2, %r10
   mov      %r10, At3
   mov      16(%rbp), %r10
   mov      %r10, At2
   mov      $Arrow, %rdx
   call     outStringC
   call     flushAll
   call     printE_E
   call     newline
.2744:
   mov      %rbx, 8(%rbp)
   jmp      .2736
.2742:
   call     popInFiles
   mov      $Nil, %rbx
   call     doHide
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r14
   ret
Arrow:
   .asciz   "-> "

   .balign  16
   nop
   nop
   .globl  doLoad
doLoad:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
.2745:
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jz       .2746
   mov      $62, %al
   call     loadBEX_E
   jmp      .2747
.2746:
   call     loadAllX_E
.2747:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .2745
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doIn
doIn:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   sub      $32, %rsp
   mov      %rsp, %r14
   call     rdOpenEXY
   call     pushInFilesY
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popInFiles
   add      $32, %rsp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOut
doOut:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   sub      $32, %rsp
   mov      %rsp, %r14
   call     wrOpenEXY
   call     pushOutFilesY
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popOutFiles
   add      $32, %rsp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPipe
doPipe:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   sub      $32, %rsp
   mov      %rsp, %r14
   push     %rax
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     pipe
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      pipeErrX
   movl     (%rsp), %eax
   call     closeOnExecAX
   movl     4(%rsp), %eax
   call     closeOnExecAX
   call     forkLispX_FE
   jnc      .2748
   mov      8(%r13), %r10
   testb    $0x0E, 8(%r10)
   jnz      .2749
   mov      %rdx, %r12
   xor      %rdi, %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
.2749:
   movl     (%rsp), %eax
   call     closeAX
   movl     4(%rsp), %eax
   cmp      $1, %rax
   jz       .2750
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      $1, %rsi
   call     dup2
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     4(%rsp), %eax
   call     closeAX
.2750:
   mov      $Nil, %rbx
   call     wrOpenEXY
   call     pushOutFilesY
   mov      OutFile, %r11
   mov      %r12, 16(%r11)
   movq     $Nil, Run
   mov      8(%r13), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %r12, %rbx
   jmp      byeE
.2748:
   mov      %rbx, 16(%r14)
   movl     4(%rsp), %eax
   call     closeAX
   movl     (%rsp), %eax
   call     initInFileA_A
   mov      (%rax), %rbx
   mov      8(%r13), %r10
   mov      8(%r10), %r13
   testb    $0x0E, %r13b
   jz       .2751
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .2752
.2751:
   mov      %rbx, 8(%r14)
   mov      %rdx, %r12
   mov      16(%r14), %rdi
   xor      %rsi, %rsi
   call     setpgid
   mov      %r12, %rdx
   xor      %r12, %r12
   call     pushInFilesY
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popInFiles
.2752:
   add      $40, %rsp
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doCtl
doCtl:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %rbx
   mov      (%rbx), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rax
   push     %rax
   mov      %rsp, %r14
   call     ctOpenEXY
   call     pushCtlFilesY
   mov      8(%r13), %r10
   mov      8(%r10), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   call     popCtlFiles
   pop      %rax
   pop      %rax
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doOpen
doOpen:
   push     %r13
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     pathStringE_SZ
.2753:
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $66, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2754
   call     errno_A
   cmp      $4, %rax
   jz       .2755
   mov      $Nil, %rbx
   jmp      doOpen_90
.2755:
   cmp      %r12, Signal
   jz       .2753
   call     sighandlerX
   jmp      .2753
.2754:
   mov      %rax, %r13
   call     closeOnExecAX
   mov      %r13, %rdx
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     strdup
   mov      %r12, %rdx
   xor      %r12, %r12
   call     initInFileCA_A
   mov      %r13, %rax
   call     initOutFileA_A
   mov      %r13, %rbx
   shl      $4, %rbx
   orb      $2, %bl
doOpen_90:
   mov      %r15, %rsp
   pop      %r15
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doClose
doClose:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rdx
   call     xCntCX_FC
.2757:
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .2758
   call     errno_A
   cmp      $4, %rax
   jz       .2759
   mov      $Nil, %rbx
   pop      %r13
   ret
.2759:
   cmp      %r12, Signal
   jz       .2757
   call     sighandlerX
   jmp      .2757
.2758:
   mov      %rdx, %rax
   call     closeInFileA
   mov      %rdx, %rax
   call     closeOutFileA
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doEcho
doEcho:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   mov      Chr, %rax
   cmp      %r12, %rax
   jnz      .2761
   mov      Get_A, %r10
   call     *%r10
.2761:
   cmp      $Nil, %rbx
   jnz      .2762
   testb    $0x0E, %r14b
   jz       .2762
.2764:
   cmp      %r12, %rax
   js       .2765
   mov      PutB, %r10
   call     *%r10
   mov      Get_A, %r10
   call     *%r10
   jmp      .2764
.2765:
   mov      $TSym, %rbx
   pop      %r14
   pop      %r13
   ret
.2762:
   testb    $0x06, %bl
   jz       .2766
   call     xCntEX_FE
   testb    $0x0E, %r14b
   jnz      .2771
   mov      (%r14), %r14
   xchg     %rbx, %r14
   call     evCntEX_FE
   mov      Chr, %rax
.2768:
   sub      $1, %r14
   js       .2771
   cmp      %r12, %rax
   jns      .2770
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret
.2770:
   mov      Get_A, %r10
   call     *%r10
   jmp      .2768
.2771:
   sub      $1, %rbx
   js       .2772
   cmp      %r12, %rax
   jns      .2773
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret
.2773:
   mov      PutB, %r10
   call     *%r10
   mov      Get_A, %r10
   call     *%r10
   jmp      .2771
.2772:
   mov      $TSym, %rbx
   pop      %r14
   pop      %r13
   ret
.2766:
   testb    $0x08, %bl
   jz       argErrEX
   push     %r15
   push     %r12
.2774:
   call     bufStringE_SZ
   push     %r12
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   push     %r15
   testb    $0x0E, %r14b
   jnz      .2775
   call     evSymY_E
   mov      8(%r14), %r14
   jmp      .2774
.2775:
   mov      %r12, %r13
   mov      Chr, %rax
.2776:
   cmp      %r12, %rax
   js       .2777
   mov      %r13, %r14
   cmp      %r12, %r14
   jz       .2778
   mov      32(%r14), %rbx
.2778:
   mov      %rsp, %r15
.2780:
   lea      40(%r15), %rdx
   add      32(%r15), %rdx
   cmp      (%rdx), %al
   jnz      .2781
   incq     32(%r15)
   cmp      %r12b, 1(%rdx)
   jz       .2782
   cmp      %r12, %r13
   jnz      .2783
   mov      %r15, %r13
   jmp      .2785
.2783:
   mov      32(%r15), %r10
   cmp      %r10, 32(%r13)
   cmovcq   %r15, %r13
   jmp      .2785
.2782:
   cmp      %r12, %r14
   jz       .2786
   lea      40(%r14), %rdx
   sub      32(%r15), %rbx
.2787:
   jc       .2786
   mov      (%rdx), %al
   mov      PutB, %r10
   call     *%r10
   inc      %rdx
   sub      $1, %rbx
   jmp      .2787
.2786:
   mov      Get_A, %r10
   call     *%r10
   mov      16(%r15), %rbx
   jmp      doEcho_90
.2781:
   cmp      %r12, 32(%r15)
   jz       .2785
   lea      41(%r15), %rdx
.2789:
   decq     32(%r15)
   jz       .2790
   lea      40(%r15), %rsi
   mov      %rdx, %rdi
   mov      32(%r15), %rcx
   cld
   repnz cmpsb
   jz       .2790
   inc      %rdx
   jmp      .2789
.2790:
   cmp      %r15, %r13
   jnz      .2780
   mov      %r12, %r13
   mov      %rsp, %rdx
.2792:
   cmp      %r12, 32(%rdx)
   jz       .2793
   cmp      %r12, %r13
   jnz      .2794
   mov      %rdx, %r13
   jmp      .2793
.2794:
   mov      32(%rdx), %r10
   cmp      %r10, 32(%r13)
   cmovcq   %rdx, %r13
.2793:
   mov      (%rdx), %rdx
   cmp      %r12, (%rdx)
   jnz      .2792
   jmp      .2780
.2785:
   mov      (%r15), %r15
   cmp      %r12, (%r15)
   jnz      .2780
   cmp      %r12, %r13
   jnz      .2796
   cmp      %r12, %r14
   jz       .2797
   push     %rax
   push     %rbx
   lea      40(%r14), %rdx
.2798:
   mov      (%rdx), %al
   mov      PutB, %r10
   call     *%r10
   inc      %rdx
   dec      %rbx
   jnz      .2798
   pop      %rbx
   pop      %rax
.2797:
   mov      PutB, %r10
   call     *%r10
   jmp      .2799
.2796:
   cmp      %r12, %r14
   jz       .2799
   lea      40(%r14), %rdx
   sub      32(%r13), %rbx
.2801:
   jc       .2799
   mov      (%rdx), %al
   mov      PutB, %r10
   call     *%r10
   inc      %rdx
   sub      $1, %rbx
   jmp      .2801
.2799:
   mov      Get_A, %r10
   call     *%r10
   jmp      .2776
.2777:
   mov      $Nil, %rbx
doEcho_90:
   pop      %r15
.2803:
   mov      (%rbp), %rsp
   pop      %rbp
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12, %r15
   jnz      .2803
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  putStdoutB
putStdoutB:
   push     %r14
   mov      OutFile, %r14
   cmp      %r12, %r14
   jz       .2804
   push     %rbx
   push     %r13
   mov      8(%r14), %rbx
   lea      24(%r14), %r13
   cmp      $8192, %rbx
   jnz      .2805
   push     %rax
   push     %rdx
   mov      %r12, 8(%r14)
   mov      (%r14), %rdx
   call     wrBytesCEX_F
   mov      %r12, %rbx
   lea      24(%r14), %r13
   pop      %rdx
   pop      %rax
.2805:
   add      %rbx, %r13
   mov      %al, (%r13)
   inc      %rbx
   mov      %rbx, 8(%r14)
   cmp      $10, %al
   jnz      .2806
   cmp      %r12, 16(%r14)
   jz       .2806
   push     %rdx
   mov      %r12, 8(%r14)
   mov      (%r14), %rdx
   lea      24(%r14), %r13
   call     wrBytesCEX_F
   pop      %rdx
.2806:
   pop      %r13
   pop      %rbx
.2804:
   pop      %r14
   ret

   .globl  newline
newline:
   mov      $10, %al
   mov      PutB, %r10
   jmp      *%r10

   .globl  space
space:
   mov      $32, %al

   .globl  envPutB
envPutB:
   mov      PutB, %r10
   jmp      *%r10

   .globl  envGet_A
envGet_A:
   mov      Get_A, %r10
   jmp      *%r10

   .globl  outNumE
outNumE:
   shr      $4, %rbx
   jnc      .2808
   mov      $45, %al
   mov      PutB, %r10
   call     *%r10
.2808:
   mov      %rbx, %rax

   .globl  outWordA
outWordA:
   cmp      $9, %rax
   jbe      .2809
   mov      %r12, %rdx
   mov      $10, %r10
   div      %r10
   push     %rdx
   call     outWordA
   pop      %rax
.2809:
   add      $48, %al
   mov      PutB, %r10
   jmp      *%r10

   .globl  prExtNmX
prExtNmX:
   call     fileObjX_AC
   cmp      %r12, %rax
   jz       .2810
   call     outAoA
.2810:
   mov      %rdx, %rax

   .balign  16
   .globl  outOctA
outOctA:
   cmp      $7, %rax
   jbe      .2811
   push     %rax
   shr      $3, %rax
   call     outOctA
   pop      %rax
   and      $7, %al
.2811:
   add      $48, %al
   mov      PutB, %r10
   jmp      *%r10

   .balign  16
   .globl  outAoA
outAoA:
   cmp      $15, %rax
   jbe      .2812
   push     %rax
   shr      $4, %rax
   call     outAoA
   pop      %rax
   and      $15, %al
.2812:
   add      $64, %al
   mov      PutB, %r10
   jmp      *%r10

   .globl  outStringS
outStringS:
   lea      8(%rsp), %rdx

   .globl  outStringC
outStringC:
.2813:
   mov      (%rdx), %al
   inc      %rdx
   or       %al, %al
   jz       .2814
   mov      PutB, %r10
   call     *%r10
   jmp      .2813
.2814:
   rep
   ret

   .globl  outNameE
outNameE:
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   call     prNameX
   pop      %r13
   ret

   .globl  prNameX
prNameX:
   mov      %r12, %rdx
.2815:
   call     symByteCX_FACX
   jz       .2816
   mov      PutB, %r10
   call     *%r10
   jmp      .2815
.2816:
   rep
   ret

   .globl  printE_E
printE_E:
   push     %rbx
   call     printE
   pop      %rbx
   ret

   .balign  16
   .globl  printE
printE:
   cmp      StkLimit, %rsp
   jc       stkErr
   cmp      %r12, Signal
   jz       .2817
   call     sighandler0
.2817:
   testb    $0x02, %bl
   jnz      outNumE
   testb    $0x04, %bl
   jz       .2818
   mov      $-1, %rax
   jmp      fmtNum0AE_E
.2818:
   push     %r13
   testb    $0x08, %bl
   jz       .2819
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jnz      .2820
   mov      $36, %al
   mov      PutB, %r10
   call     *%r10
   shr      $4, %rbx
   mov      %rbx, %rax
   call     outOctA
   pop      %r13
   ret
.2820:
   testb    $0x08, -8(%rbx)
   jz       .2821
   mov      $123, %al
   mov      PutB, %r10
   call     *%r10
   call     prExtNmX
   mov      $125, %al
   mov      PutB, %r10
   call     *%r10
   pop      %r13
   ret
.2821:
   push     %r14
   mov      $Intern, %r14
   call     isInternEXY_F
   jnz      .2822
   cmp      $738, %r13
   jnz      .2823
   mov      $92, %al
   mov      PutB, %r10
   call     *%r10
   mov      $46, %al
   mov      PutB, %r10
   call     *%r10
   jmp      .2827
.2823:
   mov      %r12, %rdx
   call     symByteCX_FACX
.2825:
   cld
   mov      $Delim, %rdi
   mov      $(DelimEnd-Delim), %rcx
   repnz scasb
   jnz      .2826
   push     %rax
   mov      $92, %al
   mov      PutB, %r10
   call     *%r10
   pop      %rax
.2826:
   mov      PutB, %r10
   call     *%r10
   call     symByteCX_FACX
   jnz      .2825
   jmp      .2827
.2822:
   mov      %r12, %r14
   testb    $0x0E, Tsm
   jnz      .2828
   cmpq     $putStdoutB, PutB
   jnz      .2828
   mov      OutFile, %r10
   mov      16(%r10), %r14
.2828:
   cmp      %r12, %r14
   jnz      .2830
   mov      $34, %al
   mov      PutB, %r10
   call     *%r10
   jmp      .2831
.2830:
   mov      Tsm, %r10
   mov      (%r10), %rbx
   call     outNameE
.2831:
   mov      %r12, %rdx
   call     symByteCX_FACX
.2832:
   cmp      $92, %al
   jz       printE_20
   cmp      $94, %al
   jz       printE_20
   cmp      %r12, %r14
   jnz      printE_30
   cmp      $34, %al
   jnz      printE_30
printE_20:
   push     %rax
   mov      $92, %al
   mov      PutB, %r10
   call     *%r10
   pop      %rax
   jmp      .2834
printE_30:
   cmp      $127, %al
   jnz      .2835
   mov      $94, %al
   mov      PutB, %r10
   call     *%r10
   mov      $63, %al
   jmp      .2834
.2835:
   cmp      $32, %al
   jnc      .2834
   push     %rax
   mov      $94, %al
   mov      PutB, %r10
   call     *%r10
   pop      %rax
   orb      $64, %al
.2834:
   mov      PutB, %r10
   call     *%r10
   call     symByteCX_FACX
   jnz      .2832
   cmp      %r12, %r14
   jnz      .2838
   mov      $34, %al
   mov      PutB, %r10
   call     *%r10
   jmp      .2827
.2838:
   mov      Tsm, %r10
   mov      8(%r10), %rbx
   call     outNameE
.2827:
   pop      %r14
   pop      %r13
   ret
.2819:
   cmpq     $Quote, (%rbx)
   jnz      .2840
   cmp      8(%rbx), %rbx
   jz       .2840
   mov      $39, %al
   mov      PutB, %r10
   call     *%r10
   mov      8(%rbx), %rbx
   call     printE
   pop      %r13
   ret
.2840:
   mov      %rbx, %r13
   mov      $40, %al
   mov      PutB, %r10
   call     *%r10
.2842:
   pushq    8(%rbx)
   mov      (%rbx), %rbx
   call     printE
   pop      %rbx
   cmp      $Nil, %rbx
   jz       .2843
   cmp      %r13, %rbx
   jnz      .2844
   call     space
   mov      $46, %al
   mov      PutB, %r10
   call     *%r10
   jmp      .2843
.2844:
   testb    $0x0E, %bl
   jz       .2845
   call     space
   mov      $46, %al
   mov      PutB, %r10
   call     *%r10
   call     space
   call     printE
   jmp      .2843
.2845:
   call     space
   jmp      .2842
.2843:
   mov      $41, %al
   mov      PutB, %r10
   call     *%r10
   pop      %r13
   ret

   .balign  16
   .globl  prinE_E
prinE_E:
   push     %rbx
   call     prinE
   pop      %rbx
   ret

   .balign  16
   .globl  prinE
prinE:
   cmp      StkLimit, %rsp
   jc       stkErr
   cmp      %r12, Signal
   jz       .2846
   call     sighandler0
.2846:
   cmp      $Nil, %rbx
   jz       .2847
   testb    $0x02, %bl
   jnz      outNumE
   testb    $0x04, %bl
   jz       .2848
   mov      $-1, %rax
   jmp      fmtNum0AE_E
.2848:
   push     %r13
   testb    $0x08, %bl
   jz       .2849
   mov      -8(%rbx), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       .2853
   testb    $0x08, -8(%rbx)
   jnz      .2851
   call     prNameX
   jmp      .2853
.2851:
   mov      $123, %al
   mov      PutB, %r10
   call     *%r10
   call     prExtNmX
   mov      $125, %al
   mov      PutB, %r10
   call     *%r10
   jmp      .2853
.2849:
   mov      %rbx, %r13
.2854:
   mov      (%r13), %rbx
   call     prinE
   mov      8(%r13), %r13
   cmp      $Nil, %r13
   jz       .2853
   testb    $0x0E, %r13b
   jz       .2854
   mov      %r13, %rbx
   call     prinE
.2853:
   pop      %r13
.2847:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doPrin
doPrin:
   push     %r13
   mov      8(%rbx), %r13
.2857:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     prinE_E
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2857
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPrinl
doPrinl:
   call     doPrin
   jmp      newline

   .balign  16
   nop
   nop
   .globl  doSpace
doSpace:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2858
   call     space
   mov      $18, %rbx
   jmp      .2859
.2858:
   mov      %rbx, %rdx
   call     xCntCX_FC
.2860:
   sub      $1, %rdx
   js       .2859
   call     space
   jmp      .2860
.2859:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPrint
doPrint:
   push     %r13
   mov      8(%rbx), %r13
.2862:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     printE_E
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jnz      .2863
   call     space
   jmp      .2862
.2863:
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPrintsp
doPrintsp:
   push     %r13
   mov      8(%rbx), %r13
.2864:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   call     printE_E
   call     space
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2864
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPrintln
doPrintln:
   call     doPrint
   jmp      newline

   .balign  16
   nop
   nop
   .globl  doFlush
doFlush:
   mov      OutFile, %rax
   call     flushA_F
   mov      $TSym, %rbx
   mov      $Nil, %r10
   cmovnzq  %r10, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doRewind
doRewind:
   mov      $Nil, %rbx
   mov      OutFile, %rdx
   cmp      %r12, %rdx
   jz       .2865
   mov      %r12, 8(%rdx)
   mov      %rdx, %r12
   mov      (%r12), %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     lseek
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jnz      .2865
   mov      %rdx, %r12
   mov      (%r12), %rdi
   xor      %rsi, %rsi
   call     ftruncate
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
.2865:
   rep
   ret

   .balign  16
   nop
   nop
   .globl  doExt
doExt:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   pushq    ExtN
   mov      %rbx, ExtN
   mov      8(%r14), %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   popq     ExtN
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doRd
doRd:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x02, %bl
   jnz      .2867
   push     %r15
   mov      InFile, %r15
   cmp      %r12, %r15
   jz       .2868
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   movq     $getBinaryZ_FB, GetBinZ_FB
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binReadZ_FE
   cmovcq   8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
.2868:
   pop      %r15
   ret
.2867:
   mov      InFile, %rdx
   cmp      %r12, %rdx
   jz       retNil
   push     %r13
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   shr      $4, %rbx
   jz       doRd_80
   jnc      .2869
   sub      %rbx, %rsp
   mov      %rsp, %r14
   mov      $1, %r15
   jmp      .2870
.2869:
   mov      %rsp, %r14
   mov      $-1, %r15
   add      %r15, %r14
   sub      %rbx, %rsp
.2870:
   cmp      StkLimit, %rsp
   jc       stkErr
   mov      (%rdx), %rdx
   mov      %rsp, %r13
   push     %rbx
   call     rdBytesCEX_F
   jnz      .2871
doRd_80:
   mov      $Nil, %rbx
   jmp      doRd_90
.2871:
   lea      8(%rbp), %r13
   mov      $4, %rdx
.2872:
   mov      (%r14), %al
   call     byteNumBCX_CX
   add      %r15, %r14
   decq     (%rsp)
   jnz      .2872
   mov      8(%rbp), %rbx
   testb    $0x04, %bl
   jz       doRd_90
   mov      %rbx, %rax
   call     zapZeroA_A
   mov      %rax, %rbx
doRd_90:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doPr
doPr:
   push     %r13
   mov      8(%rbx), %r13
.2874:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbx
   mov      ExtN, %r10
   mov      %r10, Extn
   call     prE
   pop      %rbx
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2874
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doWr
doWr:
   push     %r13
   mov      8(%rbx), %r13
.2875:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %rax
   shr      $4, %rax
   call     putStdoutB
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2875
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doRpc
doRpc:
   push     %r13
   mov      8(%rbx), %r13
   mov      $1, %rax
   call     putCharA
.2876:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   movq     $putCharA, PutBinBZ
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binPrintEZ
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       .2876
   mov      $3, %rax
   call     putCharA
   mov      %rdx, %r12
   mov      stdout, %rdi
   call     fflush
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   mov      $Nil, %rbx
   mov      $TSym, %r10
   cmovzq   %r10, %rbx
   pop      %r13
   ret

   .balign  16
   .globl  putCharA
putCharA:
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     putchar_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .balign  16
   .globl  getAdrZ_A
getAdrZ_A:
   mov      5(%r15), %al
   movzx    %al, %rax
   shl      $8, %rax
   mov      4(%r15), %al
   shl      $8, %rax
   mov      3(%r15), %al
   shl      $8, %rax
   mov      2(%r15), %al
   shl      $8, %rax
   mov      1(%r15), %al
   shl      $8, %rax
   mov      (%r15), %al
   ret

   .balign  16
   .globl  setAdrAZ
setAdrAZ:
   mov      %al, (%r15)
   shr      $8, %rax
   mov      %al, 1(%r15)
   shr      $8, %rax
   mov      %al, 2(%r15)
   shr      $8, %rax
   mov      %al, 3(%r15)
   shr      $8, %rax
   mov      %al, 4(%r15)
   shr      $8, %rax
   mov      %al, 5(%r15)
   ret

   .balign  16
   .globl  setAdrAS
setAdrAS:
   mov      %al, 10(%rsp)
   shr      $8, %rax
   mov      %al, 11(%rsp)
   shr      $8, %rax
   mov      %al, 12(%rsp)
   shr      $8, %rax
   mov      %al, 13(%rsp)
   shr      $8, %rax
   mov      %al, 14(%rsp)
   shr      $8, %rax
   mov      %al, 15(%rsp)
   ret

   .balign  16
   .globl  dbfBuf_AF
dbfBuf_AF:
   mov      Buf+1, %al
   movzx    %al, %rax
   shl      $8, %rax
   mov      Buf, %al
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      retc
   add      DbFiles, %rax
   mov      %rax, DbFile
   ret

   .balign  16
   .globl  extNmCE_X
extNmCE_X:
   mov      %rdx, %r13
   and      $1048575, %r13
   shr      $20, %rdx
   mov      %rdx, %rax
   and      $4095, %rax
   shl      $28, %rax
   or       %rax, %r13
   shr      $12, %rdx
   shl      $48, %rdx
   or       %rdx, %r13
   mov      %rbx, %rax
   and      $255, %rax
   shl      $20, %rax
   or       %rax, %r13
   shr      $8, %rbx
   shl      $40, %rbx
   or       %rbx, %r13
   shl      $4, %r13
   orb      $2, %r13b
   ret

   .globl  packExtNmX_E
packExtNmX_E:
   push     %rbp
   mov      %rsp, %rbp
   pushq    $2
   push     %rbp
   mov      %rsp, %rbp
   call     fileObjX_AC
   push     %rdx
   mov      $4, %rdx
   lea      8(%rbp), %r13
   cmp      %r12, %rax
   jz       .2877
   call     packAoACX_CX
.2877:
   pop      %rax
   call     packOctACX_CX
   call     cons_E
   mov      8(%rbp), %r10
   mov      %r10, (%rbx)
   orb      $8, %bl
   mov      %rbx, (%rbx)
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .globl  packAoACX_CX
packAoACX_CX:
   cmp      $15, %rax
   jbe      .2878
   push     %rax
   shr      $4, %rax
   call     packAoACX_CX
   pop      %rax
   and      $15, %al
.2878:
   add      $64, %al
   jmp      byteSymBCX_CX

   .balign  16
   .globl  packOctACX_CX
packOctACX_CX:
   cmp      $7, %rax
   jbe      .2879
   push     %rax
   shr      $3, %rax
   call     packOctACX_CX
   pop      %rax
   and      $7, %al
.2879:
   add      $48, %al
   jmp      byteSymBCX_CX

   .globl  chopExtNmX_E
chopExtNmX_E:
   call     fileObjX_AC
   mov      %rax, %r13
   call     oct3C_CA
   call     consA_E
   mov      %rax, (%rbx)
   movq     $Nil, 8(%rbx)
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
.2880:
   shr      $3, %rdx
   jz       .2881
   call     oct3C_CA
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      %rbx, 8(%rbp)
   jmp      .2880
.2881:
   cmp      %r12, %r13
   jz       .2882
   mov      %r12, %rbx
   mov      %r12, %rax
.2883:
   mov      %r13b, %al
   and      $15, %al
   add      $64, %al
   or       %al, %bl
   shr      $4, %r13
   jz       .2884
   shl      $8, %rbx
   jmp      .2883
.2884:
   shl      $4, %rbx
   orb      $2, %bl
   call     cons_A
   mov      %rbx, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   call     consA_E
   mov      %rax, (%rbx)
   mov      8(%rbp), %r10
   mov      %r10, 8(%rbx)
   mov      %rbx, 8(%rbp)
.2882:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   .globl  oct3C_CA
oct3C_CA:
   mov      %r12, %rax
   mov      %dl, %al
   and      $7, %al
   add      $48, %al
   mov      %rax, %rbx
   shr      $3, %rdx
   jz       .2885
   mov      %dl, %al
   and      $7, %al
   add      $48, %al
   shl      $8, %rbx
   or       %al, %bl
   shr      $3, %rdx
   jz       .2885
   mov      %dl, %al
   and      $7, %al
   add      $48, %al
   shl      $8, %rbx
   or       %al, %bl
.2885:
   shl      $4, %rbx
   orb      $2, %bl
   call     cons_A
   mov      %rbx, (%rax)
   orb      $8, %al
   mov      %rax, (%rax)
   ret

   .balign  16
   .globl  fileObjX_AC
fileObjX_AC:
   shl      $2, %r13
   shr      $6, %r13
   mov      %r13, %rdx
   and      $1048575, %rdx
   shr      $20, %r13
   mov      %r13, %rax
   and      $255, %rax
   shr      $8, %r13
   jz       .2887
   mov      %r13, %rbx
   and      $4095, %rbx
   shl      $20, %rbx
   or       %rbx, %rdx
   shr      $12, %r13
   mov      %r13, %rbx
   and      $255, %rbx
   shl      $8, %rbx
   or       %rbx, %rax
   shr      $8, %r13
   shl      $32, %r13
   or       %r13, %rdx
.2887:
   rep
   ret

   .balign  16
   .globl  fileObjE_AC
fileObjE_AC:
   push     %r13
   mov      -8(%rbx), %r13
   call     nameX_X
   call     fileObjX_AC
   pop      %r13
   ret

   .balign  16
   .globl  dbFileBlkY_AC
dbFileBlkY_AC:
   push     %r13
   mov      %r14, %r13
   call     fileObjX_AC
   shl      $6, %rax
   shl      $6, %rdx
   pop      %r13
   ret

   .globl  rdLockDb
rdLockDb:
   cmpq     $TSym, Solo
   jz       .2888
   mov      $65536, %rax
   mov      DbFiles, %r10
   mov      (%r10), %rdx
   jmp      lockFileAC
.2888:
   rep
   ret

   .globl  wrLockDb
wrLockDb:
   cmpq     $TSym, Solo
   jz       .2889
   mov      $65537, %rax
   mov      DbFiles, %r10
   mov      (%r10), %rdx
   jmp      lockFileAC
.2889:
   rep
   ret

   .globl  rwUnlockDbA
rwUnlockDbA:
   cmpq     $TSym, Solo
   jz       .2890
   cmp      %r12, %rax
   jnz      .2891
   push     %r13
   push     %r14
   mov      DbFiles, %r13
   mov      DBs, %r14
.2892:
   sub      $64, %r14
   jz       .2893
   add      $64, %r13
   cmp      %r12b, 32(%r13)
   jz       .2892
   mov      $2, %rax
   mov      (%r13), %rdx
   call     unLockFileAC
   mov      %r12b, 32(%r13)
   jmp      .2892
.2893:
   pop      %r14
   pop      %r13
   movq     $2, Solo
   mov      %r12, %rax
.2891:
   orb      $2, %al
   mov      DbFiles, %r10
   mov      (%r10), %rdx
   call     unLockFileAC
.2890:
   rep
   ret

   .globl  tryLockCE_FA
tryLockCE_FA:
.2895:
   mov      %rdx, Flock+8
   mov      %rbx, Flock+16
   mov      $1, %rax
   mov      %ax, Flock
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      $6, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2896
   mov      DbFile, %r11
   movb     $1, 32(%r11)
   cmp      %r12, %rdx
   jnz      .2897
   movq     $TSym, Solo
   jmp      .2898
.2897:
   cmpq     $TSym, Solo
   jz       .2898
   movq     $Nil, Solo
.2898:
   or       %r12, %r12
   ret
.2896:
   call     errno_A
   cmp      $4, %rax
   jz       .2900
   cmp      $13, %rax
   jz       .2900
   cmp      $11, %rax
   jnz      lockErr
.2900:
   mov      %rdx, Flock+8
   mov      %rbx, Flock+16
.2902:
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      $5, %rsi
   mov      $Flock, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .2903
   call     errno_A
   cmp      $4, %rax
   jnz      lockErr
   jmp      .2902
.2903:
   movzwq   Flock, %rax
   cmp      $2, %al
   jz       .2895
   movl     Flock+24, %eax
   ret

   .globl  jnlFileno_A
jnlFileno_A:
   mov      %rdx, %r12
   mov      DbJnl, %rdi
   call     fileno
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .globl  logFileno_A
logFileno_A:
   mov      %rdx, %r12
   mov      DbLog, %rdi
   call     fileno
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .globl  lockJnl
lockJnl:
   call     jnlFileno_A
   mov      %rax, %rdx
   jmp      wrLockFileC

   .globl  unLockJnl
unLockJnl:
   mov      %rdx, %r12
   mov      DbJnl, %rdi
   call     fflush
   mov      %r12, %rdx
   xor      %r12, %r12
   call     jnlFileno_A
   mov      %rax, %rdx
   mov      $2, %rax
   jmp      unLockFileAC

   .balign  16
   .globl  setBlockAC_Z
setBlockAC_Z:
   add      DbFiles, %rax
setBlkAC_Z:
   mov      %rax, DbFile
   mov      %rdx, BlkIndex
   mov      24(%rax), %rax
   mov      DbBlock, %r15
   add      %r15, %rax
   mov      %rax, BufEnd
   ret

   .globl  rdBlockLinkZ_Z
rdBlockLinkZ_Z:
   mov      BlkLink, %rax

   .globl  rdBlockIndexAZ_Z
rdBlockIndexAZ_Z:
   mov      %rax, BlkIndex
   mov      DbBlock, %r15

   .globl  rdBlockZ_Z
rdBlockZ_Z:
   mov      DbFile, %rax
   mov      24(%rax), %rdx
   mov      BlkIndex, %rbx
   mov      16(%rax), %cl
   shl      %cl, %rbx
   call     blkPeekCEZ
   call     getAdrZ_A
   andb     $~63, %al
   mov      %rax, BlkLink
   add      $6, %r15
   ret

   .globl  blkPeekCEZ
blkPeekCEZ:
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      %r15, %rsi
   mov      %r12, %rdx
   mov      %rbx, %rcx
   call     pread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %rdx, %rax
   jnz      dbRdErr
   rep
   ret

   .globl  wrBlockZ
wrBlockZ:
   mov      DbFile, %rax
   mov      24(%rax), %rdx
   mov      BlkIndex, %rbx
   mov      16(%rax), %cl
   shl      %cl, %rbx

   .globl  blkPokeCEZ
blkPokeCEZ:
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      %r15, %rsi
   mov      %r12, %rdx
   mov      %rbx, %rcx
   call     pwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %rdx, %rax
   jnz      dbWrErr
   cmp      %r12, DbJnl
   jz       Ret
   mov      DbFile, %r10
   cmp      24(%r10), %rax
   jnz      .2904
   mov      $64, %rax
.2904:
   mov      %rdx, %r12
   mov      %rax, %rdi
   mov      DbJnl, %rsi
   call     putc_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   sub      $8, %rsp
   mov      DbFile, %r10
   mov      8(%r10), %rax
   mov      %al, (%rsp)
   shr      $8, %rax
   mov      %al, 1(%rsp)
   mov      %rbx, %rax
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shr      %cl, %rax
   call     setAdrAS
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $8, %rsi
   mov      $1, %rdx
   mov      DbJnl, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrJnlErr
   mov      %rdx, %r12
   mov      %r15, %rdi
   mov      %r12, %rsi
   mov      $1, %rdx
   mov      DbJnl, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrJnlErr
   add      $8, %rsp
   ret

   .globl  logBlock
logBlock:
   sub      $8, %rsp
   mov      DbFile, %r10
   mov      8(%r10), %rax
   mov      %al, (%rsp)
   shr      $8, %rax
   mov      %al, 1(%rsp)
   mov      BlkIndex, %rax
   call     setAdrAS
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $8, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrLogErr
   mov      %rdx, %r12
   mov      DbBlock, %rdi
   mov      DbFile, %r10
   mov      24(%r10), %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      wrLogErr
   add      $8, %rsp
   ret

   .globl  newBlock_X
newBlock_X:
   push     %r15
   mov      $12, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   cmp      %r12, %rax
   jz       newBlock_X_10
   mov      DbFile, %r10
   cmp      %r12, 56(%r10)
   jz       newBlock_X_10
   mov      %rax, %r13
   mov      DbFile, %rdx
   mov      16(%rdx), %cl
   shl      %cl, %rax
   decq     56(%rdx)
   mov      %rax, %rbx
   mov      $6, %rdx
   call     blkPeekCEZ
   mov      %r12, %rbx
   mov      $12, %rdx
   jmp      .2906
newBlock_X_10:
   add      $6, %r15
   call     getAdrZ_A
   mov      $281474976710592, %r10
   cmp      %r10, %rax
   jz       dbSizErr
   mov      %rax, %r13
   add      $64, %rax
   call     setAdrAZ
   sub      $6, %r15
.2906:
   call     blkPokeCEZ
   mov      DbFile, %r10
   mov      24(%r10), %rdx
   sub      %rdx, %rsp
   mov      $0, %al
   lea      (%rsp), %rdi
   mov      %rdx, %rcx
   cld
   rep stosb
   mov      %r13, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   mov      %rsp, %r15
   call     blkPokeCEZ
   mov      DbFile, %r10
   add      24(%r10), %rsp
   pop      %r15
   ret

   .globl  newIdEX_X
newIdEX_X:
   dec      %rbx
   shl      $6, %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   cmp      %r12, DbLog
   jnz      .2907
   incq     EnvProtect
.2907:
   call     wrLockDb
   cmp      %r12, DbJnl
   jz       .2908
   call     lockJnl
.2908:
   call     newBlock_X
   mov      %r13, %rdx
   shr      $6, %rdx
   mov      DbFile, %r10
   mov      8(%r10), %rbx
   call     extNmCE_X
   cmp      %r12, DbJnl
   jz       .2909
   call     unLockJnl
.2909:
   mov      $65536, %rax
   call     rwUnlockDbA
   cmp      %r12, DbLog
   jnz      .2910
   decq     EnvProtect
.2910:
   rep
   ret

   .globl  isLifeE_F
isLifeE_F:
   push     %rbx
   call     fileObjE_AC
   pop      %rbx
   shl      $6, %rdx
   jz       retnz
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      .2911
   add      DbFiles, %rax
   mov      %rax, DbFile
   mov      -8(%rbx), %rax
   call     nameA_A
   shl      $1, %rax
   jc       retz
   shl      $1, %rax
   jc       Retz
   push     %rbx
   push     %r15
   push     %rdx
   mov      $6, %rdx
   mov      $6, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   pop      %rdx
   cmp      %rax, %rdx
   jnc      retnz
   mov      %rdx, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   mov      $6, %rdx
   call     blkPeekCEZ
   mov      (%r15), %al
   and      $63, %al
   cmp      $1, %al
   pop      %r15
   pop      %rbx
   jmp      .2912
.2911:
   testb    $0x0E, Ext
.2912:
   rep
   ret

   .globl  cleanUpY
cleanUpY:
   mov      $6, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   push     %rax
   mov      %r14, %rax
   call     setAdrAZ
   call     blkPokeCEZ
   mov      %r14, %rbx
.2913:
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   call     blkPeekCEZ
   andb     $~63, (%r15)
   call     getAdrZ_A
   cmp      %r12, %rax
   jz       .2914
   mov      %rax, %r14
   call     blkPokeCEZ
   mov      %r14, %rbx
   jmp      .2913
.2914:
   pop      %rax
   call     setAdrAZ
   jmp      blkPokeCEZ

   .balign  16
   .globl  getBlockZ_FB
getBlockZ_FB:
   cmp      BufEnd, %r15
   jnz      .2915
   mov      BlkLink, %rax
   cmp      %r12, %rax
   jz       ret
   push     %rdx
   push     %rbx
   call     rdBlockIndexAZ_Z
   pop      %rbx
   pop      %rdx
.2915:
   mov      (%r15), %al
   add      $1, %r15
   ret

   .balign  16
   .globl  putBlockBZ
putBlockBZ:
   cmp      BufEnd, %r15
   jnz      .2916
   push     %rax
   push     %rdx
   push     %rbx
   mov      DbBlock, %r15
   cmp      %r12, BlkLink
   jz       .2917
   call     wrBlockZ
   call     rdBlockLinkZ_Z
   jmp      .2918
.2917:
   push     %r13
   call     newBlock_X
   mov      (%r15), %al
   movzx    %al, %rax
   push     %rax
   or       %r13, %rax
   call     setAdrAZ
   call     wrBlockZ
   mov      %r13, BlkIndex
   pop      %rax
   cmp      $63, %rax
   jz       .2919
   inc      %rax
.2919:
   call     setAdrAZ
   add      $6, %r15
   pop      %r13
.2918:
   pop      %rbx
   pop      %rdx
   pop      %rax
.2916:
   mov      %al, (%r15)
   inc      %r15
   ret

   .balign  16
   nop
   nop
   .globl  doPool
doPool:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evSymY_E
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   push     %rbp
   mov      %rsp, %rbp
   call     evListE_E
   pop      %rbp
1:
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   cmp      $Nil, %rbx
   jz       .2920
   testb    $0x0E, %bl
   jnz      lstErrEX
.2920:
   mov      8(%r14), %r14
   call     evSymY_E
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   mov      8(%r14), %r14
   call     evSymY_E
   mov      (%rsp), %rbp
   movq     %rbx, (%rsp)
   push     %rbp
   mov      %rsp, %rbp
   movq     $2, Solo
   cmp      %r12, DBs
   jz       .2921
   call     doRollback
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2922:
   mov      (%rbx), %rax
   call     closeAX
   mov      %rdx, %r12
   mov      48(%rbx), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   add      $64, %rbx
   sub      $64, %rdx
   jnz      .2922
   mov      %r12, DBs
   cmp      %r12, DbJnl
   jz       .2923
   mov      %rdx, %r12
   mov      DbJnl, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, DbJnl
.2923:
   cmp      %r12, DbLog
   jz       .2921
   mov      %rdx, %r12
   mov      DbLog, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, DbLog
.2921:
   mov      32(%rbp), %rbx
   cmp      $Nil, %rbx
   jz       .2925
   push     %rax
   call     pathStringE_SZ
   cld
   xor      %rcx, %rcx
   not      %rcx
   mov      %rsp, %rdi
   xchg     %al, %r12b
   repnz scasb
   xchg     %al, %r12b
   not      %rcx
   dec      %rcx
   mov      %rcx, %rdx
   add      %rsp, %rdx
   push     %rdx
   mov      $64, %rbx
   mov      24(%rbp), %rax
   testb    $0x0E, %al
   jnz      .2926
   mov      %r12, %rbx
.2927:
   add      $64, %rbx
   mov      8(%rax), %rax
   testb    $0x0E, %al
   jz       .2927
.2926:
   mov      DbFiles, %rax
   call     allocAE_A
   mov      %rax, DbFiles
   mov      %rax, %r14
   add      %rbx, %rax
   push     %rax
   mov      %r12, MaxBlkSize
.2928:
   mov      8(%rsp), %rdx
   mov      %r14, %rax
   sub      DbFiles, %rax
   shr      $6, %rax
   mov      %rax, 8(%r14)
   testb    $0x0E, 24(%rbp)
   jnz      .2929
   call     bufAoAC_C
.2929:
   mov      %r12b, (%rdx)
   mov      24(%rbp), %rax
   mov      8(%rax), %r10
   mov      %r10, 24(%rbp)
   mov      (%rax), %rax
   testb    $0x02, %al
   mov      $2, %r10
   cmovzq   %r10, %rax
   jz       .2930
   shr      $4, %rax
.2930:
   mov      %al, 16(%r14)
   mov      %r14, DbFile
   mov      %rdx, %r12
   lea      16(%rsp), %rdi
   mov      $2, %rsi
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2931
   mov      %rax, (%r14)
   mov      $13, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   mov      12(%r15), %al
   mov      %al, 16(%r14)
   mov      $64, %rdx
   mov      %al, %cl
   shl      %cl, %rdx
   mov      %rdx, 24(%r14)
   jmp      .2932
.2931:
   mov      32(%rbp), %rbx
   call     errno_A
   cmp      $2, %rax
   jnz      openErrEX
   mov      %rdx, %r12
   lea      16(%rsp), %rdi
   mov      $194, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       openErrEX
   mov      %rax, (%r14)
   mov      $64, %rdx
   mov      16(%r14), %cl
   shl      %cl, %rdx
   mov      %rdx, 24(%r14)
   sub      %rdx, %rsp
   mov      $0, %al
   lea      (%rsp), %rdi
   mov      %rdx, %rcx
   cld
   rep stosb
   mov      %r12, %rbx
   lea      6(%rsp), %r15
   cmp      DbFiles, %r14
   jz       .2933
   mov      $64, %rax
   jmp      .2934
.2933:
   mov      $128, %rax
.2934:
   call     setAdrAZ
   mov      %rsp, %r15
   mov      16(%r14), %r10b
   mov      %r10b, 12(%r15)
   call     blkPokeCEZ
   cmp      DbFiles, %r14
   jnz      .2935
   mov      %r12, (%rsp)
   mov      %r12, 8(%rsp)
   mov      %rsp, %r15
   mov      $1, %rax
   call     setAdrAZ
   mov      24(%r14), %rbx
   call     blkPokeCEZ
.2935:
   add      24(%r14), %rsp
.2932:
   mov      (%r14), %rax
   call     closeOnExecAX
   mov      24(%r14), %rax
   cmp      MaxBlkSize, %rax
   jbe      .2936
   mov      %rax, MaxBlkSize
.2936:
   mov      %r12, 32(%r14)
   mov      %r12, 40(%r14)
   mov      %r12, 48(%r14)
   movq     $-1, 56(%r14)
   add      $64, %r14
   mov      %r14, %rax
   sub      DbFiles, %rax
   mov      %rax, DBs
   cmp      (%rsp), %r14
   jnz      .2928
   mov      DbBlock, %rax
   mov      MaxBlkSize, %rbx
   call     allocAE_A
   mov      %rax, DbBlock
   mov      16(%rbp), %rbx
   cmp      $Nil, %rbx
   jz       .2937
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_a_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       openErrEX
   mov      %rax, DbJnl
   call     jnlFileno_A
   call     closeOnExecAX
.2937:
   mov      8(%rbp), %rbx
   cmp      $Nil, %rbx
   jz       .2925
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_ap_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       openErrEX
   mov      %rax, DbLog
   call     logFileno_A
   call     closeOnExecAX
   call     rewindLog
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       .2939
   mov      %rdx, %r12
   mov      DbLog, %rdi
   call     feof
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .2942
   call     ignLog
   jmp      .2939
.2942:
   movzwq   Buf, %rax
   cmp      $65535, %rax
   jnz      .2943
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $RolbLog, %rsi
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   call     rewindLog
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2944:
   mov      %r12b, 33(%rbx)
   sub      $64, %rdx
   jnz      .2944
   sub      MaxBlkSize, %rsp
.2945:
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       jnlErrX
   movzwq   Buf, %rax
   cmp      $65535, %rax
   jz       .2946
   call     dbfBuf_AF
   jc       jnlErrX
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $6, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      DbFile, %r10
   mov      24(%r10), %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   mov      $Buf, %r15
   call     getAdrZ_A
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rax
   mov      DbFile, %r10
   mov      24(%r10), %rdx
   mov      %rdx, %r12
   mov      DbFile, %r10
   mov      (%r10), %rdi
   mov      %rsp, %rsi
   mov      %r12, %rdx
   mov      %rax, %rcx
   call     pwrite
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %rdx, %rax
   jnz      dbWrErr
   mov      DbFile, %r11
   movb     $1, 33(%r11)
   jmp      .2945
.2946:
   add      MaxBlkSize, %rsp
   call     fsyncDB
   jmp      .2939
.2943:
   call     dbfBuf_AF
   jc       doPool_40
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $6, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      doPool_40
   mov      %rdx, %r12
   mov      DbLog, %rdi
   mov      DbFile, %r10
   mov      24(%r10), %rsi
   mov      $1, %rdx
   call     fseek
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      doPool_40
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      DbLog, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jz       .2942
doPool_40:
   call     ignLog
.2939:
   call     truncLog
.2925:
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   mov      $TSym, %rbx
   ret
RolbLog:
   .asciz   "Last transaction not completed: Rollbackn"

   .globl  ignLog
ignLog:
   mov      %rdx, %r12
   mov      stderr, %rdi
   mov      $IgnLog, %rsi
   xor      %rax, %rax
   call     fprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   ret
IgnLog:
   .asciz   "Discarding incomplete transaction.n"

   .globl  rewindLog
rewindLog:
   mov      %rdx, %r12
   mov      DbLog, %rdi
   xor      %rsi, %rsi
   xor      %rdx, %rdx
   call     fseek
   mov      %r12, %rdx
   xor      %r12, %r12
   ret

   .globl  fsyncDB
fsyncDB:
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.2949:
   cmp      %r12b, 33(%rbx)
   jz       .2950
   mov      %rdx, %r12
   mov      (%rbx), %rdi
   call     fsync
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       dbSyncErrX
.2950:
   sub      $64, %rdx
   jnz      .2949
   rep
   ret

   .globl  truncLog
truncLog:
   call     rewindLog
   call     logFileno_A
   mov      %rdx, %r12
   mov      %rax, %rdi
   xor      %rsi, %rsi
   call     ftruncate
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      truncErrX
   rep
   ret

   .balign  16
   .globl  bufAoAC_C
bufAoAC_C:
   cmp      $15, %rax
   jbe      .2951
   push     %rax
   shr      $4, %rax
   call     bufAoAC_C
   pop      %rax
   and      $15, %al
.2951:
   add      $64, %al
   mov      %al, (%rdx)
   inc      %rdx
   ret

   .balign  16
   nop
   nop
   .globl  doJournal
doJournal:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   sub      MaxBlkSize, %rsp
.2952:
   testb    $0x0E, %r14b
   jnz      .2953
   call     evSymY_E
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $_r_, %rsi
   call     fopen
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   cmp      %r12, %rax
   jz       openErrEX
   mov      %rax, %rbx
.2954:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     getc_unlocked
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .2955
   mov      %rax, %rdx
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $2, %rsi
   mov      $1, %rdx
   mov      %rbx, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   call     dbfBuf_AF
   jc       dbfErrX
   cmp      $64, %rdx
   cmovzq   24(%rax), %rdx
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $6, %rsi
   mov      $1, %rdx
   mov      %rbx, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      %r12, %rsi
   mov      $1, %rdx
   mov      %rbx, %rcx
   call     fread
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      $1, %rax
   jnz      jnlErrX
   push     %rbx
   mov      $Buf, %r15
   call     getAdrZ_A
   mov      %rax, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   lea      8(%rsp), %r15
   call     blkPokeCEZ
   pop      %rbx
   jmp      .2954
.2955:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     fclose
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      8(%r14), %r14
   jmp      .2952
.2953:
   add      MaxBlkSize, %rsp
   mov      $TSym, %rbx
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doId
doId:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .2956
   shr      $4, %rbx
   push     %rbx
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2957
   pop      %rdx
   mov      %r12, %rbx
   jmp      .2958
.2957:
   call     xCntEX_FE
   mov      %rbx, %rdx
   pop      %rbx
   dec      %rbx
.2958:
   call     extNmCE_X
   call     externX_E
   pop      %r14
   pop      %r13
   ret
.2956:
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   xchg     %r14, %rbx
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   xchg     %r14, %rbx
   call     fileObjE_AC
   shl      $4, %rdx
   orb      $2, %dl
   cmp      $Nil, %r14
   cmovzq   %rdx, %rbx
   jz       .2959
   inc      %rax
   shl      $4, %rax
   orb      $2, %al
   call     cons_E
   mov      %rax, (%rbx)
   mov      %rdx, 8(%rbx)
.2959:
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doSeq
doSeq:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jz       .2960
   andb     $~15, %bl
   sub      $16, %rbx
   shl      $2, %rbx
   push     %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   mov      %r12, %r13
   jmp      .2961
.2960:
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   call     fileObjE_AC
   shl      $6, %rax
   push     %rax
   cmp      DBs, %rax
   jnc      dbfErrX
   add      DbFiles, %rax
   mov      %rax, DbFile
   shl      $6, %rdx
   mov      %rdx, %r13
.2961:
   call     rdLockDb
   mov      $6, %rdx
   mov      $6, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   mov      %rax, %r14
.2962:
   add      $64, %r13
   cmp      %r14, %r13
   jc       .2963
   pop      %rax
   mov      $Nil, %rbx
   jmp      .2964
.2963:
   mov      %r13, %rbx
   mov      DbFile, %r10
   mov      16(%r10), %cl
   shl      %cl, %rbx
   mov      $6, %rdx
   call     blkPeekCEZ
   mov      (%r15), %al
   and      $63, %al
   cmp      $1, %al
   jnz      .2962
   pop      %rbx
   shr      $6, %rbx
   mov      %r13, %rdx
   shr      $6, %rdx
   call     extNmCE_X
   call     externX_E
.2964:
   mov      $65536, %rax
   call     rwUnlockDbA
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doLieu
doLieu:
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   testb    $0x06, %bl
   jnz      retNil
   testb    $0x08, %bl
   jz       retNil
   mov      -8(%rbx), %rax
   testb    $0x08, %al
   jz       retNil
   andb     $~8, %al
.2966:
   testb    $0x06, %al
   jz       .2967
   shl      $1, %rax
   jc       .2968
   shl      $1, %rax
   mov      $Nil, %r10
   cmovncq  %r10, %rbx
   ret
.2968:
   shl      $1, %rax
   mov      $Nil, %r10
   cmovcq   %r10, %rbx
   ret
.2967:
   mov      8(%rax), %rax
   jmp      .2966

   .balign  16
   nop
   nop
   .globl  doLock
doLock:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jnz      .2969
   mov      DbFiles, %r10
   mov      %r10, DbFile
   mov      %r12, %rdx
   mov      %r12, %rbx
   call     tryLockCE_FA
   jmp      .2970
.2969:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   call     fileObjE_AC
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      dbfErrX
   add      DbFiles, %rax
   mov      %rax, DbFile
   mov      24(%rax), %rax
   mulq     %rdx
   mov      %rax, %rdx
   mov      $1, %rbx
   call     tryLockCE_FA
.2970:
   mov      $Nil, %rbx
   jz       .2971
   mov      %rax, %rbx
   shl      $4, %rbx
   orb      $2, %bl
.2971:
   pop      %r13
   ret

   .balign  16
   .globl  dbSizeX_A
dbSizeX_A:
   testb    $0x02, %r13b
   jz       .2972
   shr      $3, %r13
   jmp      dbSizeX_A_20
.2972:
   testb    $0x04, %r13b
   jz       .2973
   mov      $9, %rax
.2974:
   mov      -4(%r13), %rdx
   mov      4(%r13), %r13
   testb    $0x02, %r13b
   jnz      .2975
   add      $8, %rax
   jmp      .2974
.2975:
   shr      $4, %r13
   shl      $1, %rdx
   adc      %r13, %r13
   jmp      dbSizeX_A_40
.2973:
   mov      $1, %rax
   cmp      $Nil, %r13
   jz       .2976
   testb    $0x08, %r13b
   jz       .2977
   mov      -8(%r13), %r13
   call     nameX_X
   cmpq     $2, %r13
   jz       .2978
   testb    $0x02, %r13b
   jz       .2979
   shl      $2, %r13
   shr      $6, %r13
dbSizeX_A_20:
   mov      $2, %rax
.2980:
   shr      $8, %r13
   jz       .2981
   inc      %rax
   jmp      .2980
.2981:
   rep
   ret
.2979:
   mov      $9, %rax
.2982:
   mov      4(%r13), %r13
   testb    $0x02, %r13b
   jnz      .2983
   add      $8, %rax
   jmp      .2982
.2983:
   shr      $4, %r13
dbSizeX_A_40:
   jz       .2984
.2985:
   inc      %rax
   shr      $8, %r13
   jnz      .2985
.2984:
   cmp      $64, %rax
   jc       .2978
   mov      %rax, %r13
   sub      $64, %rax
   mov      %r12, %rdx
   mov      $255, %r10
   div      %r10
   stc
   adc      %r13, %rax
.2978:
   rep
   ret
.2977:
   push     %r13
   pushq    $2
.2987:
   pushq    8(%r13)
   mov      (%r13), %r13
   call     dbSizeX_A
   pop      %r13
   add      %rax, (%rsp)
   cmp      $Nil, %r13
   jz       .2988
   cmp      8(%rsp), %r13
   jnz      .2989
   incq     (%rsp)
   jmp      .2988
.2989:
   testb    $0x0E, %r13b
   jz       .2987
   call     dbSizeX_A
   add      %rax, (%rsp)
.2988:
   pop      %rax
   pop      %rdx
.2976:
   rep
   ret

   .balign  16
   .globl  dbFetchEX
dbFetchEX:
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jz       Ret
   rcl      $1, %rax
   jc       ret
   rcl      $1, %rax
   jc       ret
   stc
   rcr      $1, %rax
   shr      $1, %rax
   push     %rdx
dbAEX:
   push     %r14
   push     %r15
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .2991
   call     setBlockAC_Z
   call     rdLockDb
   call     rdBlockZ_Z
   mov      -6(%r15), %al
   and      $63, %al
   cmp      $1, %al
   jnz      idErrXL
   movq     $getBlockZ_FB, GetBinZ_FB
   mov      %r12, Extn
   call     binReadZ_FE
   mov      8(%rbp), %rax
   mov      %rbx, (%rax)
   mov      %r14, -8(%rax)
   call     binReadZ_FE
   cmp      $Nil, %rbx
   jz       .2992
   call     consE_A
   mov      %rbx, (%rax)
   mov      %r14, 8(%rax)
   mov      %rax, %r14
   orb      $8, %al
   mov      8(%rbp), %r11
   mov      %rax, -8(%r11)
   call     binReadZ_FE
   cmp      $TSym, %rbx
   jz       .2994
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r14), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r14)
.2994:
   call     binReadZ_FE
   cmp      $Nil, %rbx
   jz       .2992
   call     consE_A
   mov      %rbx, (%rax)
   mov      8(%r14), %r10
   mov      %r10, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   call     binReadZ_FE
   cmp      $TSym, %rbx
   jz       .2994
   call     consE_A
   mov      %rbx, (%rax)
   mov      (%r14), %r10
   mov      %r10, 8(%rax)
   mov      %rax, (%r14)
   jmp      .2994
.2992:
   mov      $65536, %rax
   call     rwUnlockDbA
   jmp      .2997
.2991:
   shr      $6, %rax
   mov      Ext, %r15
   testb    $0x0E, %r15b
   jnz      dbfErrX
   mov      (%r15), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   cmp      %rdx, %rax
   jc       dbfErrX
.2998:
   mov      8(%r15), %rbx
   testb    $0x0E, %bl
   jnz      .2999
   mov      (%rbx), %r10
   mov      (%r10), %rdx
   shr      $4, %rdx
   cmp      %rdx, %rax
   jc       .2999
   mov      %rbx, %r15
   jmp      .2998
.2999:
   push     %r14
   mov      (%r15), %r10
   pushq    8(%r10)
   mov      %rsp, %r14
   pushq    8(%rbp)
   mov      %rsp, %r15
   call     applyXYZ_E
   pop      %r15
   pop      %rax
   pop      %r14
   mov      (%rbx), %r10
   mov      %r10, (%r15)
   mov      8(%rbx), %rbx
   testb    $0x0E, %bl
   jnz      .3000
   orb      $8, %bl
   mov      %rbx, -8(%r15)
.3001:
   testb    $0x0E, 8(%rbx)
   jnz      .3002
   mov      8(%rbx), %rbx
   jmp      .3001
.3002:
   mov      %r14, 8(%rbx)
   jmp      .2997
.3000:
   orb      $8, %r14b
   mov      %r14, -8(%r15)
.2997:
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %rdx
   ret

   .balign  16
   .globl  dbTouchEX
dbTouchEX:
   push     %rdx
   lea      -8(%rbx), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jnz      .3004
   andb     $~8, %al
.3005:
   lea      8(%rax), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jz       .3005
.3004:
   rcl      $1, %rax
   jc       .3006
   rcl      $1, %rax
   jnc      .3007
   shr      $1, %rax
   stc
   rcr      $1, %rax
   mov      %rax, (%rdx)
   pop      %rdx
   ret
.3007:
   shr      $1, %rax
   stc
   rcr      $1, %rax
   jmp      dbAEX
.3006:
   pop      %rdx
   ret

   .balign  16
   .globl  dbZapE
dbZapE:
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      .3008
   andb     $~8, %al
.3009:
   mov      8(%rax), %rax
   testb    $0x06, %al
   jz       .3009
   orb      $8, %al
.3008:
   shl      $2, %rax
   stc
   rcr      $1, %rax
   stc
   rcr      $1, %rax
   mov      %rax, -8(%rbx)
   movq     $Nil, (%rbx)
   ret

   .balign  16
   nop
   nop
   .globl  doCommit
doCommit:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   cmp      %r12, DbLog
   jnz      .3010
   incq     EnvProtect
.3010:
   call     wrLockDb
   cmp      %r12, DbJnl
   jz       .3011
   call     lockJnl
.3011:
   cmp      %r12, DbLog
   jz       .3012
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.3013:
   mov      %r12b, 33(%rbx)
   mov      %r12, 56(%rbx)
   sub      $64, %rdx
   jnz      .3013
   push     %r13
   push     %r14
   mov      $Extern, %r13
   mov      %r12, %r14
.3015:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .3017
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %r14, 8(%rax)
   mov      %rdx, %r14
   jmp      .3015
.3017:
   mov      (%r13), %r10
   mov      -8(%r10), %rax
   call     nameA_A
   rcl      $1, %rax
   jnc      .3018
   push     %r14
   rcr      $1, %rax
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .3019
   call     setBlockAC_Z
   call     rdBlockZ_Z
.3020:
   call     logBlock
   cmp      %r12, BlkLink
   jz       .3021
   call     rdBlockLinkZ_Z
   jmp      .3020
.3021:
   mov      DbFile, %rdx
   movb     $1, 33(%rdx)
   rcl      $2, %r14
   jc       .3019
   incq     56(%rdx)
.3019:
   pop      %r14
.3018:
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .3025
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      %r14, (%rax)
   orb      $8, %dl
   mov      %rdx, %r14
   jmp      .3015
.3025:
   mov      %r14, %rax
   cmp      %r12, %rax
   jz       doCommit_20
   testb    $0x08, %al
   jnz      .3026
   mov      8(%rax), %rdx
   mov      8(%rdx), %r14
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   jmp      .3017
.3026:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r14
   mov      %r13, (%rdx)
   mov      %rax, %r13
   jmp      .3025
doCommit_20:
   mov      DbFiles, %r13
   mov      DBs, %r14
.3028:
   mov      56(%r13), %rax
   cmp      %r12, %rax
   jz       .3029
   push     %rax
   mov      %r13, %rax
   mov      %r12, %rdx
   call     setBlkAC_Z
   call     rdBlockZ_Z
.3030:
   call     logBlock
   cmp      %r12, BlkLink
   jz       .3031
   subq     $1, (%rsp)
   jc       .3031
   call     rdBlockLinkZ_Z
   jmp      .3030
.3031:
   pop      %rax
.3029:
   sub      $64, %r14
   jnz      .3028
   mov      %rdx, %r12
   mov      $255, %rdi
   mov      DbLog, %rsi
   call     putc_unlocked
   mov      $255, %rdi
   mov      DbLog, %rsi
   call     putc_unlocked
   mov      DbLog, %rdi
   call     fflush
   mov      %r12, %rdx
   xor      %r12, %r12
   call     logFileno_A
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     fsync
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       trSyncErrX
   pop      %r14
   pop      %r13
.3012:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmpq     $Nil, 8(%rbp)
   jnz      .3032
   push     %r12
   jmp      .3033
.3032:
   mov      Tell, %rax
   or       Children, %rax
   push     %rax
   jz       .3033
   push     %rax
   pushq    TellBuf
   sub      $4096, %rsp
   mov      %rsp, %r15
   call     tellBegZ_Z
   mov      8(%rbp), %rbx
   call     prTellEZ
   mov      %r15, -16(%rbp)
.3033:
   push     %r13
   push     %r14
   mov      $Extern, %r13
   mov      %r12, %r14
.3036:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .3038
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %r14, 8(%rax)
   mov      %rdx, %r14
   jmp      .3036
.3038:
   mov      (%r13), %r10
   lea      -8(%r10), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jnz      .3039
   andb     $~8, %al
.3040:
   lea      8(%rax), %rdx
   mov      (%rdx), %rax
   testb    $0x06, %al
   jz       .3040
.3039:
   rcl      $1, %rax
   jnc      .3041
   push     %r14
   rcl      $1, %rax
   jc       .3042
   stc
   rcr      $1, %rax
   shr      $1, %rax
   mov      %rax, (%rdx)
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .3051
   call     setBlockAC_Z
   call     rdBlockZ_Z
   mov      $1, %al
   or       %al, -6(%r15)
   movq     $putBlockBZ, PutBinBZ
   mov      (%r13), %r14
   mov      (%r14), %rbx
   mov      %r12, Extn
   call     binPrintEZ
   mov      -8(%r14), %r14
   andb     $~8, %r14b
.3044:
   testb    $0x06, %r14b
   jnz      .3045
   testb    $0x0E, (%r14)
   jnz      .3046
   mov      (%r14), %r10
   mov      8(%r10), %rbx
   call     binPrintEZ
   mov      (%r14), %r10
   mov      (%r10), %rbx
   call     binPrintEZ
   jmp      .3047
.3046:
   mov      (%r14), %rbx
   call     binPrintEZ
   mov      $TSym, %rbx
   call     binPrintEZ
.3047:
   mov      8(%r14), %r14
   jmp      .3044
.3045:
   mov      %r12, %rax
   call     putBlockBZ
   mov      DbBlock, %r15
   mov      (%r15), %al
   and      $63, %al
   movzx    %al, %rax
   call     setAdrAZ
   call     wrBlockZ
   mov      BlkLink, %r14
   cmp      %r12, %r14
   jz       .3048
   call     cleanUpY
.3048:
   cmp      %r12, -8(%rbp)
   jz       .3051
   mov      -16(%rbp), %r15
   mov      TellBuf, %r10
   lea      4086(%r10), %rax
   cmp      %rax, %r15
   jc       .3050
   call     tellEndZ
   lea      -4120(%rbp), %r15
   call     tellBegZ_Z
.3050:
   mov      (%r13), %rbx
   call     prTellEZ
   mov      %r15, -16(%rbp)
   jmp      .3051
.3042:
   shr      $2, %rax
   mov      %rax, (%rdx)
   mov      %rax, %r14
   call     dbFileBlkY_AC
   cmp      DBs, %rax
   jnc      .3051
   add      DbFiles, %rax
   mov      %rax, DbFile
   mov      %rdx, %r14
   call     cleanUpY
   cmp      %r12, -8(%rbp)
   jz       .3051
   mov      -16(%rbp), %r15
   mov      TellBuf, %r10
   lea      4086(%r10), %rax
   cmp      %rax, %r15
   jc       .3054
   call     tellEndZ
   lea      -4120(%rbp), %r15
   call     tellBegZ_Z
.3054:
   mov      (%r13), %rbx
   call     prTellEZ
   mov      %r15, -16(%rbp)
.3051:
   pop      %r14
.3041:
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .3057
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      %r14, (%rax)
   orb      $8, %dl
   mov      %rdx, %r14
   jmp      .3036
.3057:
   mov      %r14, %rax
   cmp      %r12, %rax
   jz       doCommit_40
   testb    $0x08, %al
   jnz      .3058
   mov      8(%rax), %rdx
   mov      8(%rdx), %r14
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   jmp      .3038
.3058:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r14
   mov      %r13, (%rdx)
   mov      %rax, %r13
   jmp      .3057
doCommit_40:
   pop      %r14
   pop      %r13
   cmp      %r12, -8(%rbp)
   jz       .3060
   mov      -16(%rbp), %r15
   call     tellEndZ
   add      $4096, %rsp
   popq     TellBuf
.3060:
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      %r12, DbJnl
   jz       .3061
   call     unLockJnl
.3061:
   mov      Zap, %r14
   testb    $0x0E, %r14b
   jnz      .3062
   pushq    OutFile
   sub      $8216, %rsp
   mov      8(%r14), %rbx
   call     pathStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $1089, %rsi
   mov      $438, %rdx
   call     open
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       openErrEX
   mov      %r15, %rsp
   mov      %rax, (%rsp)
   mov      %r12, 8(%rsp)
   mov      %r12, 16(%rsp)
   mov      %rsp, OutFile
   movq     $putStdoutB, PutBinBZ
   mov      (%r14), %r14
.3063:
   testb    $0x0E, %r14b
   jnz      .3064
   mov      (%r14), %rbx
   mov      %r12, Extn
   call     binPrintEZ
   mov      8(%r14), %r14
   jmp      .3063
.3064:
   mov      %rsp, %rax
   call     flushA_F
   mov      %rsp, %rax
   call     closeAX
   mov      Zap, %r11
   movq     $Nil, (%r11)
   add      $8216, %rsp
   popq     OutFile
.3062:
   cmp      %r12, DbLog
   jz       .3065
   call     fsyncDB
   call     truncLog
.3065:
   mov      %r12, %rax
   call     rwUnlockDbA
   cmp      %r12, DbLog
   jnz      .3066
   decq     EnvProtect
.3066:
   mov      DbFiles, %rbx
   mov      DBs, %rdx
.3067:
   movq     $-1, 56(%rbx)
   jnz      .3067
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doRollback
doRollback:
   push     %r13
   push     %r14
   mov      $Extern, %r13
   mov      %r12, %r14
.3069:
   mov      8(%r13), %rax
   testb    $0x0E, 8(%rax)
   jnz      .3071
   mov      %r13, %rdx
   mov      8(%rax), %r13
   mov      %r14, 8(%rax)
   mov      %rdx, %r14
   jmp      .3069
.3071:
   mov      (%r13), %rbx
   mov      -8(%rbx), %rax
   testb    $0x06, %al
   jnz      .3072
   andb     $~8, %al
.3073:
   mov      8(%rax), %rax
   testb    $0x06, %al
   jz       .3073
   orb      $8, %al
.3072:
   shl      $2, %rax
   shr      $2, %rax
   mov      %rax, -8(%rbx)
   movq     $Nil, (%rbx)
   mov      8(%r13), %rax
   testb    $0x0E, (%rax)
   jnz      .3076
   mov      %r13, %rdx
   mov      (%rax), %r13
   mov      %r14, (%rax)
   orb      $8, %dl
   mov      %rdx, %r14
   jmp      .3069
.3076:
   mov      %r14, %rax
   cmp      %r12, %rax
   jz       doRollback_90
   testb    $0x08, %al
   jnz      .3077
   mov      8(%rax), %rdx
   mov      8(%rdx), %r14
   mov      %r13, 8(%rdx)
   mov      %rax, %r13
   jmp      .3071
.3077:
   andb     $~8, %al
   mov      8(%rax), %rdx
   mov      (%rdx), %r14
   mov      %r13, (%rdx)
   mov      %rax, %r13
   jmp      .3076
doRollback_90:
   pop      %r14
   pop      %r13
   mov      $TSym, %rbx
   ret

   .balign  16
   nop
   nop
   .globl  doMark
doMark:
   push     %r13
   push     %r14
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmpq     $2, %rbx
   jnz      .3079
   mov      DbFiles, %r13
   mov      DBs, %r14
.3080:
   sub      $64, %r14
   jc       .3081
   mov      %r12, 40(%r13)
   mov      %rdx, %r12
   mov      48(%r13), %rdi
   call     free
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r12, 48(%r13)
   add      $64, %r13
   jmp      .3080
.3081:
   mov      $Nil, %rbx
   pop      %r14
   pop      %r13
   ret
.3079:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   testb    $0x08, -8(%rbx)
   jz       extErrEX
   push     %rbx
   mov      8(%r14), %r10
   mov      (%r10), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   xchg     (%rsp), %rbx
   call     fileObjE_AC
   shl      $6, %rax
   cmp      DBs, %rax
   jnc      dbfErrX
   add      DbFiles, %rax
   mov      %rax, %r13
   mov      %rdx, %rbx
   shr      $3, %rbx
   cmp      40(%r13), %rbx
   jc       .3082
   push     %rbx
   inc      %rbx
   mov      %rbx, %r14
   mov      48(%r13), %rax
   call     allocAE_A
   mov      %rax, 48(%r13)
   xchg     40(%r13), %rbx
   sub      %rbx, %r14
   add      %rax, %rbx
   mov      $0, %al
   lea      (%rbx), %rdi
   mov      %r14, %rcx
   cld
   rep stosb
   pop      %rbx
.3082:
   add      48(%r13), %rbx
   and      $7, %rdx
   mov      $1, %al
   mov      %dl, %cl
   shl      %cl, %al
   test     %al, (%rbx)
   jnz      .3083
   cmpq     $TSym, (%rsp)
   jnz      .3084
   or       %al, (%rbx)
.3084:
   mov      $Nil, %rbx
   jmp      .3085
.3083:
   cmpq     $2, (%rsp)
   jnz      .3086
   not      %al
   and      %al, (%rbx)
.3086:
   mov      $TSym, %rbx
.3085:
   pop      %rax
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doFree
doFree:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evCntEX_FE
   dec      %rbx
   shl      $6, %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   call     rdLockDb
   mov      $12, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   mov      %rax, BlkLink
   add      $6, %r15
   call     getAdrZ_A
   mov      %rax, %rdx
   shr      $6, %rdx
   mov      DbFile, %r10
   mov      8(%r10), %rbx
   call     extNmCE_X
   call     externX_E
   call     cons_Y
   mov      %rbx, (%r14)
   movq     $Nil, 8(%r14)
   push     %rbp
   mov      %rsp, %rbp
   push     %r14
   push     %rbp
   mov      %rsp, %rbp
.3087:
   mov      BlkLink, %rdx
   cmp      %r12, %rdx
   jz       .3088
   shr      $6, %rdx
   mov      DbFile, %r10
   mov      8(%r10), %rbx
   call     extNmCE_X
   call     externX_E
   call     cons_A
   mov      %rbx, (%rax)
   movq     $Nil, 8(%rax)
   mov      %rax, 8(%r14)
   mov      %rax, %r14
   call     rdBlockLinkZ_Z
   jmp      .3087
.3088:
   mov      $65536, %rax
   call     rwUnlockDbA
   mov      8(%rbp), %rbx
   mov      (%rbp), %rsp
   pop      %rbp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doDbck
doDbck:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      DbFiles, %r10
   mov      %r10, DbFile
   testb    $0x02, %bl
   jz       .3089
   andb     $~15, %bl
   sub      $16, %rbx
   shl      $2, %rbx
   cmp      DBs, %rbx
   jnc      dbfErrX
   add      DbFiles, %rbx
   mov      %rbx, DbFile
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.3089:
   push     %rbx
   pushq    $2
   pushq    $2
   incq     EnvProtect
   call     wrLockDb
   cmp      %r12, DbJnl
   jz       .3090
   call     lockJnl
.3090:
   mov      $12, %rdx
   mov      %r12, %rbx
   mov      $Buf, %r15
   call     blkPeekCEZ
   call     getAdrZ_A
   mov      %rax, BlkLink
   add      $6, %r15
   call     getAdrZ_A
   push     %rax
   mov      $64, %r14
.3091:
   mov      BlkLink, %rax
   cmp      %r12, %rax
   jz       .3092
   call     rdBlockIndexAZ_Z
   add      $64, %r14
   cmp      (%rsp), %r14
   jbe      .3093
   mov      $CircFree, %rbx
   call     mkStrE_E
   jmp      doDbck_90
.3093:
   mov      DbBlock, %r15
   orb      $63, (%r15)
   call     wrBlockZ
   jmp      .3091
.3092:
   mov      $64, %r13
.3094:
   cmp      (%rsp), %r13
   jz       .3095
   mov      %r13, %rax
   call     rdBlockIndexAZ_Z
   sub      $6, %r15
   mov      (%r15), %al
   and      $63, %al
   jnz      .3096
   add      $64, %r14
   mov      %r15, %rdi
   lea      Buf, %rsi
   mov      $6, %rcx
   cld
   rep movsb
   call     wrBlockZ
   mov      %r13, %rax
   mov      $Buf, %r15
   call     setAdrAZ
   mov      $6, %rdx
   mov      %r12, %rbx
   call     blkPokeCEZ
   jmp      .3097
.3096:
   cmp      $1, %al
   jnz      .3097
   push     %r13
   addq     $16, 16(%rsp)
   addq     $16, 24(%rsp)
   add      $64, %r14
   mov      $2, %r13
.3099:
   mov      BlkLink, %rax
   cmp      %r12, %rax
   jz       .3100
   add      $64, %r14
   addq     $16, 16(%rsp)
   call     rdBlockIndexAZ_Z
   mov      -6(%r15), %al
   and      $63, %al
   cmp      %r13b, %al
   jz       .3101
   mov      $BadChain, %rbx
   call     mkStrE_E
   jmp      doDbck_90
.3101:
   cmp      $63, %r13
   jnc      .3099
   inc      %r13
   jmp      .3099
.3100:
   pop      %r13
.3097:
   add      $64, %r13
   jmp      .3094
.3095:
   mov      $Buf, %r15
   call     getAdrZ_A
   mov      %rax, BlkLink
.3103:
   cmp      %r12, %rax
   jz       .3104
   call     rdBlockIndexAZ_Z
   sub      $6, %r15
   mov      (%r15), %al
   and      $63, %al
   jz       .3105
   andb     $~63, (%r15)
   call     wrBlockZ
.3105:
   mov      BlkLink, %rax
   jmp      .3103
.3104:
   cmp      (%rsp), %r14
   jz       .3106
   mov      $BadCount, %rbx
   call     mkStrE_E
   jmp      doDbck_90
.3106:
   cmpq     $Nil, 24(%rsp)
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       doDbck_90
   call     cons_E
   mov      8(%rsp), %r10
   mov      %r10, (%rbx)
   mov      16(%rsp), %r10
   mov      %r10, 8(%rbx)
doDbck_90:
   pop      %rax
   pop      %rax
   pop      %rax
   pop      %rax
   cmp      %r12, DbJnl
   jz       .3109
   call     unLockJnl
.3109:
   mov      $65536, %rax
   call     rwUnlockDbA
   decq     EnvProtect
   pop      %r15
   pop      %r14
   pop      %r13
   ret
CircFree:
   .asciz   "Circular free list"
BadChain:
   .asciz   "Bad chain"
BadCount:
   .asciz   "Bad count"

   .balign  16
   nop
   nop
   .globl  doPort
doPort:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      $1, %r15
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $TSym, %rbx
   jnz      .3110
   mov      $2, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
.3110:
   mov      %rdx, %r12
   mov      $2, %rdi
   mov      %r15, %rsi
   xor      %rdx, %rdx
   call     socket
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSocketErrX
   mov      %rax, %rdx
   call     closeOnExecAX
   mov      $0, %al
   lea      Addr, %rdi
   mov      $16, %rcx
   cld
   rep stosb
   mov      $2, %rax
   mov      %ax, Addr+0
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     htonl
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %eax, Addr+4
   testb    $0x02, %bl
   jz       .3111
   shr      $4, %rbx
   jz       .3112
   mov      $1, %rax
   mov      %eax, Buf
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $1, %rsi
   mov      $2, %rdx
   mov      $Buf, %rcx
   mov      $4, %r8
   call     setsockopt
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSetsockoptErrX
.3112:
   push     %r12
   jmp      .3114
.3111:
   testb    $0x0E, %bl
   jnz      argErrEX
   mov      8(%rbx), %rax
   mov      (%rbx), %rbx
   shr      $4, %rbx
   shr      $4, %rax
   push     %rax
.3114:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     htons
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %ax, Addr+2
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $Addr, %rsi
   mov      $16, %rdx
   call     bind
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .3115
   inc      %rbx
   cmp      (%rsp), %rbx
   jbe      .3114
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      ipBindErrX
.3115:
   pop      %rax
   cmp      $1, %r15
   jnz      .3117
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      $5, %rsi
   call     listen
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .3117
   mov      %rdx, %r12
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      ipListenErrX
.3117:
   mov      %rdx, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   jz       .3119
   mov      $16, %rax
   mov      %eax, Buf
   mov      %rdx, %r12
   mov      %r15, %rdi
   mov      $Addr, %rsi
   mov      $Buf, %rdx
   call     getsockname
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jns      .3120
   mov      %rdx, %r12
   mov      %r15, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   jmp      ipGetsocknameErrX
.3120:
   call     needVarEX
   movzwq   Addr+2, %rax
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     ntohs
   mov      %r12, %rdx
   xor      %r12, %r12
   shl      $4, %rax
   orb      $2, %al
   mov      %rax, (%rbx)
.3119:
   mov      %r15, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .globl  tcpAcceptA_FE
tcpAcceptA_FE:
   mov      %rax, %rbx
   call     nonblockingA_A
   push     %rax
   mov      $16, %rax
   mov      %eax, Buf
   mov      $200, %rdx
.3121:
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $Addr, %rsi
   mov      $Buf, %rdx
   call     accept
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       .3122
   xchg     (%rsp), %rax
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $4, %rsi
   mov      %rax, %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   movl     Addr+4, %eax
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     inet_ntoa
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %rbx
   call     mkStrE_E
   mov      %rbx, Adr
   mov      (%rsp), %rax
   call     initInFileA_A
   mov      (%rsp), %rax
   call     initOutFileA_A
   pop      %rbx
   shl      $4, %rbx
   orb      $2, %bl
   ret
.3122:
   mov      %rdx, %r12
   mov      $100000, %rdi
   call     usleep
   mov      %r12, %rdx
   xor      %r12, %r12
   dec      %rdx
   jnz      .3121
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      $4, %rsi
   pop      %rdx
   call     fcntl
   mov      %r12, %rdx
   xor      %r12, %r12
   or       %r12, %r12
   ret

   .balign  16
   nop
   nop
   .globl  doAccept
doAccept:
   push     %r13
   mov      %rbx, %r13
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evCntEX_FE
   mov      %rbx, %rax
   call     tcpAcceptA_FE
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doListen
doListen:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evCntXY_FE
   mov      %rbx, %r15
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      $Nil, %rbx
   mov      $-1, %r10
   cmovzq   %r10, %r14
   jz       .3124
   call     xCntEX_FE
   mov      %rbx, %r14
.3124:
   mov      %r15, %rdx
   mov      %r14, %rbx
   call     waitFdCEX_A
   mov      $Nil, %rbx
   cmp      %r12, %rax
   jz       .3125
   mov      %r15, %rax
   call     tcpAcceptA_FE
   jz       .3124
.3125:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   nop
   nop
   .globl  doHost
doHost:
   push     %r15
   mov      8(%rbx), %r10
   mov      (%r10), %rbx
   call     evSymE_E
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      $Buf, %rsi
   call     inet_aton
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r15, %rsp
   pop      %r15
   cmp      %r12d, %eax
   jz       retNil
   mov      %rdx, %r12
   mov      $Buf, %rdi
   mov      $4, %rsi
   mov      $2, %rdx
   call     gethostbyaddr
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       retNil
   mov      0(%rax), %rbx
   jmp      mkStrE_E

   .balign  16
   nop
   nop
   .globl  doConnect
doConnect:
   push     %r13
   push     %r14
   push     %r15
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   call     evSymY_E
   mov      8(%r14), %r14
   call     serverEY_F
   jz       doConnect_80
   mov      %rdx, %r12
   mov      $2, %rdi
   mov      $1, %rsi
   xor      %rdx, %rdx
   call     socket
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSocketErrX
   mov      %rax, %r14
   call     closeOnExecAX
   mov      %rdx, %r12
   mov      %r14, %rdi
   mov      $Addr, %rsi
   mov      $16, %rdx
   call     connect
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       .3126
   mov      %r14, %rax
   call     initInFileA_A
   mov      %r14, %rax
   call     initOutFileA_A
   mov      %r14, %rbx
   shl      $4, %rbx
   orb      $2, %bl
   jmp      .3127
.3126:
   mov      %rdx, %r12
   mov      %r14, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
doConnect_80:
   mov      $Nil, %rbx
.3127:
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .globl  serverEY_F
serverEY_F:
   push     %rbp
   mov      %rsp, %rbp
   push     %rbx
   push     %rbp
   mov      %rsp, %rbp
   mov      $0, %al
   lea      Addr, %rdi
   mov      $16, %rcx
   cld
   rep stosb
   call     evCntXY_FE
   mov      %rdx, %r12
   mov      %rbx, %rdi
   call     htons
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %ax, Addr+2
   mov      $2, %rax
   mov      %ax, Addr+0
   mov      8(%rbp), %rbx
   call     bufStringE_SZ
   mov      %rdx, %r12
   mov      %rsp, %rdi
   lea      Addr+4, %rsi
   call     inet_aton
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jnz      .3128
   mov      %rdx, %r12
   mov      %rsp, %rdi
   call     gethostbyname
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   jz       serverEY_F_90
   mov      %rax, %rbx
   movl     20(%rbx), %eax
   cmp      %r12d, %eax
   jz       serverEY_F_90
   mov      24(%rbx), %r10
   mov      (%r10), %r10
   movl     (%r10), %eax
   mov      %eax, Addr+4
.3128:
   cmp      %rsp, %r12
serverEY_F_90:
   mov      %r15, %rsp
   mov      (%rbp), %rsp
   pop      %rbp
   ret

   .balign  16
   nop
   nop
   .globl  doUdp
doUdp:
   push     %r13
   push     %r14
   push     %r15
   sub      $4096, %rsp
   mov      %rbx, %r13
   mov      8(%rbx), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      8(%r14), %r14
   testb    $0x0E, %r14b
   jz       .3129
   call     xCntEX_FE
   mov      %rdx, %r12
   mov      %rbx, %rdi
   mov      %rsp, %rsi
   mov      $4096, %rdx
   xor      %rcx, %rcx
   call     recv
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %rax
   js       doUdp_10
   mov      %rsp, %r15
   lea      4096(%r15), %r10
   mov      %r10, BufEnd
   movq     $getUdpZ_FB, GetBinZ_FB
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binReadZ_FE
   jnc      .3131
doUdp_10:
   mov      $Nil, %rbx
   jmp      .3131
.3129:
   call     serverEY_F
   mov      $Nil, %r10
   cmovzq   %r10, %rbx
   jz       .3131
   mov      8(%r14), %r14
   mov      (%r14), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   mov      %rbx, %r14
   mov      %rsp, %r15
   lea      4096(%r15), %r10
   mov      %r10, BufEnd
   movq     $putUdpBZ, PutBinBZ
   mov      ExtN, %r10
   mov      %r10, Extn
   call     binPrintEZ
   mov      %rdx, %r12
   mov      $2, %rdi
   mov      $2, %rsi
   xor      %rdx, %rdx
   call     socket
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   js       ipSocketErrX
   mov      %rax, %rdx
   sub      %rsp, %r15
   mov      %rdx, %r12
   mov      %r12, %rdi
   mov      %rsp, %rsi
   mov      %r15, %rdx
   xor      %rcx, %rcx
   mov      $Addr, %r8
   mov      $16, %r9
   call     sendto
   mov      %r12, %rdi
   call     close
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %r14, %rbx
.3131:
   add      $4096, %rsp
   pop      %r15
   pop      %r14
   pop      %r13
   ret

   .balign  16
   .globl  getUdpZ_FB
getUdpZ_FB:
   cmp      BufEnd, %r15
   jz       retc
   mov      (%r15), %al
   add      $1, %r15
   ret

   .balign  16
   .globl  putUdpBZ
putUdpBZ:
   cmp      BufEnd, %r15
   jz       udpOvflErr
   mov      %al, (%r15)
   inc      %r15
   ret

   .globl  dbgS
dbgS:
   xchg     (%rsp), %rbx
   xchg     8(%rsp), %rbx
   push     %rdx
   push     %rax
   pushf
   pushq    OutFile
   mov      OutFiles, %r10
   mov      16(%r10), %r10
   mov      %r10, OutFile
   pushq    PutB
   movq     $putStdoutB, PutB
   call     printE
   call     newline
   popq     PutB
   popq     OutFile
   popf
   pop      %rax
   pop      %rdx
   pop      %rbx
   ret

   .globl  errnoEXY
errnoEXY:
   call     errno_A
   mov      %rdx, %r12
   mov      %rax, %rdi
   call     strerror
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      %rax, %r15

   .globl  errEXYZ
errEXYZ:
   sub      $272, %rsp
   mov      %rdx, %r12
   mov      %rsp, %rdi
   mov      %r14, %rsi
   mov      %r15, %rdx
   xor      %rax, %rax
   call     sprintf
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12, %r13
   mov      $Nil, %rax
   cmovnzq  %r13, %rax
   mov      %rax, Up
   cmp      %r12b, (%rsp)
   jz       .3133
   push     %rbx
   lea      8(%rsp), %rbx
   call     mkStrE_E
   mov      %rbx, Msg
   mov      Catch, %rdx
.3134:
   cmp      %r12, %rdx
   jz       .3135
   mov      8(%rdx), %r14
   cmp      %r12, %r14
   jz       .3136
.3137:
   testb    $0x0E, %r14b
   jnz      .3136
   mov      (%r14), %rax
   mov      Msg, %rbx
   push     %rdx
   call     subStrAE_F
   pop      %rdx
   jnz      .3139
   mov      (%r14), %r14
   cmp      $Nil, %r14
   cmovzq   Msg, %r14
   push     %r14
   call     unwindC_Z
   pop      %rbx
   mov      %r15, %rsp
   jmp      caught
.3139:
   mov      8(%r14), %r14
   jmp      .3137
.3136:
   mov      (%rdx), %rdx
   jmp      .3134
.3135:
   pop      %rbx
.3133:
   mov      %r12, Chr
   mov      %r12, ExtN
   mov      %r12, Break
   movq     $Nil, Alarm
   movq     $Nil, Sigio
   movq     $2, LineX
   movq     $-1, LineC
   lea      240(%rsp), %r14
   movq     $2, 8(%r14)
   mov      %r12, 16(%r14)
   call     pushOutFilesY
   mov      InFile, %r14
   cmp      %r12, %r14
   jz       .3140
   mov      48(%r14), %rdx
   cmp      %r12, %rdx
   jz       .3140
   mov      $91, %al
   mov      PutB, %r10
   call     *%r10
   call     outStringC
   mov      $58, %al
   mov      PutB, %r10
   call     *%r10
   mov      40(%r14), %rax
   call     outWordA
   mov      $93, %al
   mov      PutB, %r10
   call     *%r10
   call     space
.3140:
   cmp      %r12, %r13
   jz       .3142
   mov      $ErrTok, %rdx
   call     outStringC
   push     %rbx
   mov      %r13, %rbx
   call     printE
   call     newline
   pop      %rbx
.3142:
   cmp      %r12, %rbx
   jz       .3143
   call     printE
   mov      $Dashes, %rdx
   call     outStringC
.3143:
   cmp      %r12b, (%rsp)
   jz       .3144
   call     outStringS
   call     newline
   cmpq     $Nil, Err
   jz       .3145
   cmp      %r12b, Jam
   jnz      .3145
   movb     $1, Jam
   mov      Err, %r13
1:
   mov      (%r13), %rbx
   test     $0x06, %bl
   jnz      2f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      2f
   call     evListE_E
2:
   mov      8(%r13), %r13
   testb    $0x0E, %r13b
   jz       1b
   mov      %r12b, Jam
.3145:
   mov      $1, %rbx
   mov      %rdx, %r12
   xor      %rdi, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       byeE
   mov      %rdx, %r12
   mov      $1, %rdi
   call     isatty
   mov      %r12, %rdx
   xor      %r12, %r12
   cmp      %r12d, %eax
   jz       byeE
   mov      $63, %al
   mov      $Nil, %rbx
   mov      %r12, %r13
   call     loadBEX_E
.3144:
   mov      %r12, %rdx
   call     unwindC_Z
   mov      %r12, EnvProtect
   movq     $Nil, EnvTask
   mov      %r12, EnvArgs
   mov      %r12, EnvNext
   mov      %r12, EnvMeth
   mov      %r12, EnvMake
   mov      %r12, EnvYoke
   mov      %r12, EnvTrace
   mov      %r12, %rbp
   mov      Stack0, %rsp
   lea      4096(%rsp), %rax
   sub      StkSize, %rax
   mov      %rax, StkLimit
   mov      %r12, Stacks
   jmp      restart
ErrTok:
   .asciz   "!? "
Dashes:
   .asciz   " -- "

   .balign  16
   .globl  unwindC_Z
unwindC_Z:
   push     %rdx
   mov      Catch, %r13
   mov      EnvBind, %r14
.3147:
   cmp      %r12, %r13
   jz       .3148
.3149:
   cmp      %r12, %r14
   jz       .3163
   mov      -8(%r14), %rdx
   cmp      %r12, %rdx
   jz       .3151
   mov      %rdx, %rax
   mov      %r12, %rbx
   mov      %r14, %r15
.3152:
   inc      %rbx
   inc      %rax
   jz       .3155
   mov      (%r15), %r10
   mov      8(%r10), %r15
   cmp      %r12, %r15
   jz       .3155
   cmp      %rax, -8(%r15)
   jnc      .3152
   dec      %rax
   jmp      .3152
.3155:
   mov      %rbx, %rax
   mov      %r14, %r15
.3156:
   dec      %rax
   jz       .3157
   mov      (%r15), %r10
   mov      8(%r10), %r15
   jmp      .3156
.3157:
   mov      (%r15), %rax
   sub      %rdx, -8(%r15)
   jbe      .3158
   mov      %r12, -8(%r15)
.3158:
   jc       .3159
   sub      $16, %rax
.3160:
   mov      (%rax), %r11
   mov      (%r11), %r10
   xchg     %r10, 8(%rax)
   mov      %r10, (%r11)
   sub      $16, %rax
   cmp      %r15, %rax
   jnc      .3160
.3159:
   dec      %rbx
   jnz      .3155
.3151:
   cmp      24(%r13), %r14
   jz       .3163
   mov      (%r14), %rdx
   cmp      %r12, -8(%r14)
   jnz      .3161
   add      $8, %r14
.3162:
   mov      (%r14), %r15
   add      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%r15)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .3162
.3161:
   mov      8(%rdx), %r14
   jmp      .3149
.3163:
   mov      32(%r13), %r10
   cmp      %r10, EnvInFrames
   jz       .3165
   call     popInFiles
   jmp      .3163
.3165:
   mov      40(%r13), %r10
   cmp      %r10, EnvOutFrames
   jz       .3167
   call     popOutFiles
   jmp      .3165
.3167:
   mov      48(%r13), %r10
   cmp      %r10, EnvCtlFrames
   jz       .3168
   call     popCtlFiles
   jmp      .3167
.3168:
   mov      EnvCo7, %r15
.3169:
   cmp      EnvCo7-EnvCo(%r13), %r15
   jz       .3170
   mov      Stack0, %rdx
   mov      $1, %rax
.3171:
   sub      StkSize, %rdx
   cmp      16(%r15), %rdx
   jz       .3172
   add      %rax, %rax
   jmp      .3171
.3172:
   not      %rax
   and      %rax, Stacks
   mov      (%r15), %r15
   jmp      .3169
.3170:
   lea      Env, %rdi
   lea      EnvEnd, %rcx
   lea      24(%r13), %rsi
   sub      %rdi, %rcx
   shr      $3, %rcx
   cld
   rep movsq
   mov      16(%r13), %rbx
   test     $0x06, %bl
   jnz      1f
   test     $0x08, %bl
   cmovnzq  (%rbx), %rbx
   jnz      1f
   call     evListE_E
1:
   cmp      (%rsp), %r13
   mov      (%r13), %r13
   mov      %r13, Catch
   jnz      .3147
   pop      %r15
   ret
.3148:
   pop      %rax
.3174:
   cmp      %r12, %r14
   jz       .3175
   mov      (%r14), %rdx
   cmp      %r12, -8(%r14)
   jnz      .3176
   add      $8, %r14
.3177:
   mov      (%r14), %r15
   add      $8, %r14
   mov      (%r14), %r10
   mov      %r10, (%r15)
   add      $8, %r14
   cmp      %rdx, %r14
   jnz      .3177
.3176:
   mov      8(%rdx), %r14
   jmp      .3174
.3175:
   mov      %r12, EnvBind
.3178:
   cmp      %r12, EnvInFrames
   jz       .3180
   call     popInFiles
   jmp      .3178
.3180:
   cmp      %r12, EnvOutFrames
   jz       .3182
   call     popOutFiles
   jmp      .3180
.3182:
   cmp      %r12, EnvCtlFrames
   jz       .3183
   call     popCtlFiles
   jmp      .3182
.3183:
   rep
   ret

   .balign  16
   .globl  needSymAX
needSymAX:
   testb    $0x06, %al
   jnz      symErrAX
   testb    $0x08, %al
   jz       symErrAX
   cmp      $Nil, %rax
   jc       ret
   cmp      $TSym, %rax
   ja       Ret
   mov      %rax, %rbx
   jmp      protErrEX

   .balign  16
   .globl  needSymEX
needSymEX:
   testb    $0x06, %bl
   jnz      symErrEX
   testb    $0x08, %bl
   jz       symErrEX
   cmp      $Nil, %rbx
   jc       ret
   cmp      $TSym, %rbx
   ja       Ret
   jmp      protErrEX

   .balign  16
   .globl  needVarAX
needVarAX:
   testb    $0x06, %al
   jnz      varErrAX
   cmp      $Nil, %rax
   jc       ret
   cmp      $TSym, %rax
   ja       Ret
   mov      %rax, %rbx
   jmp      protErrEX

   .balign  16
   .globl  needVarEX
needVarEX:
   testb    $0x06, %bl
   jnz      varErrEX
   cmp      $Nil, %rbx
   jc       ret
   cmp      $TSym, %rbx
   ja       Ret
   jmp      protErrEX

   .balign  16
   .globl  checkVarAX
checkVarAX:
   cmp      $Nil, %rax
   jc       ret
   cmp      $TSym, %rax
   ja       Ret
   mov      %rax, %rbx
   jmp      protErrEX

   .balign  16
   .globl  checkVarYX
checkVarYX:
   cmp      $Nil, %r14
   jc       ret
   cmp      $TSym, %r14
   ja       Ret
   mov      %r14, %rbx
   jmp      protErrEX

   .balign  16
   .globl  checkVarEX
checkVarEX:
   cmp      $Nil, %rbx
   jc       ret
   cmp      $TSym, %rbx
   ja       Ret

   .globl  protErrEX
protErrEX:
   mov      $ProtErr, %r14
   jmp      errEXYZ
ProtErr:
   .asciz   "Protected symbol"

   .globl  stkErr
stkErr:
   mov      %r12, %rbx

   .globl  stkErrE
stkErrE:
   mov      %rbx, %r13

   .globl  stkErrX
stkErrX:
   mov      %r12, %rbx

   .globl  stkErrEX
stkErrEX:
   mov      $StkErr, %r14
   mov      %r12, StkLimit
   jmp      errEXYZ
StkErr:
   .asciz   "Stack overflow"

   .globl  argErrAX
argErrAX:
   mov      %rax, %rbx

   .globl  argErrEX
argErrEX:
   mov      $ArgErr, %r14
   jmp      errEXYZ
ArgErr:
   .asciz   "Bad argument"

   .globl  numErrAX
numErrAX:
   mov      %rax, %rbx

   .globl  numErrEX
numErrEX:
   mov      $NumErr, %r14
   jmp      errEXYZ
NumErr:
   .asciz   "Number expected"

   .globl  cntErrAX
cntErrAX:
   mov      %rax, %rdx

   .globl  cntErrCX
cntErrCX:
   mov      %rdx, %rbx

   .globl  cntErrEX
cntErrEX:
   mov      $CntErr, %r14
   jmp      errEXYZ
CntErr:
   .asciz   "Small number expected"

   .globl  symErrAX
symErrAX:
   mov      %rax, %r14

   .globl  symErrYX
symErrYX:
   mov      %r14, %rbx

   .globl  symErrEX
symErrEX:
   mov      $SymErr, %r14
   jmp      errEXYZ
SymErr:
   .asciz   "Symbol expected"

   .globl  extErrEX
extErrEX:
   mov      $ExtErr, %r14
   jmp      errEXYZ
ExtErr:
   .asciz   "External symbol expected"

   .globl  cellErrAX
cellErrAX:
   mov      %rax, %rbx

   .globl  cellErrEX
cellErrEX:
   mov      $CellErr, %r14
   jmp      errEXYZ
CellErr:
   .asciz   "Cell expected"

   .globl  atomErrAX
atomErrAX:
   mov      %rax, %rbx

   .globl  atomErrEX
atomErrEX:
   mov      $AtomErr, %r14
   jmp      errEXYZ
AtomErr:
   .asciz   "Atom expected"

   .globl  lstErrAX
lstErrAX:
   mov      %rax, %rbx

   .globl  lstErrEX
lstErrEX:
   mov      $LstErr, %r14
   jmp      errEXYZ
LstErr:
   .asciz   "List expected"

   .globl  varErrAX
varErrAX:
   mov      %rax, %rbx

   .globl  varErrEX
varErrEX:
   mov      $VarErr, %r14
   jmp      errEXYZ
VarErr:
   .asciz   "Variable expected"

   .globl  divErrX
divErrX:
   mov      %r12, %rbx
   mov      $DivErr, %r14
   jmp      errEXYZ
DivErr:
   .asciz   "Div/0"

   .globl  renErrEX
renErrEX:
   mov      $RenErr, %r14
   jmp      errEXYZ
RenErr:
   .asciz   "Can't rename"

   .globl  makeErrX
makeErrX:
   mov      %r12, %rbx
   mov      $MakeErr, %r14
   jmp      errEXYZ
MakeErr:
   .asciz   "Not making"

   .globl  reentErrEX
reentErrEX:
   mov      $ReentErr, %r14
   jmp      errEXYZ
ReentErr:
   .asciz   "Reentrant coroutine"

   .globl  yieldErrX
yieldErrX:
   mov      %r12, %rbx

   .globl  yieldErrEX
yieldErrEX:
   mov      $YieldErr, %r14
   jmp      errEXYZ
YieldErr:
   .asciz   "No coroutine"

   .globl  msgErrYX
msgErrYX:
   mov      %r14, %rax

   .globl  msgErrAX
msgErrAX:
   mov      %rax, %rbx

   .globl  msgErrEX
msgErrEX:
   mov      $MsgErr, %r14
   jmp      errEXYZ
MsgErr:
   .asciz   "Bad message"

   .globl  brkErrX
brkErrX:
   mov      %r12, %rbx
   mov      $BrkErr, %r14
   jmp      errEXYZ
BrkErr:
   .asciz   "No Break"

   .globl  openErrEX
openErrEX:
   mov      $OpenErr, %r14
   jmp      errnoEXY
OpenErr:
   .asciz   "Open error: %s"

   .globl  closeErrX
closeErrX:
   mov      %r12, %rbx

   .globl  closeErrEX
closeErrEX:
   mov      $CloseErr, %r14
   jmp      errnoEXY
CloseErr:
   .asciz   "Close error: %s"

   .globl  pipeErrX
pipeErrX:
   mov      %r12, %rbx
   mov      $PipeErr, %r14
   jmp      errnoEXY
PipeErr:
   .asciz   "Pipe error: %s"

   .globl  forkErrX
forkErrX:
   mov      %r12, %rbx
   mov      $ForkErr, %r14
   jmp      errEXYZ
ForkErr:
   .asciz   "Can't fork"

   .globl  waitPidErrX
waitPidErrX:
   mov      %r12, %rbx
   mov      $WaitPidErr, %r14
   jmp      errnoEXY
WaitPidErr:
   .asciz   "wait pid"

   .globl  badFdErrEX
badFdErrEX:
   mov      $BadFdErr, %r14
   jmp      errEXYZ
BadFdErr:
   .asciz   "Bad FD"

   .globl  noFdErrX
noFdErrX:
   mov      %r12, %rbx
   mov      $NoFdErr, %r14
   jmp      errEXYZ
NoFdErr:
   .asciz   "No current fd"

   .globl  eofErr
eofErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $EofErr, %r14
   jmp      errEXYZ
EofErr:
   .asciz   "EOF Overrun"

   .globl  suparErrE
suparErrE:
   mov      %r12, %r13
   mov      $SuparErr, %r14
   jmp      errEXYZ
SuparErr:
   .asciz   "Super parentheses mismatch"

   .globl  badInputErrB
badInputErrB:
   movzx    %al, %rax
   mov      %rax, %r15
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $BadInput, %r14
   jmp      errEXYZ
BadInput:
   .asciz   "Bad input '%c'"

   .globl  badDotErrE
badDotErrE:
   mov      %r12, %r13
   mov      $BadDot, %r14
   jmp      errEXYZ
BadDot:
   .asciz   "Bad dotted pair"

   .globl  selectErrX
selectErrX:
   mov      %r12, %rbx
   mov      $SelectErr, %r14
   jmp      errnoEXY
SelectErr:
   .asciz   "Select error: %s"

   .globl  wrBytesErr
wrBytesErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrBytesErr, %r14
   jmp      errnoEXY
WrBytesErr:
   .asciz   "bytes write: %s"

   .globl  wrChildErr
wrChildErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrChildErr, %r14
   jmp      errnoEXY
WrChildErr:
   .asciz   "child write: %s"

   .globl  wrSyncErrX
wrSyncErrX:
   mov      %r12, %rbx
   mov      $WrSyncErr, %r14
   jmp      errnoEXY
WrSyncErr:
   .asciz   "sync write: %s"

   .globl  wrJnlErr
wrJnlErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrJnlErr, %r14
   jmp      errnoEXY
WrJnlErr:
   .asciz   "Journal write: %s"

   .globl  wrLogErr
wrLogErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $WrLogErr, %r14
   jmp      errnoEXY
WrLogErr:
   .asciz   "Log write: %s"

   .globl  truncErrX
truncErrX:
   mov      %r12, %rbx
   mov      $TruncErr, %r14
   jmp      errnoEXY
TruncErr:
   .asciz   "Log truncate error: %s"

   .globl  dbSyncErrX
dbSyncErrX:
   mov      %r12, %rbx
   mov      $DbSyncErr, %r14
   jmp      errnoEXY
DbSyncErr:
   .asciz   "DB fsync error: %s"

   .globl  trSyncErrX
trSyncErrX:
   mov      %r12, %rbx
   mov      $TrSyncErr, %r14
   jmp      errnoEXY
TrSyncErr:
   .asciz   "Transaction fsync error: %s"

   .globl  lockErr
lockErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $LockErr, %r14
   jmp      errnoEXY
LockErr:
   .asciz   "File lock: %s"

   .globl  dbfErrX
dbfErrX:
   mov      %r12, %rbx
   mov      $DbfErr, %r14
   jmp      errEXYZ
DbfErr:
   .asciz   "Bad DB file"

   .globl  jnlErrX
jnlErrX:
   mov      %r12, %rbx
   mov      $JnlErr, %r14
   jmp      errEXYZ
JnlErr:
   .asciz   "Bad Journal"

   .globl  idErrXL
idErrXL:
   mov      8(%rbp), %rbx
   mov      $IdErr, %r14
   jmp      errEXYZ
IdErr:
   .asciz   "Bad ID"

   .globl  dbRdErr
dbRdErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $DbRdErr, %r14
   jmp      errnoEXY
DbRdErr:
   .asciz   "DB read: %s"

   .globl  dbWrErr
dbWrErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $DbWrErr, %r14
   jmp      errnoEXY
DbWrErr:
   .asciz   "DB write: %s"

   .globl  dbSizErr
dbSizErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $DbSizErr, %r14
   jmp      errEXYZ
DbSizErr:
   .asciz   "DB Oversize"

   .globl  tellErr
tellErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $TellErr, %r14
   jmp      errEXYZ
TellErr:
   .asciz   "Tell PIPE_BUF"

   .globl  ipSocketErrX
ipSocketErrX:
   mov      %r12, %rbx
   mov      $IpSocketErr, %r14
   jmp      errnoEXY
IpSocketErr:
   .asciz   "IP socket error: %s"

   .globl  ipGetsocknameErrX
ipGetsocknameErrX:
   mov      %r12, %rbx
   mov      $IpGetsocknameErr, %r14
   jmp      errnoEXY
IpGetsocknameErr:
   .asciz   "IP getsockname error: %s"

   .globl  ipSetsockoptErrX
ipSetsockoptErrX:
   mov      %r12, %rbx
   mov      $IpSetsockoptErr, %r14
   jmp      errnoEXY
IpSetsockoptErr:
   .asciz   "IP setsockopt error: %s"

   .globl  ipBindErrX
ipBindErrX:
   mov      %r12, %rbx
   mov      $IpBindErr, %r14
   jmp      errnoEXY
IpBindErr:
   .asciz   "IP bind error: %s"

   .globl  ipListenErrX
ipListenErrX:
   mov      %r12, %rbx
   mov      $IpListenErr, %r14
   jmp      errnoEXY
IpListenErr:
   .asciz   "IP listen error: %s"

   .globl  udpOvflErr
udpOvflErr:
   mov      %r12, %rbx
   mov      %r12, %r13
   mov      $UdpOvflErr, %r14
   jmp      errEXYZ
UdpOvflErr:
   .asciz   "UDP overflow"

   .globl  undefinedCE
undefinedCE:
   mov      %rbx, %r13

   .globl  undefinedCX
undefinedCX:
   mov      %rdx, %rbx

   .globl  undefinedEX
undefinedEX:
   mov      $UndefErr, %r14
   jmp      errEXYZ
UndefErr:
   .asciz   "Undefined"

   .globl  dlErrX
dlErrX:
   mov      %r12, %rbx
   mov      %rdx, %r12
   call     dlerror
   mov      %r12, %rdx
   xor      %r12, %r12
   mov      $DlErr, %r14
   mov      %rax, %r15
   jmp      errEXYZ
DlErr:
   .asciz   "[DLL] %s"

   .balign  16
   .globl  ret
ret:
   rep
   ret

   .balign  16
   .globl  retc
retc:
   stc
   ret

   .balign  16
   .globl  retnc
retnc:
   clc
   ret

   .balign  16
   .globl  retz
retz:
   or       %r12, %r12
   ret

   .balign  16
   .globl  retnz
retnz:
   cmp      %rsp, %r12
   ret

   .balign  16
   .globl  retNull
retNull:
   mov      %r12, %rbx
   ret

   .balign  16
   .globl  retNil
retNil:
   mov      $Nil, %rbx
   ret

   .balign  16
   .globl  retT
retT:
   mov      $TSym, %rbx
   ret

   .balign  16
   .globl  retE_E
retE_E:
   mov      (%rbx), %rbx
   ret
